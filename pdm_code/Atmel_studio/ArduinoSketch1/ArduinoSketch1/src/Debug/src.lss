
src.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800100  0000266e  00002702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000266e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000297  00800250  00800250  00002852  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002852  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f8  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cfd1  00000000  00000000  00002dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002666  00000000  00000000  0000fd8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c51  00000000  00000000  000123f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ff0  00000000  00000000  00015044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003202  00000000  00000000  00016034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005517  00000000  00000000  00019236  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  0001e74d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__vector_16>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_18>
      4c:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_19>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__vector_24>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	73 65       	ori	r23, 0x53	; 83
      6a:	74 20       	and	r7, r4
      6c:	63 61       	ori	r22, 0x13	; 19
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	62 72       	andi	r22, 0x22	; 34
      72:	61 74       	andi	r22, 0x41	; 65
      74:	69 6f       	ori	r22, 0xF9	; 249
      76:	6e 00       	.word	0x006e	; ????

00000078 <_ZZN8INA233_S10resetAlarmEvE3__c>:
      78:	72 65 73 65 74 20 61 6c 61 72 6d 00                 reset alarm.

00000084 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_4>:
      84:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     UV WARN LIMIT re
      94:	61 64 62 61 63 6b 3a 20 00                          adback: .

0000009d <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_3>:
      9d:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     UV WARN LIMIT: .

000000ad <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_2>:
      ad:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OV WARN LIMIT re
      bd:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000c6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_1>:
      c6:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OV WARN LIMIT: .

000000d6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_0>:
      d6:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OC WARN LIMIT re
      e6:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000ef <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c>:
      ef:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OC WARN LIMIT: .

000000ff <digital_pin_to_timer_PGM>:
      ff:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     10f:	00 00 00 00                                         ....

00000113 <digital_pin_to_bit_mask_PGM>:
     113:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     123:	04 08 10 20                                         ... 

00000127 <digital_pin_to_port_PGM>:
     127:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     137:	03 03 03 03                                         ....

0000013b <port_to_output_PGM>:
     13b:	00 00 00 00 25 00 28 00 2b 00 00                    ....%.(.+..

00000146 <__ctors_start>:
     146:	3d 05       	cpc	r19, r13
     148:	27 0a       	sbc	r2, r23
     14a:	34 0f       	add	r19, r20

0000014c <__ctors_end>:
     14c:	11 24       	eor	r1, r1
     14e:	1f be       	out	0x3f, r1	; 63
     150:	cf ef       	ldi	r28, 0xFF	; 255
     152:	d8 e0       	ldi	r29, 0x08	; 8
     154:	de bf       	out	0x3e, r29	; 62
     156:	cd bf       	out	0x3d, r28	; 61

00000158 <__do_copy_data>:
     158:	12 e0       	ldi	r17, 0x02	; 2
     15a:	a0 e0       	ldi	r26, 0x00	; 0
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	ee e6       	ldi	r30, 0x6E	; 110
     160:	f6 e2       	ldi	r31, 0x26	; 38
     162:	02 c0       	rjmp	.+4      	; 0x168 <__do_copy_data+0x10>
     164:	05 90       	lpm	r0, Z+
     166:	0d 92       	st	X+, r0
     168:	a0 35       	cpi	r26, 0x50	; 80
     16a:	b1 07       	cpc	r27, r17
     16c:	d9 f7       	brne	.-10     	; 0x164 <__do_copy_data+0xc>

0000016e <__do_clear_bss>:
     16e:	24 e0       	ldi	r18, 0x04	; 4
     170:	a0 e5       	ldi	r26, 0x50	; 80
     172:	b2 e0       	ldi	r27, 0x02	; 2
     174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
     176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
     178:	a7 3e       	cpi	r26, 0xE7	; 231
     17a:	b2 07       	cpc	r27, r18
     17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>

0000017e <__do_global_ctors>:
     17e:	10 e0       	ldi	r17, 0x00	; 0
     180:	c6 ea       	ldi	r28, 0xA6	; 166
     182:	d0 e0       	ldi	r29, 0x00	; 0
     184:	04 c0       	rjmp	.+8      	; 0x18e <__do_global_ctors+0x10>
     186:	21 97       	sbiw	r28, 0x01	; 1
     188:	fe 01       	movw	r30, r28
     18a:	0e 94 2f 13 	call	0x265e	; 0x265e <__tablejump2__>
     18e:	c3 3a       	cpi	r28, 0xA3	; 163
     190:	d1 07       	cpc	r29, r17
     192:	c9 f7       	brne	.-14     	; 0x186 <__do_global_ctors+0x8>
     194:	0e 94 55 0a 	call	0x14aa	; 0x14aa <main>
     198:	0c 94 35 13 	jmp	0x266a	; 0x266a <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>:

void INA233_S::getAlarm()
{
    INA233_Data_Package data = receiveData_(0x7C, 1);
    Serial.print("status input: ");
    Serial.println(data.msg[0], BIN);
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	dc 01       	movw	r26, r24
     1aa:	6c 93       	st	X, r22
     1ac:	12 96       	adiw	r26, 0x02	; 2
     1ae:	5c 93       	st	X, r21
     1b0:	4e 93       	st	-X, r20
     1b2:	11 97       	sbiw	r26, 0x01	; 1
     1b4:	14 96       	adiw	r26, 0x04	; 4
     1b6:	3c 93       	st	X, r19
     1b8:	2e 93       	st	-X, r18
     1ba:	13 97       	sbiw	r26, 0x03	; 3
     1bc:	2c e0       	ldi	r18, 0x0C	; 12
     1be:	fe 01       	movw	r30, r28
     1c0:	35 96       	adiw	r30, 0x05	; 5
     1c2:	15 96       	adiw	r26, 0x05	; 5
     1c4:	01 90       	ld	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	2a 95       	dec	r18
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config+0x24>
     1cc:	2a e0       	ldi	r18, 0x0A	; 10
     1ce:	fc 01       	movw	r30, r24
     1d0:	71 96       	adiw	r30, 0x11	; 17
     1d2:	df 01       	movw	r26, r30
     1d4:	32 2f       	mov	r19, r18
     1d6:	1d 92       	st	X+, r1
     1d8:	3a 95       	dec	r19
     1da:	e9 f7       	brne	.-6      	; 0x1d6 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config+0x36>
     1dc:	dc 01       	movw	r26, r24
     1de:	5b 96       	adiw	r26, 0x1b	; 27
     1e0:	1c 92       	st	X, r1
     1e2:	5b 97       	sbiw	r26, 0x1b	; 27
     1e4:	5c 96       	adiw	r26, 0x1c	; 28
     1e6:	2c 93       	st	X, r18
     1e8:	5c 97       	sbiw	r26, 0x1c	; 28
     1ea:	5d 96       	adiw	r26, 0x1d	; 29
     1ec:	1c 92       	st	X, r1
     1ee:	5d 97       	sbiw	r26, 0x1d	; 29
     1f0:	5e 96       	adiw	r26, 0x1e	; 30
     1f2:	1c 92       	st	X, r1
     1f4:	5e 97       	sbiw	r26, 0x1e	; 30
     1f6:	5f 96       	adiw	r26, 0x1f	; 31
     1f8:	1c 92       	st	X, r1
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <_ZN8INA233_S15transmitCommandEh>:
     200:	cf 93       	push	r28
     202:	c6 2f       	mov	r28, r22
     204:	fc 01       	movw	r30, r24
     206:	60 81       	ld	r22, Z
     208:	8d e1       	ldi	r24, 0x1D	; 29
     20a:	94 e0       	ldi	r25, 0x04	; 4
     20c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_ZN7TwoWire17beginTransmissionEh>
     210:	6c 2f       	mov	r22, r28
     212:	8d e1       	ldi	r24, 0x1D	; 29
     214:	94 e0       	ldi	r25, 0x04	; 4
     216:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN7TwoWire5writeEh>
     21a:	8d e1       	ldi	r24, 0x1D	; 29
     21c:	94 e0       	ldi	r25, 0x04	; 4
     21e:	cf 91       	pop	r28
     220:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <_ZN7TwoWire15endTransmissionEv>

00000224 <_ZN8INA233_S10resetAlarmEv>:
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ec 01       	movw	r28, r24
     22a:	68 e7       	ldi	r22, 0x78	; 120
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	87 e7       	ldi	r24, 0x77	; 119
     230:	93 e0       	ldi	r25, 0x03	; 3
     232:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEPK19__FlashStringHelper>
     236:	63 e0       	ldi	r22, 0x03	; 3
     238:	ce 01       	movw	r24, r28
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	0c 94 00 01 	jmp	0x200	; 0x200 <_ZN8INA233_S15transmitCommandEh>

00000242 <_ZN8INA233_S9resetChipEv>:
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	ec 01       	movw	r28, r24
     248:	65 e2       	ldi	r22, 0x25	; 37
     24a:	71 e0       	ldi	r23, 0x01	; 1
     24c:	87 e7       	ldi	r24, 0x77	; 119
     24e:	93 e0       	ldi	r25, 0x03	; 3
     250:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN5Print7printlnEPKc>
     254:	62 e1       	ldi	r22, 0x12	; 18
     256:	ce 01       	movw	r24, r28
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	0c 94 00 01 	jmp	0x200	; 0x200 <_ZN8INA233_S15transmitCommandEh>

00000260 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>:
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	fc 01       	movw	r30, r24
     268:	eb 01       	movw	r28, r22
     26a:	14 2f       	mov	r17, r20
     26c:	9a 85       	ldd	r25, Y+10	; 0x0a
     26e:	93 30       	cpi	r25, 0x03	; 3
     270:	18 f0       	brcs	.+6      	; 0x278 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x18>
     272:	60 e3       	ldi	r22, 0x30	; 48
     274:	71 e0       	ldi	r23, 0x01	; 1
     276:	04 c0       	rjmp	.+8      	; 0x280 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x20>
     278:	91 11       	cpse	r25, r1
     27a:	0f c0       	rjmp	.+30     	; 0x29a <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x3a>
     27c:	66 e9       	ldi	r22, 0x96	; 150
     27e:	71 e0       	ldi	r23, 0x01	; 1
     280:	87 e7       	ldi	r24, 0x77	; 119
     282:	93 e0       	ldi	r25, 0x03	; 3
     284:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN5Print7printlnEPKc>
     288:	65 e7       	ldi	r22, 0x75	; 117
     28a:	71 e0       	ldi	r23, 0x01	; 1
     28c:	87 e7       	ldi	r24, 0x77	; 119
     28e:	93 e0       	ldi	r25, 0x03	; 3
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	1f 91       	pop	r17
     296:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <_ZN5Print7printlnEPKc>
     29a:	60 81       	ld	r22, Z
     29c:	8d e1       	ldi	r24, 0x1D	; 29
     29e:	94 e0       	ldi	r25, 0x04	; 4
     2a0:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_ZN7TwoWire17beginTransmissionEh>
     2a4:	61 2f       	mov	r22, r17
     2a6:	8d e1       	ldi	r24, 0x1D	; 29
     2a8:	94 e0       	ldi	r25, 0x04	; 4
     2aa:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN7TwoWire5writeEh>
     2ae:	68 81       	ld	r22, Y
     2b0:	8d e1       	ldi	r24, 0x1D	; 29
     2b2:	94 e0       	ldi	r25, 0x04	; 4
     2b4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN7TwoWire5writeEh>
     2b8:	8a 85       	ldd	r24, Y+10	; 0x0a
     2ba:	82 30       	cpi	r24, 0x02	; 2
     2bc:	29 f4       	brne	.+10     	; 0x2c8 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x68>
     2be:	69 81       	ldd	r22, Y+1	; 0x01
     2c0:	8d e1       	ldi	r24, 0x1D	; 29
     2c2:	94 e0       	ldi	r25, 0x04	; 4
     2c4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <_ZN7TwoWire5writeEh>
     2c8:	8d e1       	ldi	r24, 0x1D	; 29
     2ca:	94 e0       	ldi	r25, 0x04	; 4
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <_ZN7TwoWire15endTransmissionEv>

000002d6 <_ZN8INA233_S12receiveData_Ehh>:
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	ec 01       	movw	r28, r24
     2e4:	7b 01       	movw	r14, r22
     2e6:	02 2f       	mov	r16, r18
     2e8:	8f e0       	ldi	r24, 0x0F	; 15
     2ea:	fe 01       	movw	r30, r28
     2ec:	11 92       	st	Z+, r1
     2ee:	8a 95       	dec	r24
     2f0:	e9 f7       	brne	.-6      	; 0x2ec <_ZN8INA233_S12receiveData_Ehh+0x16>
     2f2:	8a e0       	ldi	r24, 0x0A	; 10
     2f4:	8b 87       	std	Y+11, r24	; 0x0b
     2f6:	64 2f       	mov	r22, r20
     2f8:	c7 01       	movw	r24, r14
     2fa:	0e 94 00 01 	call	0x200	; 0x200 <_ZN8INA233_S15transmitCommandEh>
     2fe:	40 2f       	mov	r20, r16
     300:	f7 01       	movw	r30, r14
     302:	60 81       	ld	r22, Z
     304:	8d e1       	ldi	r24, 0x1D	; 29
     306:	94 e0       	ldi	r25, 0x04	; 4
     308:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_ZN7TwoWire11requestFromEhh>
     30c:	8d e1       	ldi	r24, 0x1D	; 29
     30e:	94 e0       	ldi	r25, 0x04	; 4
     310:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN7TwoWire9availableEv>
     314:	89 2b       	or	r24, r25
     316:	79 f0       	breq	.+30     	; 0x336 <_ZN8INA233_S12receiveData_Ehh+0x60>
     318:	1a 85       	ldd	r17, Y+10	; 0x0a
     31a:	8d e1       	ldi	r24, 0x1D	; 29
     31c:	94 e0       	ldi	r25, 0x04	; 4
     31e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_ZN7TwoWire4readEv>
     322:	fe 01       	movw	r30, r28
     324:	e1 0f       	add	r30, r17
     326:	f1 1d       	adc	r31, r1
     328:	80 83       	st	Z, r24
     32a:	1f 5f       	subi	r17, 0xFF	; 255
     32c:	1a 87       	std	Y+10, r17	; 0x0a
     32e:	1a 30       	cpi	r17, 0x0A	; 10
     330:	68 f3       	brcs	.-38     	; 0x30c <_ZN8INA233_S12receiveData_Ehh+0x36>
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	8c 87       	std	Y+12, r24	; 0x0c
     336:	8a 85       	ldd	r24, Y+10	; 0x0a
     338:	80 17       	cp	r24, r16
     33a:	18 f4       	brcc	.+6      	; 0x342 <_ZN8INA233_S12receiveData_Ehh+0x6c>
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	8d 87       	std	Y+13, r24	; 0x0d
     340:	04 c0       	rjmp	.+8      	; 0x34a <_ZN8INA233_S12receiveData_Ehh+0x74>
     342:	08 17       	cp	r16, r24
     344:	10 f4       	brcc	.+4      	; 0x34a <_ZN8INA233_S12receiveData_Ehh+0x74>
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	8e 87       	std	Y+14, r24	; 0x0e
     34a:	ce 01       	movw	r24, r28
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	08 95       	ret

0000035a <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>:
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	2f 97       	sbiw	r28, 0x0f	; 15
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
     376:	8b 01       	movw	r16, r22
     378:	fb 01       	movw	r30, r22
     37a:	22 85       	ldd	r18, Z+10	; 0x0a
     37c:	bc 01       	movw	r22, r24
     37e:	ce 01       	movw	r24, r28
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	7c 01       	movw	r14, r24
     384:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN8INA233_S12receiveData_Ehh>
     388:	f8 01       	movw	r30, r16
     38a:	62 85       	ldd	r22, Z+10	; 0x0a
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	a8 01       	movw	r20, r16
     390:	d7 01       	movw	r26, r14
     392:	c8 01       	movw	r24, r16
     394:	9d 01       	movw	r18, r26
     396:	2e 19       	sub	r18, r14
     398:	3f 09       	sbc	r19, r15
     39a:	26 17       	cp	r18, r22
     39c:	37 07       	cpc	r19, r23
     39e:	40 f4       	brcc	.+16     	; 0x3b0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x56>
     3a0:	fc 01       	movw	r30, r24
     3a2:	31 91       	ld	r19, Z+
     3a4:	cf 01       	movw	r24, r30
     3a6:	2d 91       	ld	r18, X+
     3a8:	32 17       	cp	r19, r18
     3aa:	a1 f3       	breq	.-24     	; 0x394 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x3a>
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	0a c0       	rjmp	.+20     	; 0x3c4 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x6a>
     3b0:	60 0f       	add	r22, r16
     3b2:	71 1f       	adc	r23, r17
     3b4:	46 17       	cp	r20, r22
     3b6:	57 07       	cpc	r21, r23
     3b8:	21 f0       	breq	.+8      	; 0x3c2 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x68>
     3ba:	fa 01       	movw	r30, r20
     3bc:	11 92       	st	Z+, r1
     3be:	af 01       	movw	r20, r30
     3c0:	f9 cf       	rjmp	.-14     	; 0x3b4 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x5a>
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	2f 96       	adiw	r28, 0x0f	; 15
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <_ZN8INA233_S15setADC_SettingsEj>:
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	2f 97       	sbiw	r28, 0x0f	; 15
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	7c 01       	movw	r14, r24
     3fc:	8e 01       	movw	r16, r28
     3fe:	0f 5f       	subi	r16, 0xFF	; 255
     400:	1f 4f       	sbci	r17, 0xFF	; 255
     402:	8f e0       	ldi	r24, 0x0F	; 15
     404:	f8 01       	movw	r30, r16
     406:	11 92       	st	Z+, r1
     408:	8a 95       	dec	r24
     40a:	e9 f7       	brne	.-6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40c:	8a e0       	ldi	r24, 0x0A	; 10
     40e:	8c 87       	std	Y+12, r24	; 0x0c
     410:	69 83       	std	Y+1, r22	; 0x01
     412:	7a 83       	std	Y+2, r23	; 0x02
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	8b 87       	std	Y+11, r24	; 0x0b
     418:	40 ed       	ldi	r20, 0xD0	; 208
     41a:	b8 01       	movw	r22, r16
     41c:	c7 01       	movw	r24, r14
     41e:	0e 94 30 01 	call	0x260	; 0x260 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     422:	40 ed       	ldi	r20, 0xD0	; 208
     424:	b8 01       	movw	r22, r16
     426:	c7 01       	movw	r24, r14
     428:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	2f 96       	adiw	r28, 0x0f	; 15
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	08 95       	ret

00000448 <_ZN8INA233_S15setCallibrationEj>:
     448:	cf 92       	push	r12
     44a:	df 92       	push	r13
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	2f 97       	sbiw	r28, 0x0f	; 15
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f be       	out	0x3f, r0	; 63
     466:	cd bf       	out	0x3d, r28	; 61
     468:	7c 01       	movw	r14, r24
     46a:	6b 01       	movw	r12, r22
     46c:	68 e6       	ldi	r22, 0x68	; 104
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	87 e7       	ldi	r24, 0x77	; 119
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEPK19__FlashStringHelper>
     478:	8e 01       	movw	r16, r28
     47a:	0f 5f       	subi	r16, 0xFF	; 255
     47c:	1f 4f       	sbci	r17, 0xFF	; 255
     47e:	8f e0       	ldi	r24, 0x0F	; 15
     480:	f8 01       	movw	r30, r16
     482:	11 92       	st	Z+, r1
     484:	8a 95       	dec	r24
     486:	e9 f7       	brne	.-6      	; 0x482 <_ZN8INA233_S15setCallibrationEj+0x3a>
     488:	8a e0       	ldi	r24, 0x0A	; 10
     48a:	8c 87       	std	Y+12, r24	; 0x0c
     48c:	c9 82       	std	Y+1, r12	; 0x01
     48e:	da 82       	std	Y+2, r13	; 0x02
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	8b 87       	std	Y+11, r24	; 0x0b
     494:	44 ed       	ldi	r20, 0xD4	; 212
     496:	b8 01       	movw	r22, r16
     498:	c7 01       	movw	r24, r14
     49a:	0e 94 30 01 	call	0x260	; 0x260 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     49e:	44 ed       	ldi	r20, 0xD4	; 212
     4a0:	b8 01       	movw	r22, r16
     4a2:	c7 01       	movw	r24, r14
     4a4:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	2f 96       	adiw	r28, 0x0f	; 15
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	08 95       	ret

000004c8 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>:
     4c8:	4f 92       	push	r4
     4ca:	5f 92       	push	r5
     4cc:	6f 92       	push	r6
     4ce:	7f 92       	push	r7
     4d0:	af 92       	push	r10
     4d2:	bf 92       	push	r11
     4d4:	cf 92       	push	r12
     4d6:	df 92       	push	r13
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	0f 93       	push	r16
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	ae 97       	sbiw	r28, 0x2e	; 46
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	5c 01       	movw	r10, r24
     4f6:	cf 8e       	std	Y+31, r12	; 0x1f
     4f8:	d8 a2       	std	Y+32, r13	; 0x20
     4fa:	e9 a2       	std	Y+33, r14	; 0x21
     4fc:	fa a2       	std	Y+34, r15	; 0x22
     4fe:	0b a3       	std	Y+35, r16	; 0x23
     500:	1c a3       	std	Y+36, r17	; 0x24
     502:	2d a3       	std	Y+37, r18	; 0x25
     504:	3e a3       	std	Y+38, r19	; 0x26
     506:	4f a3       	std	Y+39, r20	; 0x27
     508:	58 a7       	std	Y+40, r21	; 0x28
     50a:	69 a7       	std	Y+41, r22	; 0x29
     50c:	7a a7       	std	Y+42, r23	; 0x2a
     50e:	cf 8c       	ldd	r12, Y+31	; 0x1f
     510:	d8 a0       	ldd	r13, Y+32	; 0x20
     512:	e9 a0       	ldd	r14, Y+33	; 0x21
     514:	fa a0       	ldd	r15, Y+34	; 0x22
     516:	8b a1       	ldd	r24, Y+35	; 0x23
     518:	9c a1       	ldd	r25, Y+36	; 0x24
     51a:	ad a1       	ldd	r26, Y+37	; 0x25
     51c:	be a1       	ldd	r27, Y+38	; 0x26
     51e:	8b a7       	std	Y+43, r24	; 0x2b
     520:	9c a7       	std	Y+44, r25	; 0x2c
     522:	ad a7       	std	Y+45, r26	; 0x2d
     524:	be a7       	std	Y+46, r27	; 0x2e
     526:	4f a0       	ldd	r4, Y+39	; 0x27
     528:	58 a4       	ldd	r5, Y+40	; 0x28
     52a:	69 a4       	ldd	r6, Y+41	; 0x29
     52c:	7a a4       	ldd	r7, Y+42	; 0x2a
     52e:	62 eb       	ldi	r22, 0xB2	; 178
     530:	71 e0       	ldi	r23, 0x01	; 1
     532:	87 e7       	ldi	r24, 0x77	; 119
     534:	93 e0       	ldi	r25, 0x03	; 3
     536:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN5Print7printlnEPKc>
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	a9 01       	movw	r20, r18
     540:	c7 01       	movw	r24, r14
     542:	b6 01       	movw	r22, r12
     544:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__gesf2>
     548:	18 16       	cp	r1, r24
     54a:	0c f0       	brlt	.+2      	; 0x54e <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x86>
     54c:	51 c0       	rjmp	.+162    	; 0x5f0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x128>
     54e:	d5 01       	movw	r26, r10
     550:	11 96       	adiw	r26, 0x01	; 1
     552:	6d 91       	ld	r22, X+
     554:	7c 91       	ld	r23, X
     556:	12 97       	sbiw	r26, 0x02	; 2
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 5d 07 	call	0xeba	; 0xeba <__floatunsisf>
     560:	a7 01       	movw	r20, r14
     562:	96 01       	movw	r18, r12
     564:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__mulsf3>
     568:	6b 01       	movw	r12, r22
     56a:	7c 01       	movw	r14, r24
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	a9 01       	movw	r20, r18
     572:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__gesf2>
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	5f e3       	ldi	r21, 0x3F	; 63
     57e:	87 fd       	sbrc	r24, 7
     580:	05 c0       	rjmp	.+10     	; 0x58c <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xc4>
     582:	c7 01       	movw	r24, r14
     584:	b6 01       	movw	r22, r12
     586:	0e 94 49 06 	call	0xc92	; 0xc92 <__addsf3>
     58a:	04 c0       	rjmp	.+8      	; 0x594 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xcc>
     58c:	c7 01       	movw	r24, r14
     58e:	b6 01       	movw	r22, r12
     590:	0e 94 48 06 	call	0xc90	; 0xc90 <__subsf3>
     594:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fixsfsi>
     598:	8b 01       	movw	r16, r22
     59a:	7e 01       	movw	r14, r28
     59c:	b0 e1       	ldi	r27, 0x10	; 16
     59e:	eb 0e       	add	r14, r27
     5a0:	f1 1c       	adc	r15, r1
     5a2:	8f e0       	ldi	r24, 0x0F	; 15
     5a4:	f7 01       	movw	r30, r14
     5a6:	11 92       	st	Z+, r1
     5a8:	8a 95       	dec	r24
     5aa:	e9 f7       	brne	.-6      	; 0x5a6 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xde>
     5ac:	8a e0       	ldi	r24, 0x0A	; 10
     5ae:	8b 8f       	std	Y+27, r24	; 0x1b
     5b0:	08 8b       	std	Y+16, r16	; 0x10
     5b2:	19 8b       	std	Y+17, r17	; 0x11
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	8a 8f       	std	Y+26, r24	; 0x1a
     5b8:	6f ee       	ldi	r22, 0xEF	; 239
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	87 e7       	ldi	r24, 0x77	; 119
     5be:	93 e0       	ldi	r25, 0x03	; 3
     5c0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEPK19__FlashStringHelper>
     5c4:	4a e0       	ldi	r20, 0x0A	; 10
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	b8 01       	movw	r22, r16
     5ca:	87 e7       	ldi	r24, 0x77	; 119
     5cc:	93 e0       	ldi	r25, 0x03	; 3
     5ce:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN5Print7printlnEji>
     5d2:	4a e4       	ldi	r20, 0x4A	; 74
     5d4:	b7 01       	movw	r22, r14
     5d6:	c5 01       	movw	r24, r10
     5d8:	0e 94 30 01 	call	0x260	; 0x260 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     5dc:	22 e0       	ldi	r18, 0x02	; 2
     5de:	4a e4       	ldi	r20, 0x4A	; 74
     5e0:	b5 01       	movw	r22, r10
     5e2:	ce 01       	movw	r24, r28
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN8INA233_S12receiveData_Ehh>
     5ea:	66 ed       	ldi	r22, 0xD6	; 214
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	af c0       	rjmp	.+350    	; 0x74e <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	a9 01       	movw	r20, r18
     5f6:	6b a5       	ldd	r22, Y+43	; 0x2b
     5f8:	7c a5       	ldd	r23, Y+44	; 0x2c
     5fa:	8d a5       	ldd	r24, Y+45	; 0x2d
     5fc:	9e a5       	ldd	r25, Y+46	; 0x2e
     5fe:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__gesf2>
     602:	18 16       	cp	r1, r24
     604:	0c f0       	brlt	.+2      	; 0x608 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x140>
     606:	4e c0       	rjmp	.+156    	; 0x6a4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1dc>
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	48 e4       	ldi	r20, 0x48	; 72
     60e:	54 e4       	ldi	r21, 0x44	; 68
     610:	6b a5       	ldd	r22, Y+43	; 0x2b
     612:	7c a5       	ldd	r23, Y+44	; 0x2c
     614:	8d a5       	ldd	r24, Y+45	; 0x2d
     616:	9e a5       	ldd	r25, Y+46	; 0x2e
     618:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__mulsf3>
     61c:	6b 01       	movw	r12, r22
     61e:	7c 01       	movw	r14, r24
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	a9 01       	movw	r20, r18
     626:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__gesf2>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	5f e3       	ldi	r21, 0x3F	; 63
     632:	87 fd       	sbrc	r24, 7
     634:	05 c0       	rjmp	.+10     	; 0x640 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x178>
     636:	c7 01       	movw	r24, r14
     638:	b6 01       	movw	r22, r12
     63a:	0e 94 49 06 	call	0xc92	; 0xc92 <__addsf3>
     63e:	04 c0       	rjmp	.+8      	; 0x648 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x180>
     640:	c7 01       	movw	r24, r14
     642:	b6 01       	movw	r22, r12
     644:	0e 94 48 06 	call	0xc90	; 0xc90 <__subsf3>
     648:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fixsfsi>
     64c:	8b 01       	movw	r16, r22
     64e:	7e 01       	movw	r14, r28
     650:	f0 e1       	ldi	r31, 0x10	; 16
     652:	ef 0e       	add	r14, r31
     654:	f1 1c       	adc	r15, r1
     656:	8f e0       	ldi	r24, 0x0F	; 15
     658:	d7 01       	movw	r26, r14
     65a:	1d 92       	st	X+, r1
     65c:	8a 95       	dec	r24
     65e:	e9 f7       	brne	.-6      	; 0x65a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x192>
     660:	8a e0       	ldi	r24, 0x0A	; 10
     662:	8b 8f       	std	Y+27, r24	; 0x1b
     664:	08 8b       	std	Y+16, r16	; 0x10
     666:	19 8b       	std	Y+17, r17	; 0x11
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	8a 8f       	std	Y+26, r24	; 0x1a
     66c:	66 ec       	ldi	r22, 0xC6	; 198
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	87 e7       	ldi	r24, 0x77	; 119
     672:	93 e0       	ldi	r25, 0x03	; 3
     674:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEPK19__FlashStringHelper>
     678:	4a e0       	ldi	r20, 0x0A	; 10
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	b8 01       	movw	r22, r16
     67e:	87 e7       	ldi	r24, 0x77	; 119
     680:	93 e0       	ldi	r25, 0x03	; 3
     682:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN5Print7printlnEji>
     686:	47 e5       	ldi	r20, 0x57	; 87
     688:	b7 01       	movw	r22, r14
     68a:	c5 01       	movw	r24, r10
     68c:	0e 94 30 01 	call	0x260	; 0x260 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     690:	22 e0       	ldi	r18, 0x02	; 2
     692:	47 e5       	ldi	r20, 0x57	; 87
     694:	b5 01       	movw	r22, r10
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN8INA233_S12receiveData_Ehh>
     69e:	6d ea       	ldi	r22, 0xAD	; 173
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	55 c0       	rjmp	.+170    	; 0x74e <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	a9 01       	movw	r20, r18
     6aa:	c3 01       	movw	r24, r6
     6ac:	b2 01       	movw	r22, r4
     6ae:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__gesf2>
     6b2:	18 16       	cp	r1, r24
     6b4:	0c f0       	brlt	.+2      	; 0x6b8 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1f0>
     6b6:	5a c0       	rjmp	.+180    	; 0x76c <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	48 e4       	ldi	r20, 0x48	; 72
     6be:	54 e4       	ldi	r21, 0x44	; 68
     6c0:	c3 01       	movw	r24, r6
     6c2:	b2 01       	movw	r22, r4
     6c4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__mulsf3>
     6c8:	6b 01       	movw	r12, r22
     6ca:	7c 01       	movw	r14, r24
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	a9 01       	movw	r20, r18
     6d2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__gesf2>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	87 fd       	sbrc	r24, 7
     6e0:	05 c0       	rjmp	.+10     	; 0x6ec <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x224>
     6e2:	c7 01       	movw	r24, r14
     6e4:	b6 01       	movw	r22, r12
     6e6:	0e 94 49 06 	call	0xc92	; 0xc92 <__addsf3>
     6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x22c>
     6ec:	c7 01       	movw	r24, r14
     6ee:	b6 01       	movw	r22, r12
     6f0:	0e 94 48 06 	call	0xc90	; 0xc90 <__subsf3>
     6f4:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fixsfsi>
     6f8:	8b 01       	movw	r16, r22
     6fa:	7e 01       	movw	r14, r28
     6fc:	b0 e1       	ldi	r27, 0x10	; 16
     6fe:	eb 0e       	add	r14, r27
     700:	f1 1c       	adc	r15, r1
     702:	8f e0       	ldi	r24, 0x0F	; 15
     704:	f7 01       	movw	r30, r14
     706:	11 92       	st	Z+, r1
     708:	8a 95       	dec	r24
     70a:	e9 f7       	brne	.-6      	; 0x706 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x23e>
     70c:	8a e0       	ldi	r24, 0x0A	; 10
     70e:	8b 8f       	std	Y+27, r24	; 0x1b
     710:	08 8b       	std	Y+16, r16	; 0x10
     712:	19 8b       	std	Y+17, r17	; 0x11
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	8a 8f       	std	Y+26, r24	; 0x1a
     718:	6d e9       	ldi	r22, 0x9D	; 157
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	87 e7       	ldi	r24, 0x77	; 119
     71e:	93 e0       	ldi	r25, 0x03	; 3
     720:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEPK19__FlashStringHelper>
     724:	4a e0       	ldi	r20, 0x0A	; 10
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	b8 01       	movw	r22, r16
     72a:	87 e7       	ldi	r24, 0x77	; 119
     72c:	93 e0       	ldi	r25, 0x03	; 3
     72e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN5Print7printlnEji>
     732:	48 e5       	ldi	r20, 0x58	; 88
     734:	b7 01       	movw	r22, r14
     736:	c5 01       	movw	r24, r10
     738:	0e 94 30 01 	call	0x260	; 0x260 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     73c:	22 e0       	ldi	r18, 0x02	; 2
     73e:	48 e5       	ldi	r20, 0x58	; 88
     740:	b5 01       	movw	r22, r10
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN8INA233_S12receiveData_Ehh>
     74a:	64 e8       	ldi	r22, 0x84	; 132
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	87 e7       	ldi	r24, 0x77	; 119
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5Print7printlnEPK19__FlashStringHelper>
     756:	69 81       	ldd	r22, Y+1	; 0x01
     758:	7a 81       	ldd	r23, Y+2	; 0x02
     75a:	4a e0       	ldi	r20, 0x0A	; 10
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	87 e7       	ldi	r24, 0x77	; 119
     760:	93 e0       	ldi	r25, 0x03	; 3
     762:	0e 94 bc 0b 	call	0x1778	; 0x1778 <_ZN5Print7printlnEii>
     766:	8a e0       	ldi	r24, 0x0A	; 10
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	00 c0       	rjmp	.+0      	; 0x76c <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     76c:	ae 96       	adiw	r28, 0x2e	; 46
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	bf 90       	pop	r11
     78a:	af 90       	pop	r10
     78c:	7f 90       	pop	r7
     78e:	6f 90       	pop	r6
     790:	5f 90       	pop	r5
     792:	4f 90       	pop	r4
     794:	08 95       	ret

00000796 <_ZN8INA233_S10initializeEv>:
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	ec 01       	movw	r28, r24
     7a8:	0e 94 21 01 	call	0x242	; 0x242 <_ZN8INA233_S9resetChipEv>
     7ac:	6b 81       	ldd	r22, Y+3	; 0x03
     7ae:	7c 81       	ldd	r23, Y+4	; 0x04
     7b0:	ce 01       	movw	r24, r28
     7b2:	0e 94 24 02 	call	0x448	; 0x448 <_ZN8INA233_S15setCallibrationEj>
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	91 05       	cpc	r25, r1
     7ba:	a1 f0       	breq	.+40     	; 0x7e4 <_ZN8INA233_S10initializeEv+0x4e>
     7bc:	ce 01       	movw	r24, r28
     7be:	0e 94 12 01 	call	0x224	; 0x224 <_ZN8INA233_S10resetAlarmEv>
     7c2:	cd 80       	ldd	r12, Y+5	; 0x05
     7c4:	de 80       	ldd	r13, Y+6	; 0x06
     7c6:	ef 80       	ldd	r14, Y+7	; 0x07
     7c8:	f8 84       	ldd	r15, Y+8	; 0x08
     7ca:	09 85       	ldd	r16, Y+9	; 0x09
     7cc:	1a 85       	ldd	r17, Y+10	; 0x0a
     7ce:	2b 85       	ldd	r18, Y+11	; 0x0b
     7d0:	3c 85       	ldd	r19, Y+12	; 0x0c
     7d2:	4d 85       	ldd	r20, Y+13	; 0x0d
     7d4:	5e 85       	ldd	r21, Y+14	; 0x0e
     7d6:	6f 85       	ldd	r22, Y+15	; 0x0f
     7d8:	78 89       	ldd	r23, Y+16	; 0x10
     7da:	ce 01       	movw	r24, r28
     7dc:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	cf 90       	pop	r12
     7f4:	08 95       	ret

000007f6 <_ZN8INA233_S10getCurrentEv>:
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	2f 97       	sbiw	r28, 0x0f	; 15
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	7c 01       	movw	r14, r24
     818:	22 e0       	ldi	r18, 0x02	; 2
     81a:	49 e8       	ldi	r20, 0x89	; 137
     81c:	bc 01       	movw	r22, r24
     81e:	ce 01       	movw	r24, r28
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN8INA233_S12receiveData_Ehh>
     826:	09 81       	ldd	r16, Y+1	; 0x01
     828:	1a 81       	ldd	r17, Y+2	; 0x02
     82a:	6f eb       	ldi	r22, 0xBF	; 191
     82c:	71 e0       	ldi	r23, 0x01	; 1
     82e:	87 e7       	ldi	r24, 0x77	; 119
     830:	93 e0       	ldi	r25, 0x03	; 3
     832:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN5Print5printEPKc>
     836:	4a e0       	ldi	r20, 0x0A	; 10
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	b8 01       	movw	r22, r16
     83c:	87 e7       	ldi	r24, 0x77	; 119
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	0e 94 bc 0b 	call	0x1778	; 0x1778 <_ZN5Print7printlnEii>
     844:	f7 01       	movw	r30, r14
     846:	61 81       	ldd	r22, Z+1	; 0x01
     848:	72 81       	ldd	r23, Z+2	; 0x02
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 5d 07 	call	0xeba	; 0xeba <__floatunsisf>
     852:	9b 01       	movw	r18, r22
     854:	ac 01       	movw	r20, r24
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	80 e8       	ldi	r24, 0x80	; 128
     85c:	9f e3       	ldi	r25, 0x3F	; 63
     85e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__divsf3>
     862:	6b 01       	movw	r12, r22
     864:	7c 01       	movw	r14, r24
     866:	b8 01       	movw	r22, r16
     868:	11 0f       	add	r17, r17
     86a:	88 0b       	sbc	r24, r24
     86c:	99 0b       	sbc	r25, r25
     86e:	0e 94 5f 07 	call	0xebe	; 0xebe <__floatsisf>
     872:	9b 01       	movw	r18, r22
     874:	ac 01       	movw	r20, r24
     876:	c7 01       	movw	r24, r14
     878:	b6 01       	movw	r22, r12
     87a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__mulsf3>
     87e:	2f 96       	adiw	r28, 0x0f	; 15
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	08 95       	ret

0000089c <_ZN8INA233_S17testCommunicationEv>:
    Serial.println("reset chip");
    transmitCommand(0x12);
}

int INA233_S::testCommunication()
{
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	df 92       	push	r13
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	66 97       	sbiw	r28, 0x16	; 22
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	8c 01       	movw	r16, r24
    Serial.println("test communications");
     8c0:	60 ee       	ldi	r22, 0xE0	; 224
     8c2:	71 e0       	ldi	r23, 0x01	; 1
     8c4:	87 e7       	ldi	r24, 0x77	; 119
     8c6:	93 e0       	ldi	r25, 0x03	; 3
     8c8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN5Print7printlnEPKc>
    // TO DO ! Read MFR_MODEL, compare if correct.
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x12, 7);
     8cc:	27 e0       	ldi	r18, 0x07	; 7
     8ce:	42 e1       	ldi	r20, 0x12	; 18
     8d0:	b8 01       	movw	r22, r16
     8d2:	ce 01       	movw	r24, r28
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN8INA233_S12receiveData_Ehh>
    uint8_t compare[7]{
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};
     8da:	87 e0       	ldi	r24, 0x07	; 7
     8dc:	ee e1       	ldi	r30, 0x1E	; 30
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	de 01       	movw	r26, r28
     8e2:	50 96       	adiw	r26, 0x10	; 16
     8e4:	01 90       	ld	r0, Z+
     8e6:	0d 92       	st	X+, r0
     8e8:	8a 95       	dec	r24
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <_ZN8INA233_S17testCommunicationEv+0x48>
     8ec:	8e 01       	movw	r16, r28
     8ee:	0f 5f       	subi	r16, 0xFF	; 255
     8f0:	1f 4f       	sbci	r17, 0xFF	; 255
     8f2:	7e 01       	movw	r14, r28
     8f4:	80 e1       	ldi	r24, 0x10	; 16
     8f6:	e8 0e       	add	r14, r24
     8f8:	f1 1c       	adc	r15, r1
     8fa:	5e 01       	movw	r10, r28
     8fc:	e8 e0       	ldi	r30, 0x08	; 8
     8fe:	ae 0e       	add	r10, r30
     900:	b1 1c       	adc	r11, r1

    for (int ii = 0; ii <= 6; ii++)
    {
        Serial.print("Readback MFR_MODEL: ");
     902:	64 ef       	ldi	r22, 0xF4	; 244
     904:	71 e0       	ldi	r23, 0x01	; 1
     906:	87 e7       	ldi	r24, 0x77	; 119
     908:	93 e0       	ldi	r25, 0x03	; 3
     90a:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN5Print5printEPKc>
        Serial.print(data.msg[ii]);
     90e:	f8 01       	movw	r30, r16
     910:	d1 90       	ld	r13, Z+
     912:	8f 01       	movw	r16, r30
     914:	4a e0       	ldi	r20, 0x0A	; 10
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	6d 2d       	mov	r22, r13
     91a:	87 e7       	ldi	r24, 0x77	; 119
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	0e 94 4e 0b 	call	0x169c	; 0x169c <_ZN5Print5printEhi>
        if (compare[ii] != data.msg[ii])
     922:	f7 01       	movw	r30, r14
     924:	81 91       	ld	r24, Z+
     926:	7f 01       	movw	r14, r30
     928:	d8 16       	cp	r13, r24
     92a:	49 f0       	breq	.+18     	; 0x93e <__stack+0x3f>
        {
            Serial.println("Communication error");
     92c:	69 e0       	ldi	r22, 0x09	; 9
     92e:	72 e0       	ldi	r23, 0x02	; 2
     930:	87 e7       	ldi	r24, 0x77	; 119
     932:	93 e0       	ldi	r25, 0x03	; 3
     934:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN5Print7printlnEPKc>
			return 1;
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	05 c0       	rjmp	.+10     	; 0x948 <__stack+0x49>
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x12, 7);
    uint8_t compare[7]{
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};

    for (int ii = 0; ii <= 6; ii++)
     93e:	0a 15       	cp	r16, r10
     940:	1b 05       	cpc	r17, r11
     942:	f9 f6       	brne	.-66     	; 0x902 <__stack+0x3>
            Serial.println("Communication error");
			return 1;
        }
    }
	
	return 0;
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
}
     948:	66 96       	adiw	r28, 0x16	; 22
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	cd bf       	out	0x3d, r28	; 61
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	df 90       	pop	r13
     962:	bf 90       	pop	r11
     964:	af 90       	pop	r10
     966:	08 95       	ret

00000968 <setup>:
		p7(p7_ACM_E_Pin);

// Adding each mosfet object to a pointer array for easier loops
mosfet* MosfetList[] = { &p1, &p2, &p3, &p4, &p5, &p6, &p7 };

void setup() {
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
	Wire.begin();
     970:	8d e1       	ldi	r24, 0x1D	; 29
     972:	94 e0       	ldi	r25, 0x04	; 4
     974:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_ZN7TwoWire5beginEv>
	Wire.setClock(10000);
     978:	40 e1       	ldi	r20, 0x10	; 16
     97a:	57 e2       	ldi	r21, 0x27	; 39
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	8d e1       	ldi	r24, 0x1D	; 29
     982:	94 e0       	ldi	r25, 0x04	; 4
     984:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZN7TwoWire8setClockEm>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     988:	26 e0       	ldi	r18, 0x06	; 6
     98a:	40 e8       	ldi	r20, 0x80	; 128
     98c:	55 e2       	ldi	r21, 0x25	; 37
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	87 e7       	ldi	r24, 0x77	; 119
     994:	93 e0       	ldi	r25, 0x03	; 3
     996:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN14HardwareSerial5beginEmh>
     99a:	ce e0       	ldi	r28, 0x0E	; 14
     99c:	d1 e0       	ldi	r29, 0x01	; 1
     99e:	8e 01       	movw	r16, r28
	Serial.begin(9600);
	
// Setup for each INA233 sensor
	for(uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->initialize();
     9a0:	f8 01       	movw	r30, r16
     9a2:	81 91       	ld	r24, Z+
     9a4:	91 91       	ld	r25, Z+
     9a6:	8f 01       	movw	r16, r30
     9a8:	0e 94 cb 03 	call	0x796	; 0x796 <_ZN8INA233_S10initializeEv>
	Wire.begin();
	Wire.setClock(10000);
	Serial.begin(9600);
	
// Setup for each INA233 sensor
	for(uint8_t ii = 0; ii < 7; ii++){
     9ac:	f1 e0       	ldi	r31, 0x01	; 1
     9ae:	0c 31       	cpi	r16, 0x1C	; 28
     9b0:	1f 07       	cpc	r17, r31
     9b2:	b1 f7       	brne	.-20     	; 0x9a0 <setup+0x38>
		SensorList[ii]->initialize();
	}	

	for  (uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->setADC_Settings(default_address);
     9b4:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <default_address>
     9b8:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <default_address+0x1>
     9bc:	89 91       	ld	r24, Y+
     9be:	99 91       	ld	r25, Y+
     9c0:	0e 94 ef 01 	call	0x3de	; 0x3de <_ZN8INA233_S15setADC_SettingsEj>
// Setup for each INA233 sensor
	for(uint8_t ii = 0; ii < 7; ii++){
		SensorList[ii]->initialize();
	}	

	for  (uint8_t ii = 0; ii < 7; ii++){
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	cc 31       	cpi	r28, 0x1C	; 28
     9c8:	d8 07       	cpc	r29, r24
     9ca:	a1 f7       	brne	.-24     	; 0x9b4 <setup+0x4c>
	//Serial.println(freeMemory());

  //Sensor1.setAlarmMask (0b11011111);
  //Sensor1.setMFRConfig (0b00000001);
  //expander.setPin (1,true);  
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	08 95       	ret

000009d6 <_Z29check_INA233_miscommunicationv>:


	}
*/

void check_INA233_miscommunication(){
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
	
	if((millis() - timeStamps[0]) > interval_INA233_checking){
     9de:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <millis>
     9e2:	00 91 37 03 	lds	r16, 0x0337	; 0x800337 <timeStamps>
     9e6:	10 91 38 03 	lds	r17, 0x0338	; 0x800338 <timeStamps+0x1>
     9ea:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <timeStamps+0x2>
     9ee:	30 91 3a 03 	lds	r19, 0x033A	; 0x80033a <timeStamps+0x3>
     9f2:	dc 01       	movw	r26, r24
     9f4:	cb 01       	movw	r24, r22
     9f6:	80 1b       	sub	r24, r16
     9f8:	91 0b       	sbc	r25, r17
     9fa:	a2 0b       	sbc	r26, r18
     9fc:	b3 0b       	sbc	r27, r19
     9fe:	81 31       	cpi	r24, 0x11	; 17
     a00:	97 42       	sbci	r25, 0x27	; 39
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	08 f1       	brcs	.+66     	; 0xa4a <_Z29check_INA233_miscommunicationv+0x74>
     a08:	ce e0       	ldi	r28, 0x0E	; 14
     a0a:	d1 e0       	ldi	r29, 0x01	; 1
     a0c:	00 e0       	ldi	r16, 0x00	; 0
     a0e:	11 e0       	ldi	r17, 0x01	; 1
		
		for (uint8_t ii = 0; ii < 7; ii++){
			// If communication is not responding properly, close mosfet
			if(SensorList[ii]->testCommunication() == 1){
     a10:	89 91       	ld	r24, Y+
     a12:	99 91       	ld	r25, Y+
     a14:	0e 94 4e 04 	call	0x89c	; 0x89c <_ZN8INA233_S17testCommunicationEv>
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	39 f4       	brne	.+14     	; 0xa2a <_Z29check_INA233_miscommunicationv+0x54>
public:
	mosfet() = delete;
	mosfet(uint8_t MOSpin) : MOSpin_(MOSpin){ }
		
	void close_MOSFET(){
		digitalWrite(MOSpin_, LOW);
     a1c:	d8 01       	movw	r26, r16
     a1e:	ed 91       	ld	r30, X+
     a20:	fc 91       	ld	r31, X
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <digitalWrite>
     a2a:	0e 5f       	subi	r16, 0xFE	; 254
     a2c:	1f 4f       	sbci	r17, 0xFF	; 255

void check_INA233_miscommunication(){
	
	if((millis() - timeStamps[0]) > interval_INA233_checking){
		
		for (uint8_t ii = 0; ii < 7; ii++){
     a2e:	b1 e0       	ldi	r27, 0x01	; 1
     a30:	cc 31       	cpi	r28, 0x1C	; 28
     a32:	db 07       	cpc	r29, r27
     a34:	69 f7       	brne	.-38     	; 0xa10 <_Z29check_INA233_miscommunicationv+0x3a>
			if(SensorList[ii]->testCommunication() == 1){
				MosfetList[ii]->close_MOSFET();
			}
		}		
		
		timeStamps[0] = millis();
     a36:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <millis>
     a3a:	60 93 37 03 	sts	0x0337, r22	; 0x800337 <timeStamps>
     a3e:	70 93 38 03 	sts	0x0338, r23	; 0x800338 <timeStamps+0x1>
     a42:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <timeStamps+0x2>
     a46:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <timeStamps+0x3>
	}
}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <loop>:
	void close_MOSFET(){
		digitalWrite(MOSpin_, LOW);
	}

	void open_MOSFET(){
		digitalWrite(MOSpin_, HIGH);
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <p1>
     a5a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <digitalWrite>


void loop() {
	
	p1.open_MOSFET();
	check_INA233_miscommunication();
     a5e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_Z29check_INA233_miscommunicationv>
	
	float current_1 = Sensor_1.getCurrent();
     a62:	87 e1       	ldi	r24, 0x17	; 23
     a64:	93 e0       	ldi	r25, 0x03	; 3
     a66:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_ZN8INA233_S10getCurrentEv>
     a6a:	ab 01       	movw	r20, r22
     a6c:	bc 01       	movw	r22, r24
	int test = 1 ;
	
	Serial.println(current_1);
     a6e:	22 e0       	ldi	r18, 0x02	; 2
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	87 e7       	ldi	r24, 0x77	; 119
     a74:	93 e0       	ldi	r25, 0x03	; 3
     a76:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <_ZN5Print7printlnEdi>

00000a7a <_GLOBAL__sub_I_default_address>:
};

struct INA233_Alarm_Config
{
  float overCurrent = 0, overVoltage = 0, underVoltage = 0;
  INA233_Alarm_Config(float oc, float ov, float uv) : overCurrent(oc), overVoltage(ov), underVoltage(uv) {}  
     a7a:	eb e6       	ldi	r30, 0x6B	; 107
     a7c:	f3 e0       	ldi	r31, 0x03	; 3
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	70 e4       	ldi	r23, 0x40	; 64
     a86:	40 83       	st	Z, r20
     a88:	51 83       	std	Z+1, r21	; 0x01
     a8a:	62 83       	std	Z+2, r22	; 0x02
     a8c:	73 83       	std	Z+3, r23	; 0x03
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e5       	ldi	r26, 0x50	; 80
     a94:	b1 e4       	ldi	r27, 0x41	; 65
     a96:	84 83       	std	Z+4, r24	; 0x04
     a98:	95 83       	std	Z+5, r25	; 0x05
     a9a:	a6 83       	std	Z+6, r26	; 0x06
     a9c:	b7 83       	std	Z+7, r27	; 0x07
     a9e:	10 86       	std	Z+8, r1	; 0x08
     aa0:	11 86       	std	Z+9, r1	; 0x09
     aa2:	12 86       	std	Z+10, r1	; 0x0a
     aa4:	13 86       	std	Z+11, r1	; 0x0b
     aa6:	ef e5       	ldi	r30, 0x5F	; 95
     aa8:	f3 e0       	ldi	r31, 0x03	; 3
     aaa:	40 83       	st	Z, r20
     aac:	51 83       	std	Z+1, r21	; 0x01
     aae:	62 83       	std	Z+2, r22	; 0x02
     ab0:	73 83       	std	Z+3, r23	; 0x03
     ab2:	84 83       	std	Z+4, r24	; 0x04
     ab4:	95 83       	std	Z+5, r25	; 0x05
     ab6:	a6 83       	std	Z+6, r26	; 0x06
     ab8:	b7 83       	std	Z+7, r27	; 0x07
     aba:	10 86       	std	Z+8, r1	; 0x08
     abc:	11 86       	std	Z+9, r1	; 0x09
     abe:	12 86       	std	Z+10, r1	; 0x0a
     ac0:	13 86       	std	Z+11, r1	; 0x0b
uint16_t default_address = 0b0100011100100111;
unsigned long timeStamps[10] = {0};


// creating each INA233 sensor object
INA233_S Sensor_1(adrSensor1, m_valueSensor1, cal_valueSensor1, alarmConfigSensor1), 
     ac2:	8d b7       	in	r24, 0x3d	; 61
     ac4:	9e b7       	in	r25, 0x3e	; 62
     ac6:	0c 97       	sbiw	r24, 0x0c	; 12
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	9e bf       	out	0x3e, r25	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	8d bf       	out	0x3d, r24	; 61
     ad2:	ad b7       	in	r26, 0x3d	; 61
     ad4:	be b7       	in	r27, 0x3e	; 62
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	8c e0       	ldi	r24, 0x0C	; 12
     ada:	eb e6       	ldi	r30, 0x6B	; 107
     adc:	f3 e0       	ldi	r31, 0x03	; 3
     ade:	01 90       	ld	r0, Z+
     ae0:	0d 92       	st	X+, r0
     ae2:	8a 95       	dec	r24
     ae4:	e1 f7       	brne	.-8      	; 0xade <_GLOBAL__sub_I_default_address+0x64>
     ae6:	23 e3       	ldi	r18, 0x33	; 51
     ae8:	38 e0       	ldi	r19, 0x08	; 8
     aea:	44 e3       	ldi	r20, 0x34	; 52
     aec:	53 e0       	ldi	r21, 0x03	; 3
     aee:	60 e4       	ldi	r22, 0x40	; 64
     af0:	87 e1       	ldi	r24, 0x17	; 23
     af2:	93 e0       	ldi	r25, 0x03	; 3
     af4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_2(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     af8:	8d b7       	in	r24, 0x3d	; 61
     afa:	9e b7       	in	r25, 0x3e	; 62
     afc:	0c 97       	sbiw	r24, 0x0c	; 12
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	9e bf       	out	0x3e, r25	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	8d bf       	out	0x3d, r24	; 61
     b08:	ad b7       	in	r26, 0x3d	; 61
     b0a:	be b7       	in	r27, 0x3e	; 62
     b0c:	11 96       	adiw	r26, 0x01	; 1
     b0e:	8c e0       	ldi	r24, 0x0C	; 12
     b10:	ef e5       	ldi	r30, 0x5F	; 95
     b12:	f3 e0       	ldi	r31, 0x03	; 3
     b14:	01 90       	ld	r0, Z+
     b16:	0d 92       	st	X+, r0
     b18:	8a 95       	dec	r24
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <_GLOBAL__sub_I_default_address+0x9a>
     b1c:	23 e3       	ldi	r18, 0x33	; 51
     b1e:	38 e0       	ldi	r19, 0x08	; 8
     b20:	44 e3       	ldi	r20, 0x34	; 52
     b22:	53 e0       	ldi	r21, 0x03	; 3
     b24:	61 e4       	ldi	r22, 0x41	; 65
     b26:	87 ef       	ldi	r24, 0xF7	; 247
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_3(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     b2e:	8d b7       	in	r24, 0x3d	; 61
     b30:	9e b7       	in	r25, 0x3e	; 62
     b32:	0c 97       	sbiw	r24, 0x0c	; 12
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	9e bf       	out	0x3e, r25	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	8d bf       	out	0x3d, r24	; 61
     b3e:	ad b7       	in	r26, 0x3d	; 61
     b40:	be b7       	in	r27, 0x3e	; 62
     b42:	11 96       	adiw	r26, 0x01	; 1
     b44:	8c e0       	ldi	r24, 0x0C	; 12
     b46:	ef e5       	ldi	r30, 0x5F	; 95
     b48:	f3 e0       	ldi	r31, 0x03	; 3
     b4a:	01 90       	ld	r0, Z+
     b4c:	0d 92       	st	X+, r0
     b4e:	8a 95       	dec	r24
     b50:	e1 f7       	brne	.-8      	; 0xb4a <_GLOBAL__sub_I_default_address+0xd0>
     b52:	23 e3       	ldi	r18, 0x33	; 51
     b54:	38 e0       	ldi	r19, 0x08	; 8
     b56:	44 e3       	ldi	r20, 0x34	; 52
     b58:	53 e0       	ldi	r21, 0x03	; 3
     b5a:	61 e4       	ldi	r22, 0x41	; 65
     b5c:	87 ed       	ldi	r24, 0xD7	; 215
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_4(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     b64:	8d b7       	in	r24, 0x3d	; 61
     b66:	9e b7       	in	r25, 0x3e	; 62
     b68:	84 96       	adiw	r24, 0x24	; 36
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	9e bf       	out	0x3e, r25	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	8d bf       	out	0x3d, r24	; 61
     b74:	0c 97       	sbiw	r24, 0x0c	; 12
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	9e bf       	out	0x3e, r25	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	8d bf       	out	0x3d, r24	; 61
     b80:	ad b7       	in	r26, 0x3d	; 61
     b82:	be b7       	in	r27, 0x3e	; 62
     b84:	11 96       	adiw	r26, 0x01	; 1
     b86:	8c e0       	ldi	r24, 0x0C	; 12
     b88:	ef e5       	ldi	r30, 0x5F	; 95
     b8a:	f3 e0       	ldi	r31, 0x03	; 3
     b8c:	01 90       	ld	r0, Z+
     b8e:	0d 92       	st	X+, r0
     b90:	8a 95       	dec	r24
     b92:	e1 f7       	brne	.-8      	; 0xb8c <_GLOBAL__sub_I_default_address+0x112>
     b94:	23 e3       	ldi	r18, 0x33	; 51
     b96:	38 e0       	ldi	r19, 0x08	; 8
     b98:	44 e3       	ldi	r20, 0x34	; 52
     b9a:	53 e0       	ldi	r21, 0x03	; 3
     b9c:	61 e4       	ldi	r22, 0x41	; 65
     b9e:	87 eb       	ldi	r24, 0xB7	; 183
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_5(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     ba6:	8d b7       	in	r24, 0x3d	; 61
     ba8:	9e b7       	in	r25, 0x3e	; 62
     baa:	0c 97       	sbiw	r24, 0x0c	; 12
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	9e bf       	out	0x3e, r25	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	8d bf       	out	0x3d, r24	; 61
     bb6:	ad b7       	in	r26, 0x3d	; 61
     bb8:	be b7       	in	r27, 0x3e	; 62
     bba:	11 96       	adiw	r26, 0x01	; 1
     bbc:	8c e0       	ldi	r24, 0x0C	; 12
     bbe:	ef e5       	ldi	r30, 0x5F	; 95
     bc0:	f3 e0       	ldi	r31, 0x03	; 3
     bc2:	01 90       	ld	r0, Z+
     bc4:	0d 92       	st	X+, r0
     bc6:	8a 95       	dec	r24
     bc8:	e1 f7       	brne	.-8      	; 0xbc2 <_GLOBAL__sub_I_default_address+0x148>
     bca:	23 e3       	ldi	r18, 0x33	; 51
     bcc:	38 e0       	ldi	r19, 0x08	; 8
     bce:	44 e3       	ldi	r20, 0x34	; 52
     bd0:	53 e0       	ldi	r21, 0x03	; 3
     bd2:	61 e4       	ldi	r22, 0x41	; 65
     bd4:	87 e9       	ldi	r24, 0x97	; 151
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_6(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     bdc:	8d b7       	in	r24, 0x3d	; 61
     bde:	9e b7       	in	r25, 0x3e	; 62
     be0:	0c 97       	sbiw	r24, 0x0c	; 12
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	9e bf       	out	0x3e, r25	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	8d bf       	out	0x3d, r24	; 61
     bec:	ad b7       	in	r26, 0x3d	; 61
     bee:	be b7       	in	r27, 0x3e	; 62
     bf0:	11 96       	adiw	r26, 0x01	; 1
     bf2:	8c e0       	ldi	r24, 0x0C	; 12
     bf4:	ef e5       	ldi	r30, 0x5F	; 95
     bf6:	f3 e0       	ldi	r31, 0x03	; 3
     bf8:	01 90       	ld	r0, Z+
     bfa:	0d 92       	st	X+, r0
     bfc:	8a 95       	dec	r24
     bfe:	e1 f7       	brne	.-8      	; 0xbf8 <_GLOBAL__sub_I_default_address+0x17e>
     c00:	23 e3       	ldi	r18, 0x33	; 51
     c02:	38 e0       	ldi	r19, 0x08	; 8
     c04:	44 e3       	ldi	r20, 0x34	; 52
     c06:	53 e0       	ldi	r21, 0x03	; 3
     c08:	61 e4       	ldi	r22, 0x41	; 65
     c0a:	87 e7       	ldi	r24, 0x77	; 119
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_7(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2);
     c12:	8d b7       	in	r24, 0x3d	; 61
     c14:	9e b7       	in	r25, 0x3e	; 62
     c16:	84 96       	adiw	r24, 0x24	; 36
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	9e bf       	out	0x3e, r25	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	8d bf       	out	0x3d, r24	; 61
     c22:	0c 97       	sbiw	r24, 0x0c	; 12
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	9e bf       	out	0x3e, r25	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	8d bf       	out	0x3d, r24	; 61
     c2e:	ad b7       	in	r26, 0x3d	; 61
     c30:	be b7       	in	r27, 0x3e	; 62
     c32:	11 96       	adiw	r26, 0x01	; 1
     c34:	8c e0       	ldi	r24, 0x0C	; 12
     c36:	ef e5       	ldi	r30, 0x5F	; 95
     c38:	f3 e0       	ldi	r31, 0x03	; 3
     c3a:	01 90       	ld	r0, Z+
     c3c:	0d 92       	st	X+, r0
     c3e:	8a 95       	dec	r24
     c40:	e1 f7       	brne	.-8      	; 0xc3a <_GLOBAL__sub_I_default_address+0x1c0>
     c42:	23 e3       	ldi	r18, 0x33	; 51
     c44:	38 e0       	ldi	r19, 0x08	; 8
     c46:	44 e3       	ldi	r20, 0x34	; 52
     c48:	53 e0       	ldi	r21, 0x03	; 3
     c4a:	61 e4       	ldi	r22, 0x41	; 65
     c4c:	87 e5       	ldi	r24, 0x57	; 87
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>


class  mosfet{
public:
	mosfet() = delete;
	mosfet(uint8_t MOSpin) : MOSpin_(MOSpin){ }
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <p1>
     c5a:	85 e0       	ldi	r24, 0x05	; 5
     c5c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <p2>
     c60:	86 e0       	ldi	r24, 0x06	; 6
     c62:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <p3>
     c66:	8a e0       	ldi	r24, 0x0A	; 10
     c68:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <p4>
     c6c:	8f e0       	ldi	r24, 0x0F	; 15
     c6e:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <p5>
     c72:	80 e1       	ldi	r24, 0x10	; 16
     c74:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <p6>
     c78:	81 e1       	ldi	r24, 0x11	; 17
     c7a:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <__data_end>
			}
		}		
		
		timeStamps[0] = millis();
	}
}
     c7e:	8d b7       	in	r24, 0x3d	; 61
     c80:	9e b7       	in	r25, 0x3e	; 62
     c82:	0c 96       	adiw	r24, 0x0c	; 12
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	9e bf       	out	0x3e, r25	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	8d bf       	out	0x3d, r24	; 61
     c8e:	08 95       	ret

00000c90 <__subsf3>:
     c90:	50 58       	subi	r21, 0x80	; 128

00000c92 <__addsf3>:
     c92:	bb 27       	eor	r27, r27
     c94:	aa 27       	eor	r26, r26
     c96:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__addsf3x>
     c9a:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_round>
     c9e:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_pscA>
     ca2:	38 f0       	brcs	.+14     	; 0xcb2 <__addsf3+0x20>
     ca4:	0e 94 aa 07 	call	0xf54	; 0xf54 <__fp_pscB>
     ca8:	20 f0       	brcs	.+8      	; 0xcb2 <__addsf3+0x20>
     caa:	39 f4       	brne	.+14     	; 0xcba <__addsf3+0x28>
     cac:	9f 3f       	cpi	r25, 0xFF	; 255
     cae:	19 f4       	brne	.+6      	; 0xcb6 <__addsf3+0x24>
     cb0:	26 f4       	brtc	.+8      	; 0xcba <__addsf3+0x28>
     cb2:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_nan>
     cb6:	0e f4       	brtc	.+2      	; 0xcba <__addsf3+0x28>
     cb8:	e0 95       	com	r30
     cba:	e7 fb       	bst	r30, 7
     cbc:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>

00000cc0 <__addsf3x>:
     cc0:	e9 2f       	mov	r30, r25
     cc2:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_split3>
     cc6:	58 f3       	brcs	.-42     	; 0xc9e <__addsf3+0xc>
     cc8:	ba 17       	cp	r27, r26
     cca:	62 07       	cpc	r22, r18
     ccc:	73 07       	cpc	r23, r19
     cce:	84 07       	cpc	r24, r20
     cd0:	95 07       	cpc	r25, r21
     cd2:	20 f0       	brcs	.+8      	; 0xcdc <__addsf3x+0x1c>
     cd4:	79 f4       	brne	.+30     	; 0xcf4 <__addsf3x+0x34>
     cd6:	a6 f5       	brtc	.+104    	; 0xd40 <__addsf3x+0x80>
     cd8:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_zero>
     cdc:	0e f4       	brtc	.+2      	; 0xce0 <__addsf3x+0x20>
     cde:	e0 95       	com	r30
     ce0:	0b 2e       	mov	r0, r27
     ce2:	ba 2f       	mov	r27, r26
     ce4:	a0 2d       	mov	r26, r0
     ce6:	0b 01       	movw	r0, r22
     ce8:	b9 01       	movw	r22, r18
     cea:	90 01       	movw	r18, r0
     cec:	0c 01       	movw	r0, r24
     cee:	ca 01       	movw	r24, r20
     cf0:	a0 01       	movw	r20, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	ff 27       	eor	r31, r31
     cf6:	59 1b       	sub	r21, r25
     cf8:	99 f0       	breq	.+38     	; 0xd20 <__addsf3x+0x60>
     cfa:	59 3f       	cpi	r21, 0xF9	; 249
     cfc:	50 f4       	brcc	.+20     	; 0xd12 <__addsf3x+0x52>
     cfe:	50 3e       	cpi	r21, 0xE0	; 224
     d00:	68 f1       	brcs	.+90     	; 0xd5c <__addsf3x+0x9c>
     d02:	1a 16       	cp	r1, r26
     d04:	f0 40       	sbci	r31, 0x00	; 0
     d06:	a2 2f       	mov	r26, r18
     d08:	23 2f       	mov	r18, r19
     d0a:	34 2f       	mov	r19, r20
     d0c:	44 27       	eor	r20, r20
     d0e:	58 5f       	subi	r21, 0xF8	; 248
     d10:	f3 cf       	rjmp	.-26     	; 0xcf8 <__addsf3x+0x38>
     d12:	46 95       	lsr	r20
     d14:	37 95       	ror	r19
     d16:	27 95       	ror	r18
     d18:	a7 95       	ror	r26
     d1a:	f0 40       	sbci	r31, 0x00	; 0
     d1c:	53 95       	inc	r21
     d1e:	c9 f7       	brne	.-14     	; 0xd12 <__addsf3x+0x52>
     d20:	7e f4       	brtc	.+30     	; 0xd40 <__addsf3x+0x80>
     d22:	1f 16       	cp	r1, r31
     d24:	ba 0b       	sbc	r27, r26
     d26:	62 0b       	sbc	r22, r18
     d28:	73 0b       	sbc	r23, r19
     d2a:	84 0b       	sbc	r24, r20
     d2c:	ba f0       	brmi	.+46     	; 0xd5c <__addsf3x+0x9c>
     d2e:	91 50       	subi	r25, 0x01	; 1
     d30:	a1 f0       	breq	.+40     	; 0xd5a <__addsf3x+0x9a>
     d32:	ff 0f       	add	r31, r31
     d34:	bb 1f       	adc	r27, r27
     d36:	66 1f       	adc	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	88 1f       	adc	r24, r24
     d3c:	c2 f7       	brpl	.-16     	; 0xd2e <__addsf3x+0x6e>
     d3e:	0e c0       	rjmp	.+28     	; 0xd5c <__addsf3x+0x9c>
     d40:	ba 0f       	add	r27, r26
     d42:	62 1f       	adc	r22, r18
     d44:	73 1f       	adc	r23, r19
     d46:	84 1f       	adc	r24, r20
     d48:	48 f4       	brcc	.+18     	; 0xd5c <__addsf3x+0x9c>
     d4a:	87 95       	ror	r24
     d4c:	77 95       	ror	r23
     d4e:	67 95       	ror	r22
     d50:	b7 95       	ror	r27
     d52:	f7 95       	ror	r31
     d54:	9e 3f       	cpi	r25, 0xFE	; 254
     d56:	08 f0       	brcs	.+2      	; 0xd5a <__addsf3x+0x9a>
     d58:	b0 cf       	rjmp	.-160    	; 0xcba <__addsf3+0x28>
     d5a:	93 95       	inc	r25
     d5c:	88 0f       	add	r24, r24
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <__addsf3x+0xa2>
     d60:	99 27       	eor	r25, r25
     d62:	ee 0f       	add	r30, r30
     d64:	97 95       	ror	r25
     d66:	87 95       	ror	r24
     d68:	08 95       	ret

00000d6a <__divsf3>:
     d6a:	0e 94 c9 06 	call	0xd92	; 0xd92 <__divsf3x>
     d6e:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_round>
     d72:	0e 94 aa 07 	call	0xf54	; 0xf54 <__fp_pscB>
     d76:	58 f0       	brcs	.+22     	; 0xd8e <__divsf3+0x24>
     d78:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_pscA>
     d7c:	40 f0       	brcs	.+16     	; 0xd8e <__divsf3+0x24>
     d7e:	29 f4       	brne	.+10     	; 0xd8a <__divsf3+0x20>
     d80:	5f 3f       	cpi	r21, 0xFF	; 255
     d82:	29 f0       	breq	.+10     	; 0xd8e <__divsf3+0x24>
     d84:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
     d88:	51 11       	cpse	r21, r1
     d8a:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>
     d8e:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_nan>

00000d92 <__divsf3x>:
     d92:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_split3>
     d96:	68 f3       	brcs	.-38     	; 0xd72 <__divsf3+0x8>

00000d98 <__divsf3_pse>:
     d98:	99 23       	and	r25, r25
     d9a:	b1 f3       	breq	.-20     	; 0xd88 <__divsf3+0x1e>
     d9c:	55 23       	and	r21, r21
     d9e:	91 f3       	breq	.-28     	; 0xd84 <__divsf3+0x1a>
     da0:	95 1b       	sub	r25, r21
     da2:	55 0b       	sbc	r21, r21
     da4:	bb 27       	eor	r27, r27
     da6:	aa 27       	eor	r26, r26
     da8:	62 17       	cp	r22, r18
     daa:	73 07       	cpc	r23, r19
     dac:	84 07       	cpc	r24, r20
     dae:	38 f0       	brcs	.+14     	; 0xdbe <__divsf3_pse+0x26>
     db0:	9f 5f       	subi	r25, 0xFF	; 255
     db2:	5f 4f       	sbci	r21, 0xFF	; 255
     db4:	22 0f       	add	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	44 1f       	adc	r20, r20
     dba:	aa 1f       	adc	r26, r26
     dbc:	a9 f3       	breq	.-22     	; 0xda8 <__divsf3_pse+0x10>
     dbe:	35 d0       	rcall	.+106    	; 0xe2a <__divsf3_pse+0x92>
     dc0:	0e 2e       	mov	r0, r30
     dc2:	3a f0       	brmi	.+14     	; 0xdd2 <__divsf3_pse+0x3a>
     dc4:	e0 e8       	ldi	r30, 0x80	; 128
     dc6:	32 d0       	rcall	.+100    	; 0xe2c <__divsf3_pse+0x94>
     dc8:	91 50       	subi	r25, 0x01	; 1
     dca:	50 40       	sbci	r21, 0x00	; 0
     dcc:	e6 95       	lsr	r30
     dce:	00 1c       	adc	r0, r0
     dd0:	ca f7       	brpl	.-14     	; 0xdc4 <__divsf3_pse+0x2c>
     dd2:	2b d0       	rcall	.+86     	; 0xe2a <__divsf3_pse+0x92>
     dd4:	fe 2f       	mov	r31, r30
     dd6:	29 d0       	rcall	.+82     	; 0xe2a <__divsf3_pse+0x92>
     dd8:	66 0f       	add	r22, r22
     dda:	77 1f       	adc	r23, r23
     ddc:	88 1f       	adc	r24, r24
     dde:	bb 1f       	adc	r27, r27
     de0:	26 17       	cp	r18, r22
     de2:	37 07       	cpc	r19, r23
     de4:	48 07       	cpc	r20, r24
     de6:	ab 07       	cpc	r26, r27
     de8:	b0 e8       	ldi	r27, 0x80	; 128
     dea:	09 f0       	breq	.+2      	; 0xdee <__divsf3_pse+0x56>
     dec:	bb 0b       	sbc	r27, r27
     dee:	80 2d       	mov	r24, r0
     df0:	bf 01       	movw	r22, r30
     df2:	ff 27       	eor	r31, r31
     df4:	93 58       	subi	r25, 0x83	; 131
     df6:	5f 4f       	sbci	r21, 0xFF	; 255
     df8:	3a f0       	brmi	.+14     	; 0xe08 <__divsf3_pse+0x70>
     dfa:	9e 3f       	cpi	r25, 0xFE	; 254
     dfc:	51 05       	cpc	r21, r1
     dfe:	78 f0       	brcs	.+30     	; 0xe1e <__divsf3_pse+0x86>
     e00:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
     e04:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>
     e08:	5f 3f       	cpi	r21, 0xFF	; 255
     e0a:	e4 f3       	brlt	.-8      	; 0xe04 <__divsf3_pse+0x6c>
     e0c:	98 3e       	cpi	r25, 0xE8	; 232
     e0e:	d4 f3       	brlt	.-12     	; 0xe04 <__divsf3_pse+0x6c>
     e10:	86 95       	lsr	r24
     e12:	77 95       	ror	r23
     e14:	67 95       	ror	r22
     e16:	b7 95       	ror	r27
     e18:	f7 95       	ror	r31
     e1a:	9f 5f       	subi	r25, 0xFF	; 255
     e1c:	c9 f7       	brne	.-14     	; 0xe10 <__divsf3_pse+0x78>
     e1e:	88 0f       	add	r24, r24
     e20:	91 1d       	adc	r25, r1
     e22:	96 95       	lsr	r25
     e24:	87 95       	ror	r24
     e26:	97 f9       	bld	r25, 7
     e28:	08 95       	ret
     e2a:	e1 e0       	ldi	r30, 0x01	; 1
     e2c:	66 0f       	add	r22, r22
     e2e:	77 1f       	adc	r23, r23
     e30:	88 1f       	adc	r24, r24
     e32:	bb 1f       	adc	r27, r27
     e34:	62 17       	cp	r22, r18
     e36:	73 07       	cpc	r23, r19
     e38:	84 07       	cpc	r24, r20
     e3a:	ba 07       	cpc	r27, r26
     e3c:	20 f0       	brcs	.+8      	; 0xe46 <__divsf3_pse+0xae>
     e3e:	62 1b       	sub	r22, r18
     e40:	73 0b       	sbc	r23, r19
     e42:	84 0b       	sbc	r24, r20
     e44:	ba 0b       	sbc	r27, r26
     e46:	ee 1f       	adc	r30, r30
     e48:	88 f7       	brcc	.-30     	; 0xe2c <__divsf3_pse+0x94>
     e4a:	e0 95       	com	r30
     e4c:	08 95       	ret

00000e4e <__fixsfsi>:
     e4e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__fixunssfsi>
     e52:	68 94       	set
     e54:	b1 11       	cpse	r27, r1
     e56:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>
     e5a:	08 95       	ret

00000e5c <__fixunssfsi>:
     e5c:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_splitA>
     e60:	88 f0       	brcs	.+34     	; 0xe84 <__fixunssfsi+0x28>
     e62:	9f 57       	subi	r25, 0x7F	; 127
     e64:	98 f0       	brcs	.+38     	; 0xe8c <__fixunssfsi+0x30>
     e66:	b9 2f       	mov	r27, r25
     e68:	99 27       	eor	r25, r25
     e6a:	b7 51       	subi	r27, 0x17	; 23
     e6c:	b0 f0       	brcs	.+44     	; 0xe9a <__fixunssfsi+0x3e>
     e6e:	e1 f0       	breq	.+56     	; 0xea8 <__fixunssfsi+0x4c>
     e70:	66 0f       	add	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	88 1f       	adc	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	1a f0       	brmi	.+6      	; 0xe80 <__fixunssfsi+0x24>
     e7a:	ba 95       	dec	r27
     e7c:	c9 f7       	brne	.-14     	; 0xe70 <__fixunssfsi+0x14>
     e7e:	14 c0       	rjmp	.+40     	; 0xea8 <__fixunssfsi+0x4c>
     e80:	b1 30       	cpi	r27, 0x01	; 1
     e82:	91 f0       	breq	.+36     	; 0xea8 <__fixunssfsi+0x4c>
     e84:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__fp_zero>
     e88:	b1 e0       	ldi	r27, 0x01	; 1
     e8a:	08 95       	ret
     e8c:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__fp_zero>
     e90:	67 2f       	mov	r22, r23
     e92:	78 2f       	mov	r23, r24
     e94:	88 27       	eor	r24, r24
     e96:	b8 5f       	subi	r27, 0xF8	; 248
     e98:	39 f0       	breq	.+14     	; 0xea8 <__fixunssfsi+0x4c>
     e9a:	b9 3f       	cpi	r27, 0xF9	; 249
     e9c:	cc f3       	brlt	.-14     	; 0xe90 <__fixunssfsi+0x34>
     e9e:	86 95       	lsr	r24
     ea0:	77 95       	ror	r23
     ea2:	67 95       	ror	r22
     ea4:	b3 95       	inc	r27
     ea6:	d9 f7       	brne	.-10     	; 0xe9e <__fixunssfsi+0x42>
     ea8:	3e f4       	brtc	.+14     	; 0xeb8 <__fixunssfsi+0x5c>
     eaa:	90 95       	com	r25
     eac:	80 95       	com	r24
     eae:	70 95       	com	r23
     eb0:	61 95       	neg	r22
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	8f 4f       	sbci	r24, 0xFF	; 255
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	08 95       	ret

00000eba <__floatunsisf>:
     eba:	e8 94       	clt
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <__floatsisf+0x12>

00000ebe <__floatsisf>:
     ebe:	97 fb       	bst	r25, 7
     ec0:	3e f4       	brtc	.+14     	; 0xed0 <__floatsisf+0x12>
     ec2:	90 95       	com	r25
     ec4:	80 95       	com	r24
     ec6:	70 95       	com	r23
     ec8:	61 95       	neg	r22
     eca:	7f 4f       	sbci	r23, 0xFF	; 255
     ecc:	8f 4f       	sbci	r24, 0xFF	; 255
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	99 23       	and	r25, r25
     ed2:	a9 f0       	breq	.+42     	; 0xefe <__floatsisf+0x40>
     ed4:	f9 2f       	mov	r31, r25
     ed6:	96 e9       	ldi	r25, 0x96	; 150
     ed8:	bb 27       	eor	r27, r27
     eda:	93 95       	inc	r25
     edc:	f6 95       	lsr	r31
     ede:	87 95       	ror	r24
     ee0:	77 95       	ror	r23
     ee2:	67 95       	ror	r22
     ee4:	b7 95       	ror	r27
     ee6:	f1 11       	cpse	r31, r1
     ee8:	f8 cf       	rjmp	.-16     	; 0xeda <__floatsisf+0x1c>
     eea:	fa f4       	brpl	.+62     	; 0xf2a <__floatsisf+0x6c>
     eec:	bb 0f       	add	r27, r27
     eee:	11 f4       	brne	.+4      	; 0xef4 <__floatsisf+0x36>
     ef0:	60 ff       	sbrs	r22, 0
     ef2:	1b c0       	rjmp	.+54     	; 0xf2a <__floatsisf+0x6c>
     ef4:	6f 5f       	subi	r22, 0xFF	; 255
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	16 c0       	rjmp	.+44     	; 0xf2a <__floatsisf+0x6c>
     efe:	88 23       	and	r24, r24
     f00:	11 f0       	breq	.+4      	; 0xf06 <__floatsisf+0x48>
     f02:	96 e9       	ldi	r25, 0x96	; 150
     f04:	11 c0       	rjmp	.+34     	; 0xf28 <__floatsisf+0x6a>
     f06:	77 23       	and	r23, r23
     f08:	21 f0       	breq	.+8      	; 0xf12 <__floatsisf+0x54>
     f0a:	9e e8       	ldi	r25, 0x8E	; 142
     f0c:	87 2f       	mov	r24, r23
     f0e:	76 2f       	mov	r23, r22
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <__floatsisf+0x5e>
     f12:	66 23       	and	r22, r22
     f14:	71 f0       	breq	.+28     	; 0xf32 <__floatsisf+0x74>
     f16:	96 e8       	ldi	r25, 0x86	; 134
     f18:	86 2f       	mov	r24, r22
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	2a f0       	brmi	.+10     	; 0xf2a <__floatsisf+0x6c>
     f20:	9a 95       	dec	r25
     f22:	66 0f       	add	r22, r22
     f24:	77 1f       	adc	r23, r23
     f26:	88 1f       	adc	r24, r24
     f28:	da f7       	brpl	.-10     	; 0xf20 <__floatsisf+0x62>
     f2a:	88 0f       	add	r24, r24
     f2c:	96 95       	lsr	r25
     f2e:	87 95       	ror	r24
     f30:	97 f9       	bld	r25, 7
     f32:	08 95       	ret

00000f34 <__fp_inf>:
     f34:	97 f9       	bld	r25, 7
     f36:	9f 67       	ori	r25, 0x7F	; 127
     f38:	80 e8       	ldi	r24, 0x80	; 128
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	08 95       	ret

00000f40 <__fp_nan>:
     f40:	9f ef       	ldi	r25, 0xFF	; 255
     f42:	80 ec       	ldi	r24, 0xC0	; 192
     f44:	08 95       	ret

00000f46 <__fp_pscA>:
     f46:	00 24       	eor	r0, r0
     f48:	0a 94       	dec	r0
     f4a:	16 16       	cp	r1, r22
     f4c:	17 06       	cpc	r1, r23
     f4e:	18 06       	cpc	r1, r24
     f50:	09 06       	cpc	r0, r25
     f52:	08 95       	ret

00000f54 <__fp_pscB>:
     f54:	00 24       	eor	r0, r0
     f56:	0a 94       	dec	r0
     f58:	12 16       	cp	r1, r18
     f5a:	13 06       	cpc	r1, r19
     f5c:	14 06       	cpc	r1, r20
     f5e:	05 06       	cpc	r0, r21
     f60:	08 95       	ret

00000f62 <__fp_round>:
     f62:	09 2e       	mov	r0, r25
     f64:	03 94       	inc	r0
     f66:	00 0c       	add	r0, r0
     f68:	11 f4       	brne	.+4      	; 0xf6e <__fp_round+0xc>
     f6a:	88 23       	and	r24, r24
     f6c:	52 f0       	brmi	.+20     	; 0xf82 <__fp_round+0x20>
     f6e:	bb 0f       	add	r27, r27
     f70:	40 f4       	brcc	.+16     	; 0xf82 <__fp_round+0x20>
     f72:	bf 2b       	or	r27, r31
     f74:	11 f4       	brne	.+4      	; 0xf7a <__fp_round+0x18>
     f76:	60 ff       	sbrs	r22, 0
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <__fp_round+0x20>
     f7a:	6f 5f       	subi	r22, 0xFF	; 255
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8f 4f       	sbci	r24, 0xFF	; 255
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	08 95       	ret

00000f84 <__fp_split3>:
     f84:	57 fd       	sbrc	r21, 7
     f86:	90 58       	subi	r25, 0x80	; 128
     f88:	44 0f       	add	r20, r20
     f8a:	55 1f       	adc	r21, r21
     f8c:	59 f0       	breq	.+22     	; 0xfa4 <__fp_splitA+0x10>
     f8e:	5f 3f       	cpi	r21, 0xFF	; 255
     f90:	71 f0       	breq	.+28     	; 0xfae <__fp_splitA+0x1a>
     f92:	47 95       	ror	r20

00000f94 <__fp_splitA>:
     f94:	88 0f       	add	r24, r24
     f96:	97 fb       	bst	r25, 7
     f98:	99 1f       	adc	r25, r25
     f9a:	61 f0       	breq	.+24     	; 0xfb4 <__fp_splitA+0x20>
     f9c:	9f 3f       	cpi	r25, 0xFF	; 255
     f9e:	79 f0       	breq	.+30     	; 0xfbe <__fp_splitA+0x2a>
     fa0:	87 95       	ror	r24
     fa2:	08 95       	ret
     fa4:	12 16       	cp	r1, r18
     fa6:	13 06       	cpc	r1, r19
     fa8:	14 06       	cpc	r1, r20
     faa:	55 1f       	adc	r21, r21
     fac:	f2 cf       	rjmp	.-28     	; 0xf92 <__fp_split3+0xe>
     fae:	46 95       	lsr	r20
     fb0:	f1 df       	rcall	.-30     	; 0xf94 <__fp_splitA>
     fb2:	08 c0       	rjmp	.+16     	; 0xfc4 <__fp_splitA+0x30>
     fb4:	16 16       	cp	r1, r22
     fb6:	17 06       	cpc	r1, r23
     fb8:	18 06       	cpc	r1, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	f1 cf       	rjmp	.-30     	; 0xfa0 <__fp_splitA+0xc>
     fbe:	86 95       	lsr	r24
     fc0:	71 05       	cpc	r23, r1
     fc2:	61 05       	cpc	r22, r1
     fc4:	08 94       	sec
     fc6:	08 95       	ret

00000fc8 <__fp_zero>:
     fc8:	e8 94       	clt

00000fca <__fp_szero>:
     fca:	bb 27       	eor	r27, r27
     fcc:	66 27       	eor	r22, r22
     fce:	77 27       	eor	r23, r23
     fd0:	cb 01       	movw	r24, r22
     fd2:	97 f9       	bld	r25, 7
     fd4:	08 95       	ret

00000fd6 <__gesf2>:
     fd6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_cmp>
     fda:	08 f4       	brcc	.+2      	; 0xfde <__gesf2+0x8>
     fdc:	8f ef       	ldi	r24, 0xFF	; 255
     fde:	08 95       	ret

00000fe0 <__mulsf3>:
     fe0:	0e 94 03 08 	call	0x1006	; 0x1006 <__mulsf3x>
     fe4:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__fp_round>
     fe8:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fp_pscA>
     fec:	38 f0       	brcs	.+14     	; 0xffc <__mulsf3+0x1c>
     fee:	0e 94 aa 07 	call	0xf54	; 0xf54 <__fp_pscB>
     ff2:	20 f0       	brcs	.+8      	; 0xffc <__mulsf3+0x1c>
     ff4:	95 23       	and	r25, r21
     ff6:	11 f0       	breq	.+4      	; 0xffc <__mulsf3+0x1c>
     ff8:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
     ffc:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_nan>
    1000:	11 24       	eor	r1, r1
    1002:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>

00001006 <__mulsf3x>:
    1006:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_split3>
    100a:	70 f3       	brcs	.-36     	; 0xfe8 <__mulsf3+0x8>

0000100c <__mulsf3_pse>:
    100c:	95 9f       	mul	r25, r21
    100e:	c1 f3       	breq	.-16     	; 0x1000 <__mulsf3+0x20>
    1010:	95 0f       	add	r25, r21
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	55 1f       	adc	r21, r21
    1016:	62 9f       	mul	r22, r18
    1018:	f0 01       	movw	r30, r0
    101a:	72 9f       	mul	r23, r18
    101c:	bb 27       	eor	r27, r27
    101e:	f0 0d       	add	r31, r0
    1020:	b1 1d       	adc	r27, r1
    1022:	63 9f       	mul	r22, r19
    1024:	aa 27       	eor	r26, r26
    1026:	f0 0d       	add	r31, r0
    1028:	b1 1d       	adc	r27, r1
    102a:	aa 1f       	adc	r26, r26
    102c:	64 9f       	mul	r22, r20
    102e:	66 27       	eor	r22, r22
    1030:	b0 0d       	add	r27, r0
    1032:	a1 1d       	adc	r26, r1
    1034:	66 1f       	adc	r22, r22
    1036:	82 9f       	mul	r24, r18
    1038:	22 27       	eor	r18, r18
    103a:	b0 0d       	add	r27, r0
    103c:	a1 1d       	adc	r26, r1
    103e:	62 1f       	adc	r22, r18
    1040:	73 9f       	mul	r23, r19
    1042:	b0 0d       	add	r27, r0
    1044:	a1 1d       	adc	r26, r1
    1046:	62 1f       	adc	r22, r18
    1048:	83 9f       	mul	r24, r19
    104a:	a0 0d       	add	r26, r0
    104c:	61 1d       	adc	r22, r1
    104e:	22 1f       	adc	r18, r18
    1050:	74 9f       	mul	r23, r20
    1052:	33 27       	eor	r19, r19
    1054:	a0 0d       	add	r26, r0
    1056:	61 1d       	adc	r22, r1
    1058:	23 1f       	adc	r18, r19
    105a:	84 9f       	mul	r24, r20
    105c:	60 0d       	add	r22, r0
    105e:	21 1d       	adc	r18, r1
    1060:	82 2f       	mov	r24, r18
    1062:	76 2f       	mov	r23, r22
    1064:	6a 2f       	mov	r22, r26
    1066:	11 24       	eor	r1, r1
    1068:	9f 57       	subi	r25, 0x7F	; 127
    106a:	50 40       	sbci	r21, 0x00	; 0
    106c:	9a f0       	brmi	.+38     	; 0x1094 <__mulsf3_pse+0x88>
    106e:	f1 f0       	breq	.+60     	; 0x10ac <__mulsf3_pse+0xa0>
    1070:	88 23       	and	r24, r24
    1072:	4a f0       	brmi	.+18     	; 0x1086 <__mulsf3_pse+0x7a>
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	bb 1f       	adc	r27, r27
    107a:	66 1f       	adc	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	88 1f       	adc	r24, r24
    1080:	91 50       	subi	r25, 0x01	; 1
    1082:	50 40       	sbci	r21, 0x00	; 0
    1084:	a9 f7       	brne	.-22     	; 0x1070 <__mulsf3_pse+0x64>
    1086:	9e 3f       	cpi	r25, 0xFE	; 254
    1088:	51 05       	cpc	r21, r1
    108a:	80 f0       	brcs	.+32     	; 0x10ac <__mulsf3_pse+0xa0>
    108c:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_inf>
    1090:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_szero>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	e4 f3       	brlt	.-8      	; 0x1090 <__mulsf3_pse+0x84>
    1098:	98 3e       	cpi	r25, 0xE8	; 232
    109a:	d4 f3       	brlt	.-12     	; 0x1090 <__mulsf3_pse+0x84>
    109c:	86 95       	lsr	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b7 95       	ror	r27
    10a4:	f7 95       	ror	r31
    10a6:	e7 95       	ror	r30
    10a8:	9f 5f       	subi	r25, 0xFF	; 255
    10aa:	c1 f7       	brne	.-16     	; 0x109c <__mulsf3_pse+0x90>
    10ac:	fe 2b       	or	r31, r30
    10ae:	88 0f       	add	r24, r24
    10b0:	91 1d       	adc	r25, r1
    10b2:	96 95       	lsr	r25
    10b4:	87 95       	ror	r24
    10b6:	97 f9       	bld	r25, 7
    10b8:	08 95       	ret

000010ba <__fp_cmp>:
    10ba:	99 0f       	add	r25, r25
    10bc:	00 08       	sbc	r0, r0
    10be:	55 0f       	add	r21, r21
    10c0:	aa 0b       	sbc	r26, r26
    10c2:	e0 e8       	ldi	r30, 0x80	; 128
    10c4:	fe ef       	ldi	r31, 0xFE	; 254
    10c6:	16 16       	cp	r1, r22
    10c8:	17 06       	cpc	r1, r23
    10ca:	e8 07       	cpc	r30, r24
    10cc:	f9 07       	cpc	r31, r25
    10ce:	c0 f0       	brcs	.+48     	; 0x1100 <__fp_cmp+0x46>
    10d0:	12 16       	cp	r1, r18
    10d2:	13 06       	cpc	r1, r19
    10d4:	e4 07       	cpc	r30, r20
    10d6:	f5 07       	cpc	r31, r21
    10d8:	98 f0       	brcs	.+38     	; 0x1100 <__fp_cmp+0x46>
    10da:	62 1b       	sub	r22, r18
    10dc:	73 0b       	sbc	r23, r19
    10de:	84 0b       	sbc	r24, r20
    10e0:	95 0b       	sbc	r25, r21
    10e2:	39 f4       	brne	.+14     	; 0x10f2 <__fp_cmp+0x38>
    10e4:	0a 26       	eor	r0, r26
    10e6:	61 f0       	breq	.+24     	; 0x1100 <__fp_cmp+0x46>
    10e8:	23 2b       	or	r18, r19
    10ea:	24 2b       	or	r18, r20
    10ec:	25 2b       	or	r18, r21
    10ee:	21 f4       	brne	.+8      	; 0x10f8 <__fp_cmp+0x3e>
    10f0:	08 95       	ret
    10f2:	0a 26       	eor	r0, r26
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <__fp_cmp+0x3e>
    10f6:	a1 40       	sbci	r26, 0x01	; 1
    10f8:	a6 95       	lsr	r26
    10fa:	8f ef       	ldi	r24, 0xFF	; 255
    10fc:	81 1d       	adc	r24, r1
    10fe:	81 1d       	adc	r24, r1
    1100:	08 95       	ret

00001102 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1102:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1104:	91 8d       	ldd	r25, Z+25	; 0x19
    1106:	22 8d       	ldd	r18, Z+26	; 0x1a
    1108:	89 2f       	mov	r24, r25
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	80 5c       	subi	r24, 0xC0	; 192
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	82 1b       	sub	r24, r18
    1112:	91 09       	sbc	r25, r1
}
    1114:	8f 73       	andi	r24, 0x3F	; 63
    1116:	99 27       	eor	r25, r25
    1118:	08 95       	ret

0000111a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    111a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    111c:	91 8d       	ldd	r25, Z+25	; 0x19
    111e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1120:	98 17       	cp	r25, r24
    1122:	31 f0       	breq	.+12     	; 0x1130 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1124:	82 8d       	ldd	r24, Z+26	; 0x1a
    1126:	e8 0f       	add	r30, r24
    1128:	f1 1d       	adc	r31, r1
    112a:	85 8d       	ldd	r24, Z+29	; 0x1d
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1134:	08 95       	ret

00001136 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1136:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1138:	91 8d       	ldd	r25, Z+25	; 0x19
    113a:	82 8d       	ldd	r24, Z+26	; 0x1a
    113c:	98 17       	cp	r25, r24
    113e:	61 f0       	breq	.+24     	; 0x1158 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1140:	82 8d       	ldd	r24, Z+26	; 0x1a
    1142:	df 01       	movw	r26, r30
    1144:	a8 0f       	add	r26, r24
    1146:	b1 1d       	adc	r27, r1
    1148:	5d 96       	adiw	r26, 0x1d	; 29
    114a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    114c:	92 8d       	ldd	r25, Z+26	; 0x1a
    114e:	9f 5f       	subi	r25, 0xFF	; 255
    1150:	9f 73       	andi	r25, 0x3F	; 63
    1152:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    115c:	08 95       	ret

0000115e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    115e:	fc 01       	movw	r30, r24
    1160:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1162:	44 8d       	ldd	r20, Z+28	; 0x1c
    1164:	25 2f       	mov	r18, r21
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	84 2f       	mov	r24, r20
    116a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    116c:	82 1b       	sub	r24, r18
    116e:	93 0b       	sbc	r25, r19
    1170:	54 17       	cp	r21, r20
    1172:	10 f0       	brcs	.+4      	; 0x1178 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1174:	cf 96       	adiw	r24, 0x3f	; 63
    1176:	08 95       	ret
  return tail - head - 1;
    1178:	01 97       	sbiw	r24, 0x01	; 1
}
    117a:	08 95       	ret

0000117c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    117c:	8d e1       	ldi	r24, 0x1D	; 29
    117e:	9a e0       	ldi	r25, 0x0A	; 10
    1180:	89 2b       	or	r24, r25
    1182:	49 f0       	breq	.+18     	; 0x1196 <_Z14serialEventRunv+0x1a>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	89 2b       	or	r24, r25
    118a:	29 f0       	breq	.+10     	; 0x1196 <_Z14serialEventRunv+0x1a>
    118c:	0e 94 1d 0a 	call	0x143a	; 0x143a <_Z17Serial0_availablev>
    1190:	81 11       	cpse	r24, r1
    1192:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1196:	08 95       	ret

00001198 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1198:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    119a:	84 8d       	ldd	r24, Z+28	; 0x1c
    119c:	df 01       	movw	r26, r30
    119e:	a8 0f       	add	r26, r24
    11a0:	b1 1d       	adc	r27, r1
    11a2:	a3 5a       	subi	r26, 0xA3	; 163
    11a4:	bf 4f       	sbci	r27, 0xFF	; 255
    11a6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    11a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	8f 73       	andi	r24, 0x3F	; 63
    11b0:	99 27       	eor	r25, r25
    11b2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    11b4:	a6 89       	ldd	r26, Z+22	; 0x16
    11b6:	b7 89       	ldd	r27, Z+23	; 0x17
    11b8:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    11ba:	a0 89       	ldd	r26, Z+16	; 0x10
    11bc:	b1 89       	ldd	r27, Z+17	; 0x11
    11be:	8c 91       	ld	r24, X
    11c0:	83 70       	andi	r24, 0x03	; 3
    11c2:	80 64       	ori	r24, 0x40	; 64
    11c4:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    11c6:	93 8d       	ldd	r25, Z+27	; 0x1b
    11c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    11ca:	98 13       	cpse	r25, r24
    11cc:	06 c0       	rjmp	.+12     	; 0x11da <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    11ce:	02 88       	ldd	r0, Z+18	; 0x12
    11d0:	f3 89       	ldd	r31, Z+19	; 0x13
    11d2:	e0 2d       	mov	r30, r0
    11d4:	80 81       	ld	r24, Z
    11d6:	8f 7d       	andi	r24, 0xDF	; 223
    11d8:	80 83       	st	Z, r24
    11da:	08 95       	ret

000011dc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	ec 01       	movw	r28, r24
  _written = true;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    11ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11f2:	98 13       	cpse	r25, r24
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <_ZN14HardwareSerial5writeEh+0x24>
    11f6:	e8 89       	ldd	r30, Y+16	; 0x10
    11f8:	f9 89       	ldd	r31, Y+17	; 0x11
    11fa:	80 81       	ld	r24, Z
    11fc:	85 fd       	sbrc	r24, 5
    11fe:	26 c0       	rjmp	.+76     	; 0x124c <_ZN14HardwareSerial5writeEh+0x70>
    1200:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1202:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1204:	10 e0       	ldi	r17, 0x00	; 0
    1206:	0f 5f       	subi	r16, 0xFF	; 255
    1208:	1f 4f       	sbci	r17, 0xFF	; 255
    120a:	0f 73       	andi	r16, 0x3F	; 63
    120c:	11 27       	eor	r17, r17
    120e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1210:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1212:	e8 12       	cpse	r14, r24
    1214:	0c c0       	rjmp	.+24     	; 0x122e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	07 fc       	sbrc	r0, 7
    121a:	fa cf       	rjmp	.-12     	; 0x1210 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    121c:	e8 89       	ldd	r30, Y+16	; 0x10
    121e:	f9 89       	ldd	r31, Y+17	; 0x11
    1220:	80 81       	ld	r24, Z
    1222:	85 ff       	sbrs	r24, 5
    1224:	f5 cf       	rjmp	.-22     	; 0x1210 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1226:	ce 01       	movw	r24, r28
    1228:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    122c:	f1 cf       	rjmp	.-30     	; 0x1210 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    122e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1230:	fe 01       	movw	r30, r28
    1232:	e8 0f       	add	r30, r24
    1234:	f1 1d       	adc	r31, r1
    1236:	e3 5a       	subi	r30, 0xA3	; 163
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    123c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    123e:	f8 94       	cli
    _tx_buffer_head = i;
    1240:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1242:	ea 89       	ldd	r30, Y+18	; 0x12
    1244:	fb 89       	ldd	r31, Y+19	; 0x13
    1246:	80 81       	ld	r24, Z
    1248:	80 62       	ori	r24, 0x20	; 32
    124a:	0a c0       	rjmp	.+20     	; 0x1260 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    124c:	9f b7       	in	r25, 0x3f	; 63
    124e:	f8 94       	cli
      *_udr = c;
    1250:	ee 89       	ldd	r30, Y+22	; 0x16
    1252:	ff 89       	ldd	r31, Y+23	; 0x17
    1254:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1256:	e8 89       	ldd	r30, Y+16	; 0x10
    1258:	f9 89       	ldd	r31, Y+17	; 0x11
    125a:	80 81       	ld	r24, Z
    125c:	83 70       	andi	r24, 0x03	; 3
    125e:	80 64       	ori	r24, 0x40	; 64
    1260:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1262:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	08 95       	ret

00001276 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    127c:	88 8d       	ldd	r24, Y+24	; 0x18
    127e:	88 23       	and	r24, r24
    1280:	c9 f0       	breq	.+50     	; 0x12b4 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1282:	ea 89       	ldd	r30, Y+18	; 0x12
    1284:	fb 89       	ldd	r31, Y+19	; 0x13
    1286:	80 81       	ld	r24, Z
    1288:	85 fd       	sbrc	r24, 5
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <_ZN14HardwareSerial5flushEv+0x20>
    128c:	a8 89       	ldd	r26, Y+16	; 0x10
    128e:	b9 89       	ldd	r27, Y+17	; 0x11
    1290:	8c 91       	ld	r24, X
    1292:	86 fd       	sbrc	r24, 6
    1294:	0f c0       	rjmp	.+30     	; 0x12b4 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	07 fc       	sbrc	r0, 7
    129a:	f5 cf       	rjmp	.-22     	; 0x1286 <_ZN14HardwareSerial5flushEv+0x10>
    129c:	80 81       	ld	r24, Z
    129e:	85 ff       	sbrs	r24, 5
    12a0:	f2 cf       	rjmp	.-28     	; 0x1286 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    12a2:	a8 89       	ldd	r26, Y+16	; 0x10
    12a4:	b9 89       	ldd	r27, Y+17	; 0x11
    12a6:	8c 91       	ld	r24, X
    12a8:	85 ff       	sbrs	r24, 5
    12aa:	ed cf       	rjmp	.-38     	; 0x1286 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    12ac:	ce 01       	movw	r24, r28
    12ae:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    12b2:	e7 cf       	rjmp	.-50     	; 0x1282 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	08 95       	ret

000012ba <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	ec 01       	movw	r28, r24
    12ca:	6a 01       	movw	r12, r20
    12cc:	7b 01       	movw	r14, r22
    12ce:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    12d0:	e8 89       	ldd	r30, Y+16	; 0x10
    12d2:	f9 89       	ldd	r31, Y+17	; 0x11
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    12d8:	41 15       	cp	r20, r1
    12da:	51 4e       	sbci	r21, 0xE1	; 225
    12dc:	61 05       	cpc	r22, r1
    12de:	71 05       	cpc	r23, r1
    12e0:	b1 f0       	breq	.+44     	; 0x130e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	79 e0       	ldi	r23, 0x09	; 9
    12e6:	8d e3       	ldi	r24, 0x3D	; 61
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	a7 01       	movw	r20, r14
    12ec:	96 01       	movw	r18, r12
    12ee:	0e 94 0d 13 	call	0x261a	; 0x261a <__udivmodsi4>
    12f2:	da 01       	movw	r26, r20
    12f4:	c9 01       	movw	r24, r18
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	a1 09       	sbc	r26, r1
    12fa:	b1 09       	sbc	r27, r1
    12fc:	b6 95       	lsr	r27
    12fe:	a7 95       	ror	r26
    1300:	97 95       	ror	r25
    1302:	87 95       	ror	r24
    1304:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1306:	21 15       	cp	r18, r1
    1308:	80 e1       	ldi	r24, 0x10	; 16
    130a:	38 07       	cpc	r19, r24
    130c:	a8 f0       	brcs	.+42     	; 0x1338 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    130e:	e8 89       	ldd	r30, Y+16	; 0x10
    1310:	f9 89       	ldd	r31, Y+17	; 0x11
    1312:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1314:	60 e8       	ldi	r22, 0x80	; 128
    1316:	74 e8       	ldi	r23, 0x84	; 132
    1318:	8e e1       	ldi	r24, 0x1E	; 30
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a7 01       	movw	r20, r14
    131e:	96 01       	movw	r18, r12
    1320:	0e 94 0d 13 	call	0x261a	; 0x261a <__udivmodsi4>
    1324:	da 01       	movw	r26, r20
    1326:	c9 01       	movw	r24, r18
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	a1 09       	sbc	r26, r1
    132c:	b1 09       	sbc	r27, r1
    132e:	b6 95       	lsr	r27
    1330:	a7 95       	ror	r26
    1332:	97 95       	ror	r25
    1334:	87 95       	ror	r24
    1336:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1338:	ec 85       	ldd	r30, Y+12	; 0x0c
    133a:	fd 85       	ldd	r31, Y+13	; 0x0d
    133c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    133e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1340:	ff 85       	ldd	r31, Y+15	; 0x0f
    1342:	20 83       	st	Z, r18

  _written = false;
    1344:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1346:	ec 89       	ldd	r30, Y+20	; 0x14
    1348:	fd 89       	ldd	r31, Y+21	; 0x15
    134a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    134c:	ea 89       	ldd	r30, Y+18	; 0x12
    134e:	fb 89       	ldd	r31, Y+19	; 0x13
    1350:	80 81       	ld	r24, Z
    1352:	80 61       	ori	r24, 0x10	; 16
    1354:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1356:	ea 89       	ldd	r30, Y+18	; 0x12
    1358:	fb 89       	ldd	r31, Y+19	; 0x13
    135a:	80 81       	ld	r24, Z
    135c:	88 60       	ori	r24, 0x08	; 8
    135e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1360:	ea 89       	ldd	r30, Y+18	; 0x12
    1362:	fb 89       	ldd	r31, Y+19	; 0x13
    1364:	80 81       	ld	r24, Z
    1366:	80 68       	ori	r24, 0x80	; 128
    1368:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    136a:	ea 89       	ldd	r30, Y+18	; 0x12
    136c:	fb 89       	ldd	r31, Y+19	; 0x13
    136e:	80 81       	ld	r24, Z
    1370:	8f 7d       	andi	r24, 0xDF	; 223
    1372:	80 83       	st	Z, r24
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	08 95       	ret

00001384 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	08 95       	ret

0000138a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	2f 93       	push	r18
    1396:	8f 93       	push	r24
    1398:	9f 93       	push	r25
    139a:	ef 93       	push	r30
    139c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    139e:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <Serial+0x10>
    13a2:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <Serial+0x11>
    13a6:	80 81       	ld	r24, Z
    13a8:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <Serial+0x16>
    13ac:	f0 91 8e 03 	lds	r31, 0x038E	; 0x80038e <Serial+0x17>
    13b0:	82 fd       	sbrc	r24, 2
    13b2:	12 c0       	rjmp	.+36     	; 0x13d8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    13b4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    13b6:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <Serial+0x19>
    13ba:	8f 5f       	subi	r24, 0xFF	; 255
    13bc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    13be:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <Serial+0x1a>
    13c2:	82 17       	cp	r24, r18
    13c4:	51 f0       	breq	.+20     	; 0x13da <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    13c6:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <Serial+0x19>
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	e9 58       	subi	r30, 0x89	; 137
    13ce:	fc 4f       	sbci	r31, 0xFC	; 252
    13d0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    13d2:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <Serial+0x19>
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    13d8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	9f 91       	pop	r25
    13e0:	8f 91       	pop	r24
    13e2:	2f 91       	pop	r18
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	2f 93       	push	r18
    13fa:	3f 93       	push	r19
    13fc:	4f 93       	push	r20
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1410:	87 e7       	ldi	r24, 0x77	; 119
    1412:	93 e0       	ldi	r25, 0x03	; 3
    1414:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1418:	ff 91       	pop	r31
    141a:	ef 91       	pop	r30
    141c:	bf 91       	pop	r27
    141e:	af 91       	pop	r26
    1420:	9f 91       	pop	r25
    1422:	8f 91       	pop	r24
    1424:	7f 91       	pop	r23
    1426:	6f 91       	pop	r22
    1428:	5f 91       	pop	r21
    142a:	4f 91       	pop	r20
    142c:	3f 91       	pop	r19
    142e:	2f 91       	pop	r18
    1430:	0f 90       	pop	r0
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	0f 90       	pop	r0
    1436:	1f 90       	pop	r1
    1438:	18 95       	reti

0000143a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    143a:	87 e7       	ldi	r24, 0x77	; 119
    143c:	93 e0       	ldi	r25, 0x03	; 3
    143e:	0e 94 81 08 	call	0x1102	; 0x1102 <_ZN14HardwareSerial9availableEv>
    1442:	21 e0       	ldi	r18, 0x01	; 1
    1444:	89 2b       	or	r24, r25
    1446:	09 f4       	brne	.+2      	; 0x144a <_Z17Serial0_availablev+0x10>
    1448:	20 e0       	ldi	r18, 0x00	; 0
}
    144a:	82 2f       	mov	r24, r18
    144c:	08 95       	ret

0000144e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    144e:	e7 e7       	ldi	r30, 0x77	; 119
    1450:	f3 e0       	ldi	r31, 0x03	; 3
    1452:	13 82       	std	Z+3, r1	; 0x03
    1454:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1456:	88 ee       	ldi	r24, 0xE8	; 232
    1458:	93 e0       	ldi	r25, 0x03	; 3
    145a:	a0 e0       	ldi	r26, 0x00	; 0
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	84 83       	std	Z+4, r24	; 0x04
    1460:	95 83       	std	Z+5, r25	; 0x05
    1462:	a6 83       	std	Z+6, r26	; 0x06
    1464:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1466:	81 e2       	ldi	r24, 0x21	; 33
    1468:	92 e0       	ldi	r25, 0x02	; 2
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24
    146e:	85 ec       	ldi	r24, 0xC5	; 197
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	95 87       	std	Z+13, r25	; 0x0d
    1474:	84 87       	std	Z+12, r24	; 0x0c
    1476:	84 ec       	ldi	r24, 0xC4	; 196
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	97 87       	std	Z+15, r25	; 0x0f
    147c:	86 87       	std	Z+14, r24	; 0x0e
    147e:	80 ec       	ldi	r24, 0xC0	; 192
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	91 8b       	std	Z+17, r25	; 0x11
    1484:	80 8b       	std	Z+16, r24	; 0x10
    1486:	81 ec       	ldi	r24, 0xC1	; 193
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	93 8b       	std	Z+19, r25	; 0x13
    148c:	82 8b       	std	Z+18, r24	; 0x12
    148e:	82 ec       	ldi	r24, 0xC2	; 194
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	95 8b       	std	Z+21, r25	; 0x15
    1494:	84 8b       	std	Z+20, r24	; 0x14
    1496:	86 ec       	ldi	r24, 0xC6	; 198
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	97 8b       	std	Z+23, r25	; 0x17
    149c:	86 8b       	std	Z+22, r24	; 0x16
    149e:	11 8e       	std	Z+25, r1	; 0x19
    14a0:	12 8e       	std	Z+26, r1	; 0x1a
    14a2:	13 8e       	std	Z+27, r1	; 0x1b
    14a4:	14 8e       	std	Z+28, r1	; 0x1c
    14a6:	08 95       	ret

000014a8 <initVariant>:
    14a8:	08 95       	ret

000014aa <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    14aa:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <init>

	initVariant();
    14ae:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    14b2:	0e 94 b4 04 	call	0x968	; 0x968 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    14b6:	ce eb       	ldi	r28, 0xBE	; 190
    14b8:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    14ba:	0e 94 2a 05 	call	0xa54	; 0xa54 <loop>
		if (serialEventRun) serialEventRun();
    14be:	20 97       	sbiw	r28, 0x00	; 0
    14c0:	e1 f3       	breq	.-8      	; 0x14ba <main+0x10>
    14c2:	0e 94 be 08 	call	0x117c	; 0x117c <_Z14serialEventRunv>
    14c6:	f9 cf       	rjmp	.-14     	; 0x14ba <main+0x10>

000014c8 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    14c8:	cf 92       	push	r12
    14ca:	df 92       	push	r13
    14cc:	ef 92       	push	r14
    14ce:	ff 92       	push	r15
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	6c 01       	movw	r12, r24
    14da:	7a 01       	movw	r14, r20
    14dc:	8b 01       	movw	r16, r22
    14de:	c0 e0       	ldi	r28, 0x00	; 0
    14e0:	d0 e0       	ldi	r29, 0x00	; 0
    14e2:	ce 15       	cp	r28, r14
    14e4:	df 05       	cpc	r29, r15
    14e6:	81 f0       	breq	.+32     	; 0x1508 <_ZN5Print5writeEPKhj+0x40>
    14e8:	d8 01       	movw	r26, r16
    14ea:	6d 91       	ld	r22, X+
    14ec:	8d 01       	movw	r16, r26
    14ee:	d6 01       	movw	r26, r12
    14f0:	ed 91       	ld	r30, X+
    14f2:	fc 91       	ld	r31, X
    14f4:	01 90       	ld	r0, Z+
    14f6:	f0 81       	ld	r31, Z
    14f8:	e0 2d       	mov	r30, r0
    14fa:	c6 01       	movw	r24, r12
    14fc:	09 95       	icall
    14fe:	89 2b       	or	r24, r25
    1500:	11 f0       	breq	.+4      	; 0x1506 <_ZN5Print5writeEPKhj+0x3e>
    1502:	21 96       	adiw	r28, 0x01	; 1
    1504:	ee cf       	rjmp	.-36     	; 0x14e2 <_ZN5Print5writeEPKhj+0x1a>
    1506:	7e 01       	movw	r14, r28
    1508:	c7 01       	movw	r24, r14
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	ff 90       	pop	r15
    1514:	ef 90       	pop	r14
    1516:	df 90       	pop	r13
    1518:	cf 90       	pop	r12
    151a:	08 95       	ret

0000151c <_ZN5Print5writeEPKc>:
    151c:	61 15       	cp	r22, r1
    151e:	71 05       	cpc	r23, r1
    1520:	79 f0       	breq	.+30     	; 0x1540 <_ZN5Print5writeEPKc+0x24>
    1522:	fb 01       	movw	r30, r22
    1524:	01 90       	ld	r0, Z+
    1526:	00 20       	and	r0, r0
    1528:	e9 f7       	brne	.-6      	; 0x1524 <_ZN5Print5writeEPKc+0x8>
    152a:	31 97       	sbiw	r30, 0x01	; 1
    152c:	af 01       	movw	r20, r30
    152e:	46 1b       	sub	r20, r22
    1530:	57 0b       	sbc	r21, r23
    1532:	dc 01       	movw	r26, r24
    1534:	ed 91       	ld	r30, X+
    1536:	fc 91       	ld	r31, X
    1538:	02 80       	ldd	r0, Z+2	; 0x02
    153a:	f3 81       	ldd	r31, Z+3	; 0x03
    153c:	e0 2d       	mov	r30, r0
    153e:	09 94       	ijmp
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	08 95       	ret

00001546 <_ZN5Print5printEPK19__FlashStringHelper>:
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	8c 01       	movw	r16, r24
    1554:	7b 01       	movw	r14, r22
    1556:	c0 e0       	ldi	r28, 0x00	; 0
    1558:	d0 e0       	ldi	r29, 0x00	; 0
    155a:	f7 01       	movw	r30, r14
    155c:	ec 0f       	add	r30, r28
    155e:	fd 1f       	adc	r31, r29
    1560:	64 91       	lpm	r22, Z
    1562:	66 23       	and	r22, r22
    1564:	61 f0       	breq	.+24     	; 0x157e <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1566:	d8 01       	movw	r26, r16
    1568:	ed 91       	ld	r30, X+
    156a:	fc 91       	ld	r31, X
    156c:	01 90       	ld	r0, Z+
    156e:	f0 81       	ld	r31, Z
    1570:	e0 2d       	mov	r30, r0
    1572:	c8 01       	movw	r24, r16
    1574:	09 95       	icall
    1576:	89 2b       	or	r24, r25
    1578:	11 f0       	breq	.+4      	; 0x157e <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    157a:	21 96       	adiw	r28, 0x01	; 1
    157c:	ee cf       	rjmp	.-36     	; 0x155a <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    157e:	ce 01       	movw	r24, r28
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	08 95       	ret

0000158e <_ZN5Print5printEPKc>:
    158e:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <_ZN5Print5writeEPKc>

00001592 <_ZN5Print5printEc>:
    1592:	dc 01       	movw	r26, r24
    1594:	ed 91       	ld	r30, X+
    1596:	fc 91       	ld	r31, X
    1598:	01 90       	ld	r0, Z+
    159a:	f0 81       	ld	r31, Z
    159c:	e0 2d       	mov	r30, r0
    159e:	09 94       	ijmp

000015a0 <_ZN5Print7printlnEv>:
    15a0:	6f e2       	ldi	r22, 0x2F	; 47
    15a2:	72 e0       	ldi	r23, 0x02	; 2
    15a4:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <_ZN5Print5writeEPKc>

000015a8 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	ec 01       	movw	r28, r24
    15b2:	0e 94 a3 0a 	call	0x1546	; 0x1546 <_ZN5Print5printEPK19__FlashStringHelper>
    15b6:	8c 01       	movw	r16, r24
    15b8:	ce 01       	movw	r24, r28
    15ba:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN5Print7printlnEv>
    15be:	80 0f       	add	r24, r16
    15c0:	91 1f       	adc	r25, r17
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	08 95       	ret

000015cc <_ZN5Print7printlnEPKc>:
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	ec 01       	movw	r28, r24
    15d6:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN5Print5writeEPKc>
    15da:	8c 01       	movw	r16, r24
    15dc:	ce 01       	movw	r24, r28
    15de:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN5Print7printlnEv>
    15e2:	80 0f       	add	r24, r16
    15e4:	91 1f       	adc	r25, r17
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	08 95       	ret

000015f0 <_ZN5Print11printNumberEmh>:
    15f0:	8f 92       	push	r8
    15f2:	9f 92       	push	r9
    15f4:	af 92       	push	r10
    15f6:	bf 92       	push	r11
    15f8:	ef 92       	push	r14
    15fa:	ff 92       	push	r15
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	a1 97       	sbiw	r28, 0x21	; 33
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	7c 01       	movw	r14, r24
    1616:	fa 01       	movw	r30, r20
    1618:	cb 01       	movw	r24, r22
    161a:	19 a2       	std	Y+33, r1	; 0x21
    161c:	22 30       	cpi	r18, 0x02	; 2
    161e:	08 f4       	brcc	.+2      	; 0x1622 <_ZN5Print11printNumberEmh+0x32>
    1620:	2a e0       	ldi	r18, 0x0A	; 10
    1622:	8e 01       	movw	r16, r28
    1624:	0f 5d       	subi	r16, 0xDF	; 223
    1626:	1f 4f       	sbci	r17, 0xFF	; 255
    1628:	82 2e       	mov	r8, r18
    162a:	91 2c       	mov	r9, r1
    162c:	a1 2c       	mov	r10, r1
    162e:	b1 2c       	mov	r11, r1
    1630:	bf 01       	movw	r22, r30
    1632:	a5 01       	movw	r20, r10
    1634:	94 01       	movw	r18, r8
    1636:	0e 94 0d 13 	call	0x261a	; 0x261a <__udivmodsi4>
    163a:	f9 01       	movw	r30, r18
    163c:	ca 01       	movw	r24, r20
    163e:	01 50       	subi	r16, 0x01	; 1
    1640:	11 09       	sbc	r17, r1
    1642:	6a 30       	cpi	r22, 0x0A	; 10
    1644:	10 f4       	brcc	.+4      	; 0x164a <_ZN5Print11printNumberEmh+0x5a>
    1646:	60 5d       	subi	r22, 0xD0	; 208
    1648:	01 c0       	rjmp	.+2      	; 0x164c <_ZN5Print11printNumberEmh+0x5c>
    164a:	69 5c       	subi	r22, 0xC9	; 201
    164c:	d8 01       	movw	r26, r16
    164e:	6c 93       	st	X, r22
    1650:	23 2b       	or	r18, r19
    1652:	24 2b       	or	r18, r20
    1654:	25 2b       	or	r18, r21
    1656:	61 f7       	brne	.-40     	; 0x1630 <_ZN5Print11printNumberEmh+0x40>
    1658:	b8 01       	movw	r22, r16
    165a:	c7 01       	movw	r24, r14
    165c:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN5Print5writeEPKc>
    1660:	a1 96       	adiw	r28, 0x21	; 33
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	ff 90       	pop	r15
    1676:	ef 90       	pop	r14
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	08 95       	ret

00001682 <_ZN5Print5printEmi>:
    1682:	21 15       	cp	r18, r1
    1684:	31 05       	cpc	r19, r1
    1686:	41 f4       	brne	.+16     	; 0x1698 <_ZN5Print5printEmi+0x16>
    1688:	dc 01       	movw	r26, r24
    168a:	ed 91       	ld	r30, X+
    168c:	fc 91       	ld	r31, X
    168e:	01 90       	ld	r0, Z+
    1690:	f0 81       	ld	r31, Z
    1692:	e0 2d       	mov	r30, r0
    1694:	64 2f       	mov	r22, r20
    1696:	09 94       	ijmp
    1698:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <_ZN5Print11printNumberEmh>

0000169c <_ZN5Print5printEhi>:
    169c:	9a 01       	movw	r18, r20
    169e:	46 2f       	mov	r20, r22
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <_ZN5Print5printEmi>

000016aa <_ZN5Print5printEji>:
    16aa:	9a 01       	movw	r18, r20
    16ac:	ab 01       	movw	r20, r22
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <_ZN5Print5printEmi>

000016b6 <_ZN5Print7printlnEji>:
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	ec 01       	movw	r28, r24
    16c0:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN5Print5printEji>
    16c4:	8c 01       	movw	r16, r24
    16c6:	ce 01       	movw	r24, r28
    16c8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN5Print7printlnEv>
    16cc:	80 0f       	add	r24, r16
    16ce:	91 1f       	adc	r25, r17
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	08 95       	ret

000016da <_ZN5Print5printEli>:
    16da:	cf 92       	push	r12
    16dc:	df 92       	push	r13
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	21 15       	cp	r18, r1
    16ec:	31 05       	cpc	r19, r1
    16ee:	81 f4       	brne	.+32     	; 0x1710 <_ZN5Print5printEli+0x36>
    16f0:	dc 01       	movw	r26, r24
    16f2:	ed 91       	ld	r30, X+
    16f4:	fc 91       	ld	r31, X
    16f6:	01 90       	ld	r0, Z+
    16f8:	f0 81       	ld	r31, Z
    16fa:	e0 2d       	mov	r30, r0
    16fc:	64 2f       	mov	r22, r20
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	df 90       	pop	r13
    170c:	cf 90       	pop	r12
    170e:	09 94       	ijmp
    1710:	2a 30       	cpi	r18, 0x0A	; 10
    1712:	31 05       	cpc	r19, r1
    1714:	01 f5       	brne	.+64     	; 0x1756 <_ZN5Print5printEli+0x7c>
    1716:	77 ff       	sbrs	r23, 7
    1718:	1d c0       	rjmp	.+58     	; 0x1754 <_ZN5Print5printEli+0x7a>
    171a:	6a 01       	movw	r12, r20
    171c:	7b 01       	movw	r14, r22
    171e:	ec 01       	movw	r28, r24
    1720:	6d e2       	ldi	r22, 0x2D	; 45
    1722:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN5Print5printEc>
    1726:	8c 01       	movw	r16, r24
    1728:	44 27       	eor	r20, r20
    172a:	55 27       	eor	r21, r21
    172c:	ba 01       	movw	r22, r20
    172e:	4c 19       	sub	r20, r12
    1730:	5d 09       	sbc	r21, r13
    1732:	6e 09       	sbc	r22, r14
    1734:	7f 09       	sbc	r23, r15
    1736:	2a e0       	ldi	r18, 0x0A	; 10
    1738:	ce 01       	movw	r24, r28
    173a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <_ZN5Print11printNumberEmh>
    173e:	80 0f       	add	r24, r16
    1740:	91 1f       	adc	r25, r17
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	df 90       	pop	r13
    1750:	cf 90       	pop	r12
    1752:	08 95       	ret
    1754:	2a e0       	ldi	r18, 0x0A	; 10
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	ff 90       	pop	r15
    1760:	ef 90       	pop	r14
    1762:	df 90       	pop	r13
    1764:	cf 90       	pop	r12
    1766:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <_ZN5Print11printNumberEmh>

0000176a <_ZN5Print5printEii>:
    176a:	9a 01       	movw	r18, r20
    176c:	ab 01       	movw	r20, r22
    176e:	77 0f       	add	r23, r23
    1770:	66 0b       	sbc	r22, r22
    1772:	77 0b       	sbc	r23, r23
    1774:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <_ZN5Print5printEli>

00001778 <_ZN5Print7printlnEii>:
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	ec 01       	movw	r28, r24
    1782:	0e 94 b5 0b 	call	0x176a	; 0x176a <_ZN5Print5printEii>
    1786:	8c 01       	movw	r16, r24
    1788:	ce 01       	movw	r24, r28
    178a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN5Print7printlnEv>
    178e:	80 0f       	add	r24, r16
    1790:	91 1f       	adc	r25, r17
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	08 95       	ret

0000179c <_ZN5Print10printFloatEdh>:
    179c:	7f 92       	push	r7
    179e:	8f 92       	push	r8
    17a0:	9f 92       	push	r9
    17a2:	af 92       	push	r10
    17a4:	bf 92       	push	r11
    17a6:	cf 92       	push	r12
    17a8:	df 92       	push	r13
    17aa:	ef 92       	push	r14
    17ac:	ff 92       	push	r15
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	8c 01       	movw	r16, r24
    17b8:	6a 01       	movw	r12, r20
    17ba:	7b 01       	movw	r14, r22
    17bc:	72 2e       	mov	r7, r18
    17be:	9a 01       	movw	r18, r20
    17c0:	ab 01       	movw	r20, r22
    17c2:	c7 01       	movw	r24, r14
    17c4:	b6 01       	movw	r22, r12
    17c6:	0e 94 08 13 	call	0x2610	; 0x2610 <__unordsf2>
    17ca:	88 23       	and	r24, r24
    17cc:	19 f0       	breq	.+6      	; 0x17d4 <_ZN5Print10printFloatEdh+0x38>
    17ce:	62 e3       	ldi	r22, 0x32	; 50
    17d0:	72 e0       	ldi	r23, 0x02	; 2
    17d2:	27 c0       	rjmp	.+78     	; 0x1822 <_ZN5Print10printFloatEdh+0x86>
    17d4:	46 01       	movw	r8, r12
    17d6:	57 01       	movw	r10, r14
    17d8:	e8 94       	clt
    17da:	b7 f8       	bld	r11, 7
    17dc:	2f ef       	ldi	r18, 0xFF	; 255
    17de:	3f ef       	ldi	r19, 0xFF	; 255
    17e0:	4f e7       	ldi	r20, 0x7F	; 127
    17e2:	5f e7       	ldi	r21, 0x7F	; 127
    17e4:	c5 01       	movw	r24, r10
    17e6:	b4 01       	movw	r22, r8
    17e8:	0e 94 08 13 	call	0x2610	; 0x2610 <__unordsf2>
    17ec:	81 11       	cpse	r24, r1
    17ee:	0d c0       	rjmp	.+26     	; 0x180a <_ZN5Print10printFloatEdh+0x6e>
    17f0:	2f ef       	ldi	r18, 0xFF	; 255
    17f2:	3f ef       	ldi	r19, 0xFF	; 255
    17f4:	4f e7       	ldi	r20, 0x7F	; 127
    17f6:	5f e7       	ldi	r21, 0x7F	; 127
    17f8:	c5 01       	movw	r24, r10
    17fa:	b4 01       	movw	r22, r8
    17fc:	0e 94 03 13 	call	0x2606	; 0x2606 <__cmpsf2>
    1800:	18 16       	cp	r1, r24
    1802:	1c f4       	brge	.+6      	; 0x180a <_ZN5Print10printFloatEdh+0x6e>
    1804:	66 e3       	ldi	r22, 0x36	; 54
    1806:	72 e0       	ldi	r23, 0x02	; 2
    1808:	0c c0       	rjmp	.+24     	; 0x1822 <_ZN5Print10printFloatEdh+0x86>
    180a:	2f ef       	ldi	r18, 0xFF	; 255
    180c:	3f ef       	ldi	r19, 0xFF	; 255
    180e:	4f e7       	ldi	r20, 0x7F	; 127
    1810:	5f e4       	ldi	r21, 0x4F	; 79
    1812:	c7 01       	movw	r24, r14
    1814:	b6 01       	movw	r22, r12
    1816:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__gesf2>
    181a:	18 16       	cp	r1, r24
    181c:	94 f4       	brge	.+36     	; 0x1842 <_ZN5Print10printFloatEdh+0xa6>
    181e:	6a e3       	ldi	r22, 0x3A	; 58
    1820:	72 e0       	ldi	r23, 0x02	; 2
    1822:	c8 01       	movw	r24, r16
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	df 90       	pop	r13
    1832:	cf 90       	pop	r12
    1834:	bf 90       	pop	r11
    1836:	af 90       	pop	r10
    1838:	9f 90       	pop	r9
    183a:	8f 90       	pop	r8
    183c:	7f 90       	pop	r7
    183e:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <_ZN5Print5writeEPKc>
    1842:	2f ef       	ldi	r18, 0xFF	; 255
    1844:	3f ef       	ldi	r19, 0xFF	; 255
    1846:	4f e7       	ldi	r20, 0x7F	; 127
    1848:	5f ec       	ldi	r21, 0xCF	; 207
    184a:	c7 01       	movw	r24, r14
    184c:	b6 01       	movw	r22, r12
    184e:	0e 94 03 13 	call	0x2606	; 0x2606 <__cmpsf2>
    1852:	87 fd       	sbrc	r24, 7
    1854:	e4 cf       	rjmp	.-56     	; 0x181e <_ZN5Print10printFloatEdh+0x82>
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	a9 01       	movw	r20, r18
    185c:	c7 01       	movw	r24, r14
    185e:	b6 01       	movw	r22, r12
    1860:	0e 94 03 13 	call	0x2606	; 0x2606 <__cmpsf2>
    1864:	87 ff       	sbrs	r24, 7
    1866:	0a c0       	rjmp	.+20     	; 0x187c <_ZN5Print10printFloatEdh+0xe0>
    1868:	6d e2       	ldi	r22, 0x2D	; 45
    186a:	c8 01       	movw	r24, r16
    186c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN5Print5printEc>
    1870:	ec 01       	movw	r28, r24
    1872:	f7 fa       	bst	r15, 7
    1874:	f0 94       	com	r15
    1876:	f7 f8       	bld	r15, 7
    1878:	f0 94       	com	r15
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <_ZN5Print10printFloatEdh+0xe4>
    187c:	c0 e0       	ldi	r28, 0x00	; 0
    187e:	d0 e0       	ldi	r29, 0x00	; 0
    1880:	b1 2c       	mov	r11, r1
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	9f e3       	ldi	r25, 0x3F	; 63
    188a:	7b 14       	cp	r7, r11
    188c:	41 f0       	breq	.+16     	; 0x189e <_ZN5Print10printFloatEdh+0x102>
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e2       	ldi	r20, 0x20	; 32
    1894:	51 e4       	ldi	r21, 0x41	; 65
    1896:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__divsf3>
    189a:	b3 94       	inc	r11
    189c:	f6 cf       	rjmp	.-20     	; 0x188a <_ZN5Print10printFloatEdh+0xee>
    189e:	a7 01       	movw	r20, r14
    18a0:	96 01       	movw	r18, r12
    18a2:	0e 94 49 06 	call	0xc92	; 0xc92 <__addsf3>
    18a6:	6b 01       	movw	r12, r22
    18a8:	7c 01       	movw	r14, r24
    18aa:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__fixunssfsi>
    18ae:	4b 01       	movw	r8, r22
    18b0:	5c 01       	movw	r10, r24
    18b2:	2a e0       	ldi	r18, 0x0A	; 10
    18b4:	ab 01       	movw	r20, r22
    18b6:	bc 01       	movw	r22, r24
    18b8:	c8 01       	movw	r24, r16
    18ba:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <_ZN5Print11printNumberEmh>
    18be:	c8 0f       	add	r28, r24
    18c0:	d9 1f       	adc	r29, r25
    18c2:	77 20       	and	r7, r7
    18c4:	b9 f1       	breq	.+110    	; 0x1934 <_ZN5Print10printFloatEdh+0x198>
    18c6:	c5 01       	movw	r24, r10
    18c8:	b4 01       	movw	r22, r8
    18ca:	0e 94 5d 07 	call	0xeba	; 0xeba <__floatunsisf>
    18ce:	9b 01       	movw	r18, r22
    18d0:	ac 01       	movw	r20, r24
    18d2:	c7 01       	movw	r24, r14
    18d4:	b6 01       	movw	r22, r12
    18d6:	0e 94 48 06 	call	0xc90	; 0xc90 <__subsf3>
    18da:	6b 01       	movw	r12, r22
    18dc:	7c 01       	movw	r14, r24
    18de:	6e e2       	ldi	r22, 0x2E	; 46
    18e0:	c8 01       	movw	r24, r16
    18e2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN5Print5printEc>
    18e6:	c8 0f       	add	r28, r24
    18e8:	d9 1f       	adc	r29, r25
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e2       	ldi	r20, 0x20	; 32
    18f0:	51 e4       	ldi	r21, 0x41	; 65
    18f2:	c7 01       	movw	r24, r14
    18f4:	b6 01       	movw	r22, r12
    18f6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__mulsf3>
    18fa:	4b 01       	movw	r8, r22
    18fc:	5c 01       	movw	r10, r24
    18fe:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__fixunssfsi>
    1902:	6b 01       	movw	r12, r22
    1904:	7c 01       	movw	r14, r24
    1906:	4a e0       	ldi	r20, 0x0A	; 10
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	c8 01       	movw	r24, r16
    190c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN5Print5printEji>
    1910:	c8 0f       	add	r28, r24
    1912:	d9 1f       	adc	r29, r25
    1914:	b6 01       	movw	r22, r12
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 5d 07 	call	0xeba	; 0xeba <__floatunsisf>
    191e:	9b 01       	movw	r18, r22
    1920:	ac 01       	movw	r20, r24
    1922:	c5 01       	movw	r24, r10
    1924:	b4 01       	movw	r22, r8
    1926:	0e 94 48 06 	call	0xc90	; 0xc90 <__subsf3>
    192a:	6b 01       	movw	r12, r22
    192c:	7c 01       	movw	r14, r24
    192e:	7a 94       	dec	r7
    1930:	71 10       	cpse	r7, r1
    1932:	db cf       	rjmp	.-74     	; 0x18ea <_ZN5Print10printFloatEdh+0x14e>
    1934:	ce 01       	movw	r24, r28
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	ff 90       	pop	r15
    1940:	ef 90       	pop	r14
    1942:	df 90       	pop	r13
    1944:	cf 90       	pop	r12
    1946:	bf 90       	pop	r11
    1948:	af 90       	pop	r10
    194a:	9f 90       	pop	r9
    194c:	8f 90       	pop	r8
    194e:	7f 90       	pop	r7
    1950:	08 95       	ret

00001952 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    195c:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN5Print10printFloatEdh>
    1960:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1962:	ce 01       	movw	r24, r28
    1964:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN5Print7printlnEv>
  return n;
}
    1968:	80 0f       	add	r24, r16
    196a:	91 1f       	adc	r25, r17
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	08 95       	ret

00001976 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1976:	1f 92       	push	r1
    1978:	0f 92       	push	r0
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	0f 92       	push	r0
    197e:	11 24       	eor	r1, r1
    1980:	2f 93       	push	r18
    1982:	3f 93       	push	r19
    1984:	8f 93       	push	r24
    1986:	9f 93       	push	r25
    1988:	af 93       	push	r26
    198a:	bf 93       	push	r27
    198c:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <timer0_millis>
    1990:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <timer0_millis+0x1>
    1994:	a0 91 17 04 	lds	r26, 0x0417	; 0x800417 <timer0_millis+0x2>
    1998:	b0 91 18 04 	lds	r27, 0x0418	; 0x800418 <timer0_millis+0x3>
    199c:	30 91 14 04 	lds	r19, 0x0414	; 0x800414 <timer0_fract>
    19a0:	23 e0       	ldi	r18, 0x03	; 3
    19a2:	23 0f       	add	r18, r19
    19a4:	2d 37       	cpi	r18, 0x7D	; 125
    19a6:	20 f4       	brcc	.+8      	; 0x19b0 <__vector_16+0x3a>
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	a1 1d       	adc	r26, r1
    19ac:	b1 1d       	adc	r27, r1
    19ae:	05 c0       	rjmp	.+10     	; 0x19ba <__vector_16+0x44>
    19b0:	26 e8       	ldi	r18, 0x86	; 134
    19b2:	23 0f       	add	r18, r19
    19b4:	02 96       	adiw	r24, 0x02	; 2
    19b6:	a1 1d       	adc	r26, r1
    19b8:	b1 1d       	adc	r27, r1
    19ba:	20 93 14 04 	sts	0x0414, r18	; 0x800414 <timer0_fract>
    19be:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <timer0_millis>
    19c2:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <timer0_millis+0x1>
    19c6:	a0 93 17 04 	sts	0x0417, r26	; 0x800417 <timer0_millis+0x2>
    19ca:	b0 93 18 04 	sts	0x0418, r27	; 0x800418 <timer0_millis+0x3>
    19ce:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <timer0_overflow_count>
    19d2:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <timer0_overflow_count+0x1>
    19d6:	a0 91 1b 04 	lds	r26, 0x041B	; 0x80041b <timer0_overflow_count+0x2>
    19da:	b0 91 1c 04 	lds	r27, 0x041C	; 0x80041c <timer0_overflow_count+0x3>
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	a1 1d       	adc	r26, r1
    19e2:	b1 1d       	adc	r27, r1
    19e4:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <timer0_overflow_count>
    19e8:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <timer0_overflow_count+0x1>
    19ec:	a0 93 1b 04 	sts	0x041B, r26	; 0x80041b <timer0_overflow_count+0x2>
    19f0:	b0 93 1c 04 	sts	0x041C, r27	; 0x80041c <timer0_overflow_count+0x3>
    19f4:	bf 91       	pop	r27
    19f6:	af 91       	pop	r26
    19f8:	9f 91       	pop	r25
    19fa:	8f 91       	pop	r24
    19fc:	3f 91       	pop	r19
    19fe:	2f 91       	pop	r18
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	0f 90       	pop	r0
    1a06:	1f 90       	pop	r1
    1a08:	18 95       	reti

00001a0a <millis>:
    1a0a:	2f b7       	in	r18, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	60 91 15 04 	lds	r22, 0x0415	; 0x800415 <timer0_millis>
    1a12:	70 91 16 04 	lds	r23, 0x0416	; 0x800416 <timer0_millis+0x1>
    1a16:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <timer0_millis+0x2>
    1a1a:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <timer0_millis+0x3>
    1a1e:	2f bf       	out	0x3f, r18	; 63
    1a20:	08 95       	ret

00001a22 <micros>:
    1a22:	3f b7       	in	r19, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <timer0_overflow_count>
    1a2a:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <timer0_overflow_count+0x1>
    1a2e:	a0 91 1b 04 	lds	r26, 0x041B	; 0x80041b <timer0_overflow_count+0x2>
    1a32:	b0 91 1c 04 	lds	r27, 0x041C	; 0x80041c <timer0_overflow_count+0x3>
    1a36:	26 b5       	in	r18, 0x26	; 38
    1a38:	a8 9b       	sbis	0x15, 0	; 21
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <micros+0x24>
    1a3c:	2f 3f       	cpi	r18, 0xFF	; 255
    1a3e:	19 f0       	breq	.+6      	; 0x1a46 <micros+0x24>
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	a1 1d       	adc	r26, r1
    1a44:	b1 1d       	adc	r27, r1
    1a46:	3f bf       	out	0x3f, r19	; 63
    1a48:	ba 2f       	mov	r27, r26
    1a4a:	a9 2f       	mov	r26, r25
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	88 27       	eor	r24, r24
    1a50:	82 0f       	add	r24, r18
    1a52:	91 1d       	adc	r25, r1
    1a54:	a1 1d       	adc	r26, r1
    1a56:	b1 1d       	adc	r27, r1
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	42 e0       	ldi	r20, 0x02	; 2
    1a5e:	66 0f       	add	r22, r22
    1a60:	77 1f       	adc	r23, r23
    1a62:	88 1f       	adc	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	4a 95       	dec	r20
    1a68:	d1 f7       	brne	.-12     	; 0x1a5e <micros+0x3c>
    1a6a:	08 95       	ret

00001a6c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1a6c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1a6e:	84 b5       	in	r24, 0x24	; 36
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1a74:	84 b5       	in	r24, 0x24	; 36
    1a76:	81 60       	ori	r24, 0x01	; 1
    1a78:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1a7a:	85 b5       	in	r24, 0x25	; 37
    1a7c:	82 60       	ori	r24, 0x02	; 2
    1a7e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1a80:	85 b5       	in	r24, 0x25	; 37
    1a82:	81 60       	ori	r24, 0x01	; 1
    1a84:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1a86:	ee e6       	ldi	r30, 0x6E	; 110
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	81 60       	ori	r24, 0x01	; 1
    1a8e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1a90:	e1 e8       	ldi	r30, 0x81	; 129
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1a96:	80 81       	ld	r24, Z
    1a98:	82 60       	ori	r24, 0x02	; 2
    1a9a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1a9c:	80 81       	ld	r24, Z
    1a9e:	81 60       	ori	r24, 0x01	; 1
    1aa0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1aa2:	e0 e8       	ldi	r30, 0x80	; 128
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	81 60       	ori	r24, 0x01	; 1
    1aaa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1aac:	e1 eb       	ldi	r30, 0xB1	; 177
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	84 60       	ori	r24, 0x04	; 4
    1ab4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1ab6:	e0 eb       	ldi	r30, 0xB0	; 176
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	81 60       	ori	r24, 0x01	; 1
    1abe:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1ac0:	ea e7       	ldi	r30, 0x7A	; 122
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	84 60       	ori	r24, 0x04	; 4
    1ac8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1aca:	80 81       	ld	r24, Z
    1acc:	82 60       	ori	r24, 0x02	; 2
    1ace:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1ad0:	80 81       	ld	r24, Z
    1ad2:	81 60       	ori	r24, 0x01	; 1
    1ad4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1ad6:	80 81       	ld	r24, Z
    1ad8:	80 68       	ori	r24, 0x80	; 128
    1ada:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1adc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1ae0:	08 95       	ret

00001ae2 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    1ae2:	83 30       	cpi	r24, 0x03	; 3
    1ae4:	81 f0       	breq	.+32     	; 0x1b06 <turnOffPWM+0x24>
    1ae6:	28 f4       	brcc	.+10     	; 0x1af2 <turnOffPWM+0x10>
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	99 f0       	breq	.+38     	; 0x1b12 <turnOffPWM+0x30>
    1aec:	82 30       	cpi	r24, 0x02	; 2
    1aee:	a1 f0       	breq	.+40     	; 0x1b18 <turnOffPWM+0x36>
    1af0:	08 95       	ret
    1af2:	87 30       	cpi	r24, 0x07	; 7
    1af4:	a9 f0       	breq	.+42     	; 0x1b20 <turnOffPWM+0x3e>
    1af6:	88 30       	cpi	r24, 0x08	; 8
    1af8:	b9 f0       	breq	.+46     	; 0x1b28 <turnOffPWM+0x46>
    1afa:	84 30       	cpi	r24, 0x04	; 4
    1afc:	d1 f4       	brne	.+52     	; 0x1b32 <turnOffPWM+0x50>
    1afe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b02:	8f 7d       	andi	r24, 0xDF	; 223
    1b04:	03 c0       	rjmp	.+6      	; 0x1b0c <turnOffPWM+0x2a>
    1b06:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b0a:	8f 77       	andi	r24, 0x7F	; 127
    1b0c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b10:	08 95       	ret
    1b12:	84 b5       	in	r24, 0x24	; 36
    1b14:	8f 77       	andi	r24, 0x7F	; 127
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <turnOffPWM+0x3a>
    1b18:	84 b5       	in	r24, 0x24	; 36
    1b1a:	8f 7d       	andi	r24, 0xDF	; 223
    1b1c:	84 bd       	out	0x24, r24	; 36
    1b1e:	08 95       	ret
    1b20:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b24:	8f 77       	andi	r24, 0x7F	; 127
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <turnOffPWM+0x4c>
    1b28:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b2c:	8f 7d       	andi	r24, 0xDF	; 223
    1b2e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b32:	08 95       	ret

00001b34 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	f9 01       	movw	r30, r18
    1b40:	e1 50       	subi	r30, 0x01	; 1
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1b46:	f9 01       	movw	r30, r18
    1b48:	ed 5e       	subi	r30, 0xED	; 237
    1b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1b4e:	f9 01       	movw	r30, r18
    1b50:	e9 5d       	subi	r30, 0xD9	; 217
    1b52:	fe 4f       	sbci	r31, 0xFE	; 254
    1b54:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1b56:	cc 23       	and	r28, r28
    1b58:	c1 f0       	breq	.+48     	; 0x1b8a <digitalWrite+0x56>
    1b5a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1b5c:	81 11       	cpse	r24, r1
    1b5e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <turnOffPWM>

	out = portOutputRegister(port);
    1b62:	ec 2f       	mov	r30, r28
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	e5 5c       	subi	r30, 0xC5	; 197
    1b6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6e:	a5 91       	lpm	r26, Z+
    1b70:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1b72:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1b74:	f8 94       	cli

	if (val == LOW) {
    1b76:	11 11       	cpse	r17, r1
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <digitalWrite+0x4e>
		*out &= ~bit;
    1b7a:	8c 91       	ld	r24, X
    1b7c:	d0 95       	com	r29
    1b7e:	d8 23       	and	r29, r24
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1b82:	ec 91       	ld	r30, X
    1b84:	de 2b       	or	r29, r30
    1b86:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1b88:	9f bf       	out	0x3f, r25	; 63
}
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	1f 91       	pop	r17
    1b90:	08 95       	ret

00001b92 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1b92:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <_ZN7TwoWire14rxBufferLengthE>
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <_ZN7TwoWire13rxBufferIndexE>
    1b9c:	82 1b       	sub	r24, r18
    1b9e:	91 09       	sbc	r25, r1
    1ba0:	08 95       	ret

00001ba2 <_ZN7TwoWire4readEv>:
    1ba2:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <_ZN7TwoWire13rxBufferIndexE>
    1ba6:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <_ZN7TwoWire14rxBufferLengthE>
    1baa:	98 17       	cp	r25, r24
    1bac:	50 f4       	brcc	.+20     	; 0x1bc2 <_ZN7TwoWire4readEv+0x20>
    1bae:	e9 2f       	mov	r30, r25
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	ed 5a       	subi	r30, 0xAD	; 173
    1bb4:	fb 4f       	sbci	r31, 0xFB	; 251
    1bb6:	20 81       	ld	r18, Z
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	9f 5f       	subi	r25, 0xFF	; 255
    1bbc:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <_ZN7TwoWire13rxBufferIndexE>
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <_ZN7TwoWire4readEv+0x24>
    1bc2:	2f ef       	ldi	r18, 0xFF	; 255
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	c9 01       	movw	r24, r18
    1bc8:	08 95       	ret

00001bca <_ZN7TwoWire4peekEv>:
    1bca:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <_ZN7TwoWire13rxBufferIndexE>
    1bce:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <_ZN7TwoWire14rxBufferLengthE>
    1bd2:	e8 17       	cp	r30, r24
    1bd4:	30 f4       	brcc	.+12     	; 0x1be2 <_ZN7TwoWire4peekEv+0x18>
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	ed 5a       	subi	r30, 0xAD	; 173
    1bda:	fb 4f       	sbci	r31, 0xFB	; 251
    1bdc:	80 81       	ld	r24, Z
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	08 95       	ret
    1be2:	8f ef       	ldi	r24, 0xFF	; 255
    1be4:	9f ef       	ldi	r25, 0xFF	; 255
    1be6:	08 95       	ret

00001be8 <_ZN7TwoWire5flushEv>:
    1be8:	08 95       	ret

00001bea <_ZN7TwoWire16onReceiveServiceEPhi>:
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	ec 01       	movw	r28, r24
    1bf0:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <_ZN7TwoWire14user_onReceiveE>
    1bf4:	f0 91 2a 04 	lds	r31, 0x042A	; 0x80042a <_ZN7TwoWire14user_onReceiveE+0x1>
    1bf8:	30 97       	sbiw	r30, 0x00	; 0
    1bfa:	f1 f0       	breq	.+60     	; 0x1c38 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1bfc:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <_ZN7TwoWire13rxBufferIndexE>
    1c00:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <_ZN7TwoWire14rxBufferLengthE>
    1c04:	98 17       	cp	r25, r24
    1c06:	c0 f0       	brcs	.+48     	; 0x1c38 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	29 2f       	mov	r18, r25
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	26 17       	cp	r18, r22
    1c10:	37 07       	cpc	r19, r23
    1c12:	54 f4       	brge	.+20     	; 0x1c28 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1c14:	de 01       	movw	r26, r28
    1c16:	a2 0f       	add	r26, r18
    1c18:	b3 1f       	adc	r27, r19
    1c1a:	4c 91       	ld	r20, X
    1c1c:	d9 01       	movw	r26, r18
    1c1e:	ad 5a       	subi	r26, 0xAD	; 173
    1c20:	bb 4f       	sbci	r27, 0xFB	; 251
    1c22:	4c 93       	st	X, r20
    1c24:	9f 5f       	subi	r25, 0xFF	; 255
    1c26:	f1 cf       	rjmp	.-30     	; 0x1c0a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1c28:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <_ZN7TwoWire13rxBufferIndexE>
    1c2c:	60 93 51 04 	sts	0x0451, r22	; 0x800451 <_ZN7TwoWire14rxBufferLengthE>
    1c30:	cb 01       	movw	r24, r22
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	09 94       	ijmp
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	08 95       	ret

00001c3e <_ZN7TwoWire16onRequestServiceEv>:
    1c3e:	e0 91 2b 04 	lds	r30, 0x042B	; 0x80042b <_ZN7TwoWire14user_onRequestE>
    1c42:	f0 91 2c 04 	lds	r31, 0x042C	; 0x80042c <_ZN7TwoWire14user_onRequestE+0x1>
    1c46:	30 97       	sbiw	r30, 0x00	; 0
    1c48:	29 f0       	breq	.+10     	; 0x1c54 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1c4a:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZN7TwoWire13txBufferIndexE>
    1c4e:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <_ZN7TwoWire14txBufferLengthE>
    1c52:	09 94       	ijmp
    1c54:	08 95       	ret

00001c56 <_ZN7TwoWire5writeEPKhj>:
    1c56:	cf 92       	push	r12
    1c58:	df 92       	push	r13
    1c5a:	ef 92       	push	r14
    1c5c:	ff 92       	push	r15
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	7c 01       	movw	r14, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8a 01       	movw	r16, r20
    1c6c:	20 91 2d 04 	lds	r18, 0x042D	; 0x80042d <_ZN7TwoWire12transmittingE>
    1c70:	22 23       	and	r18, r18
    1c72:	89 f0       	breq	.+34     	; 0x1c96 <_ZN7TwoWire5writeEPKhj+0x40>
    1c74:	eb 01       	movw	r28, r22
    1c76:	6b 01       	movw	r12, r22
    1c78:	c4 0e       	add	r12, r20
    1c7a:	d5 1e       	adc	r13, r21
    1c7c:	cc 15       	cp	r28, r12
    1c7e:	dd 05       	cpc	r29, r13
    1c80:	69 f0       	breq	.+26     	; 0x1c9c <_ZN7TwoWire5writeEPKhj+0x46>
    1c82:	69 91       	ld	r22, Y+
    1c84:	d7 01       	movw	r26, r14
    1c86:	ed 91       	ld	r30, X+
    1c88:	fc 91       	ld	r31, X
    1c8a:	01 90       	ld	r0, Z+
    1c8c:	f0 81       	ld	r31, Z
    1c8e:	e0 2d       	mov	r30, r0
    1c90:	c7 01       	movw	r24, r14
    1c92:	09 95       	icall
    1c94:	f3 cf       	rjmp	.-26     	; 0x1c7c <_ZN7TwoWire5writeEPKhj+0x26>
    1c96:	64 2f       	mov	r22, r20
    1c98:	0e 94 77 0f 	call	0x1eee	; 0x1eee <twi_transmit>
    1c9c:	c8 01       	movw	r24, r16
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	df 90       	pop	r13
    1cac:	cf 90       	pop	r12
    1cae:	08 95       	ret

00001cb0 <_ZN7TwoWire5writeEh>:
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	1f 92       	push	r1
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	69 83       	std	Y+1, r22	; 0x01
    1cbc:	20 91 2d 04 	lds	r18, 0x042D	; 0x80042d <_ZN7TwoWire12transmittingE>
    1cc0:	22 23       	and	r18, r18
    1cc2:	d1 f0       	breq	.+52     	; 0x1cf8 <_ZN7TwoWire5writeEh+0x48>
    1cc4:	20 91 2e 04 	lds	r18, 0x042E	; 0x80042e <_ZN7TwoWire14txBufferLengthE>
    1cc8:	20 32       	cpi	r18, 0x20	; 32
    1cca:	40 f0       	brcs	.+16     	; 0x1cdc <_ZN7TwoWire5writeEh+0x2c>
    1ccc:	21 e0       	ldi	r18, 0x01	; 1
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	33 83       	std	Z+3, r19	; 0x03
    1cd4:	22 83       	std	Z+2, r18	; 0x02
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	15 c0       	rjmp	.+42     	; 0x1d06 <_ZN7TwoWire5writeEh+0x56>
    1cdc:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZN7TwoWire13txBufferIndexE>
    1ce0:	e8 2f       	mov	r30, r24
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	e0 5d       	subi	r30, 0xD0	; 208
    1ce6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ce8:	99 81       	ldd	r25, Y+1	; 0x01
    1cea:	90 83       	st	Z, r25
    1cec:	8f 5f       	subi	r24, 0xFF	; 255
    1cee:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <_ZN7TwoWire13txBufferIndexE>
    1cf2:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <_ZN7TwoWire14txBufferLengthE>
    1cf6:	05 c0       	rjmp	.+10     	; 0x1d02 <_ZN7TwoWire5writeEh+0x52>
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	0e 94 77 0f 	call	0x1eee	; 0x1eee <twi_transmit>
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0f 90       	pop	r0
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	08 95       	ret

00001d0e <_ZN7TwoWireC1Ev>:
    1d0e:	fc 01       	movw	r30, r24
    1d10:	13 82       	std	Z+3, r1	; 0x03
    1d12:	12 82       	std	Z+2, r1	; 0x02
    1d14:	88 ee       	ldi	r24, 0xE8	; 232
    1d16:	93 e0       	ldi	r25, 0x03	; 3
    1d18:	a0 e0       	ldi	r26, 0x00	; 0
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	84 83       	std	Z+4, r24	; 0x04
    1d1e:	95 83       	std	Z+5, r25	; 0x05
    1d20:	a6 83       	std	Z+6, r26	; 0x06
    1d22:	b7 83       	std	Z+7, r27	; 0x07
    1d24:	82 e4       	ldi	r24, 0x42	; 66
    1d26:	92 e0       	ldi	r25, 0x02	; 2
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	08 95       	ret

00001d2e <_ZN7TwoWire5beginEv>:
    1d2e:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <_ZN7TwoWire13rxBufferIndexE>
    1d32:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <_ZN7TwoWire14rxBufferLengthE>
    1d36:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZN7TwoWire13txBufferIndexE>
    1d3a:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <_ZN7TwoWire14txBufferLengthE>
    1d3e:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <twi_init>
    1d42:	8f e1       	ldi	r24, 0x1F	; 31
    1d44:	9e e0       	ldi	r25, 0x0E	; 14
    1d46:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <twi_attachSlaveTxEvent>
    1d4a:	85 ef       	ldi	r24, 0xF5	; 245
    1d4c:	9d e0       	ldi	r25, 0x0D	; 13
    1d4e:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <twi_attachSlaveRxEvent>

00001d52 <_ZN7TwoWire8setClockEm>:
    1d52:	cb 01       	movw	r24, r22
    1d54:	ba 01       	movw	r22, r20
    1d56:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <twi_setFrequency>

00001d5a <_ZN7TwoWire17beginTransmissionEh>:
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <_ZN7TwoWire12transmittingE>
    1d60:	60 93 50 04 	sts	0x0450, r22	; 0x800450 <_ZN7TwoWire9txAddressE>
    1d64:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZN7TwoWire13txBufferIndexE>
    1d68:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <_ZN7TwoWire14txBufferLengthE>
    1d6c:	08 95       	ret

00001d6e <_ZN7TwoWire15endTransmissionEh>:
    1d6e:	0f 93       	push	r16
    1d70:	06 2f       	mov	r16, r22
    1d72:	21 e0       	ldi	r18, 0x01	; 1
    1d74:	40 91 2e 04 	lds	r20, 0x042E	; 0x80042e <_ZN7TwoWire14txBufferLengthE>
    1d78:	60 e3       	ldi	r22, 0x30	; 48
    1d7a:	74 e0       	ldi	r23, 0x04	; 4
    1d7c:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <_ZN7TwoWire9txAddressE>
    1d80:	0e 94 ae 10 	call	0x215c	; 0x215c <twi_writeTo>
    1d84:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZN7TwoWire13txBufferIndexE>
    1d88:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <_ZN7TwoWire14txBufferLengthE>
    1d8c:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <_ZN7TwoWire12transmittingE>
    1d90:	0f 91       	pop	r16
    1d92:	08 95       	ret

00001d94 <_ZN7TwoWire11requestFromEhhmhh>:
    1d94:	4f 92       	push	r4
    1d96:	5f 92       	push	r5
    1d98:	6f 92       	push	r6
    1d9a:	7f 92       	push	r7
    1d9c:	af 92       	push	r10
    1d9e:	bf 92       	push	r11
    1da0:	cf 92       	push	r12
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	5c 01       	movw	r10, r24
    1db0:	f6 2e       	mov	r15, r22
    1db2:	d4 2f       	mov	r29, r20
    1db4:	28 01       	movw	r4, r16
    1db6:	39 01       	movw	r6, r18
    1db8:	ee 20       	and	r14, r14
    1dba:	21 f1       	breq	.+72     	; 0x1e04 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1dbc:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <_ZN7TwoWire17beginTransmissionEh>
    1dc0:	ce 2d       	mov	r28, r14
    1dc2:	c4 30       	cpi	r28, 0x04	; 4
    1dc4:	08 f0       	brcs	.+2      	; 0x1dc8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1dc6:	c3 e0       	ldi	r28, 0x03	; 3
    1dc8:	c1 50       	subi	r28, 0x01	; 1
    1dca:	c0 f0       	brcs	.+48     	; 0x1dfc <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1dcc:	28 e0       	ldi	r18, 0x08	; 8
    1dce:	c2 9f       	mul	r28, r18
    1dd0:	c0 01       	movw	r24, r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	a3 01       	movw	r20, r6
    1dd6:	92 01       	movw	r18, r4
    1dd8:	04 c0       	rjmp	.+8      	; 0x1de2 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1dda:	56 95       	lsr	r21
    1ddc:	47 95       	ror	r20
    1dde:	37 95       	ror	r19
    1de0:	27 95       	ror	r18
    1de2:	8a 95       	dec	r24
    1de4:	d2 f7       	brpl	.-12     	; 0x1dda <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1de6:	ca 01       	movw	r24, r20
    1de8:	b9 01       	movw	r22, r18
    1dea:	d5 01       	movw	r26, r10
    1dec:	ed 91       	ld	r30, X+
    1dee:	fc 91       	ld	r31, X
    1df0:	01 90       	ld	r0, Z+
    1df2:	f0 81       	ld	r31, Z
    1df4:	e0 2d       	mov	r30, r0
    1df6:	c5 01       	movw	r24, r10
    1df8:	09 95       	icall
    1dfa:	e6 cf       	rjmp	.-52     	; 0x1dc8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	c5 01       	movw	r24, r10
    1e00:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <_ZN7TwoWire15endTransmissionEh>
    1e04:	4d 2f       	mov	r20, r29
    1e06:	d1 32       	cpi	r29, 0x21	; 33
    1e08:	08 f0       	brcs	.+2      	; 0x1e0c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1e0a:	40 e2       	ldi	r20, 0x20	; 32
    1e0c:	2c 2d       	mov	r18, r12
    1e0e:	63 e5       	ldi	r22, 0x53	; 83
    1e10:	74 e0       	ldi	r23, 0x04	; 4
    1e12:	8f 2d       	mov	r24, r15
    1e14:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <twi_readFrom>
    1e18:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <_ZN7TwoWire13rxBufferIndexE>
    1e1c:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <_ZN7TwoWire14rxBufferLengthE>
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	cf 90       	pop	r12
    1e2e:	bf 90       	pop	r11
    1e30:	af 90       	pop	r10
    1e32:	7f 90       	pop	r7
    1e34:	6f 90       	pop	r6
    1e36:	5f 90       	pop	r5
    1e38:	4f 90       	pop	r4
    1e3a:	08 95       	ret

00001e3c <_ZN7TwoWire11requestFromEhhh>:
    1e3c:	cf 92       	push	r12
    1e3e:	ef 92       	push	r14
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	c2 2e       	mov	r12, r18
    1e46:	e1 2c       	mov	r14, r1
    1e48:	00 e0       	ldi	r16, 0x00	; 0
    1e4a:	10 e0       	ldi	r17, 0x00	; 0
    1e4c:	98 01       	movw	r18, r16
    1e4e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <_ZN7TwoWire11requestFromEhhmhh>
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	ef 90       	pop	r14
    1e58:	cf 90       	pop	r12
    1e5a:	08 95       	ret

00001e5c <_ZN7TwoWire11requestFromEhh>:
    1e5c:	21 e0       	ldi	r18, 0x01	; 1
    1e5e:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <_ZN7TwoWire11requestFromEhhh>

00001e62 <_ZN7TwoWire15endTransmissionEv>:
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <_ZN7TwoWire15endTransmissionEh>

00001e68 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1e68:	8d e1       	ldi	r24, 0x1D	; 29
    1e6a:	94 e0       	ldi	r25, 0x04	; 4
    1e6c:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <_ZN7TwoWireC1Ev>

00001e70 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    1e70:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <twi_state>
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_sendStop>
    1e7a:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <twi_inRepStart>
    1e7e:	61 e0       	ldi	r22, 0x01	; 1
    1e80:	82 e1       	ldi	r24, 0x12	; 18
    1e82:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <digitalWrite>
    1e86:	61 e0       	ldi	r22, 0x01	; 1
    1e88:	83 e1       	ldi	r24, 0x13	; 19
    1e8a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <digitalWrite>
    1e8e:	e9 eb       	ldi	r30, 0xB9	; 185
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	8e 7f       	andi	r24, 0xFE	; 254
    1e96:	80 83       	st	Z, r24
    1e98:	80 81       	ld	r24, Z
    1e9a:	8d 7f       	andi	r24, 0xFD	; 253
    1e9c:	80 83       	st	Z, r24
    1e9e:	88 e4       	ldi	r24, 0x48	; 72
    1ea0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1ea4:	85 e4       	ldi	r24, 0x45	; 69
    1ea6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1eaa:	08 95       	ret

00001eac <twi_disable>:
    1eac:	ec eb       	ldi	r30, 0xBC	; 188
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8a 7b       	andi	r24, 0xBA	; 186
    1eb4:	80 83       	st	Z, r24
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	82 e1       	ldi	r24, 0x12	; 18
    1eba:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <digitalWrite>
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	83 e1       	ldi	r24, 0x13	; 19
    1ec2:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <digitalWrite>

00001ec6 <twi_setFrequency>:
    1ec6:	9b 01       	movw	r18, r22
    1ec8:	ac 01       	movw	r20, r24
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	74 e2       	ldi	r23, 0x24	; 36
    1ece:	84 ef       	ldi	r24, 0xF4	; 244
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 0d 13 	call	0x261a	; 0x261a <__udivmodsi4>
    1ed6:	da 01       	movw	r26, r20
    1ed8:	c9 01       	movw	r24, r18
    1eda:	40 97       	sbiw	r24, 0x10	; 16
    1edc:	a1 09       	sbc	r26, r1
    1ede:	b1 09       	sbc	r27, r1
    1ee0:	b6 95       	lsr	r27
    1ee2:	a7 95       	ror	r26
    1ee4:	97 95       	ror	r25
    1ee6:	87 95       	ror	r24
    1ee8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1eec:	08 95       	ret

00001eee <twi_transmit>:
    1eee:	40 91 95 04 	lds	r20, 0x0495	; 0x800495 <twi_txBufferLength>
    1ef2:	26 2f       	mov	r18, r22
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	24 0f       	add	r18, r20
    1ef8:	31 1d       	adc	r19, r1
    1efa:	21 32       	cpi	r18, 0x21	; 33
    1efc:	31 05       	cpc	r19, r1
    1efe:	dc f4       	brge	.+54     	; 0x1f36 <twi_transmit+0x48>
    1f00:	20 91 e6 04 	lds	r18, 0x04E6	; 0x8004e6 <twi_state>
    1f04:	24 30       	cpi	r18, 0x04	; 4
    1f06:	c9 f4       	brne	.+50     	; 0x1f3a <twi_transmit+0x4c>
    1f08:	fc 01       	movw	r30, r24
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	86 17       	cp	r24, r22
    1f10:	58 f4       	brcc	.+22     	; 0x1f28 <twi_transmit+0x3a>
    1f12:	30 91 95 04 	lds	r19, 0x0495	; 0x800495 <twi_txBufferLength>
    1f16:	21 91       	ld	r18, Z+
    1f18:	dc 01       	movw	r26, r24
    1f1a:	a9 56       	subi	r26, 0x69	; 105
    1f1c:	bb 4f       	sbci	r27, 0xFB	; 251
    1f1e:	a3 0f       	add	r26, r19
    1f20:	b1 1d       	adc	r27, r1
    1f22:	2c 93       	st	X, r18
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	f3 cf       	rjmp	.-26     	; 0x1f0e <twi_transmit+0x20>
    1f28:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <twi_txBufferLength>
    1f2c:	68 0f       	add	r22, r24
    1f2e:	60 93 95 04 	sts	0x0495, r22	; 0x800495 <twi_txBufferLength>
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	08 95       	ret
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	08 95       	ret
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	08 95       	ret

00001f3e <twi_attachSlaveRxEvent>:
    1f3e:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <twi_onSlaveReceive+0x1>
    1f42:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <twi_onSlaveReceive>
    1f46:	08 95       	ret

00001f48 <twi_attachSlaveTxEvent>:
    1f48:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <twi_onSlaveTransmit+0x1>
    1f4c:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <twi_onSlaveTransmit>
    1f50:	08 95       	ret

00001f52 <twi_releaseBus>:
    1f52:	85 ec       	ldi	r24, 0xC5	; 197
    1f54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1f58:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <twi_state>
    1f5c:	08 95       	ret

00001f5e <twi_handleTimeout>:
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	91 e0       	ldi	r25, 0x01	; 1
    1f64:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <twi_timed_out_flag>
    1f68:	88 23       	and	r24, r24
    1f6a:	61 f0       	breq	.+24     	; 0x1f84 <twi_handleTimeout+0x26>
    1f6c:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1f70:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    1f74:	0e 94 56 0f 	call	0x1eac	; 0x1eac <twi_disable>
    1f78:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <twi_init>
    1f7c:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    1f80:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	08 95       	ret

00001f8a <twi_readFrom>:
    1f8a:	4f 92       	push	r4
    1f8c:	5f 92       	push	r5
    1f8e:	6f 92       	push	r6
    1f90:	7f 92       	push	r7
    1f92:	8f 92       	push	r8
    1f94:	9f 92       	push	r9
    1f96:	af 92       	push	r10
    1f98:	bf 92       	push	r11
    1f9a:	cf 92       	push	r12
    1f9c:	df 92       	push	r13
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	f8 2e       	mov	r15, r24
    1fac:	16 2f       	mov	r17, r22
    1fae:	07 2f       	mov	r16, r23
    1fb0:	c4 2f       	mov	r28, r20
    1fb2:	e2 2e       	mov	r14, r18
    1fb4:	41 32       	cpi	r20, 0x21	; 33
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <twi_readFrom+0x30>
    1fb8:	be c0       	rjmp	.+380    	; 0x2136 <twi_readFrom+0x1ac>
    1fba:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <micros>
    1fbe:	4b 01       	movw	r8, r22
    1fc0:	5c 01       	movw	r10, r24
    1fc2:	d0 91 e6 04 	lds	r29, 0x04E6	; 0x8004e6 <twi_state>
    1fc6:	dd 23       	and	r29, r29
    1fc8:	31 f1       	breq	.+76     	; 0x2016 <twi_readFrom+0x8c>
    1fca:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <twi_timeout_us>
    1fce:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    1fd2:	a0 91 e1 04 	lds	r26, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    1fd6:	b0 91 e2 04 	lds	r27, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    1fda:	89 2b       	or	r24, r25
    1fdc:	8a 2b       	or	r24, r26
    1fde:	8b 2b       	or	r24, r27
    1fe0:	81 f3       	breq	.-32     	; 0x1fc2 <twi_readFrom+0x38>
    1fe2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <micros>
    1fe6:	40 90 df 04 	lds	r4, 0x04DF	; 0x8004df <twi_timeout_us>
    1fea:	50 90 e0 04 	lds	r5, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    1fee:	60 90 e1 04 	lds	r6, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    1ff2:	70 90 e2 04 	lds	r7, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	88 19       	sub	r24, r8
    1ffc:	99 09       	sbc	r25, r9
    1ffe:	aa 09       	sbc	r26, r10
    2000:	bb 09       	sbc	r27, r11
    2002:	48 16       	cp	r4, r24
    2004:	59 06       	cpc	r5, r25
    2006:	6a 06       	cpc	r6, r26
    2008:	7b 06       	cpc	r7, r27
    200a:	d8 f6       	brcc	.-74     	; 0x1fc2 <twi_readFrom+0x38>
    200c:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <twi_do_reset_on_timeout>
    2010:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <twi_handleTimeout>
    2014:	90 c0       	rjmp	.+288    	; 0x2136 <twi_readFrom+0x1ac>
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <twi_state>
    201c:	e0 92 e4 04 	sts	0x04E4, r14	; 0x8004e4 <twi_sendStop>
    2020:	9f ef       	ldi	r25, 0xFF	; 255
    2022:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <twi_error>
    2026:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <twi_masterBufferIndex>
    202a:	9c 0f       	add	r25, r28
    202c:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <twi_masterBufferLength>
    2030:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <twi_slarw>
    2034:	90 91 e5 04 	lds	r25, 0x04E5	; 0x8004e5 <twi_slarw>
    2038:	8f 2d       	mov	r24, r15
    203a:	88 0f       	add	r24, r24
    203c:	89 2b       	or	r24, r25
    203e:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <twi_slarw>
    2042:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_inRepStart>
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	89 f5       	brne	.+98     	; 0x20ac <twi_readFrom+0x122>
    204a:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <twi_inRepStart>
    204e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <micros>
    2052:	6b 01       	movw	r12, r22
    2054:	7c 01       	movw	r14, r24
    2056:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <twi_slarw>
    205a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    205e:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <twi_timeout_us>
    2062:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    2066:	a0 91 e1 04 	lds	r26, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    206a:	b0 91 e2 04 	lds	r27, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    206e:	89 2b       	or	r24, r25
    2070:	8a 2b       	or	r24, r26
    2072:	8b 2b       	or	r24, r27
    2074:	a9 f0       	breq	.+42     	; 0x20a0 <twi_readFrom+0x116>
    2076:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <micros>
    207a:	80 90 df 04 	lds	r8, 0x04DF	; 0x8004df <twi_timeout_us>
    207e:	90 90 e0 04 	lds	r9, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    2082:	a0 90 e1 04 	lds	r10, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    2086:	b0 90 e2 04 	lds	r11, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	8c 19       	sub	r24, r12
    2090:	9d 09       	sbc	r25, r13
    2092:	ae 09       	sbc	r26, r14
    2094:	bf 09       	sbc	r27, r15
    2096:	88 16       	cp	r8, r24
    2098:	99 06       	cpc	r9, r25
    209a:	aa 06       	cpc	r10, r26
    209c:	bb 06       	cpc	r11, r27
    209e:	90 f1       	brcs	.+100    	; 0x2104 <twi_readFrom+0x17a>
    20a0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20a4:	83 fd       	sbrc	r24, 3
    20a6:	d7 cf       	rjmp	.-82     	; 0x2056 <twi_readFrom+0xcc>
    20a8:	85 ec       	ldi	r24, 0xC5	; 197
    20aa:	01 c0       	rjmp	.+2      	; 0x20ae <twi_readFrom+0x124>
    20ac:	85 ee       	ldi	r24, 0xE5	; 229
    20ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    20b2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <micros>
    20b6:	6b 01       	movw	r12, r22
    20b8:	7c 01       	movw	r14, r24
    20ba:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <twi_state>
    20be:	81 30       	cpi	r24, 0x01	; 1
    20c0:	31 f5       	brne	.+76     	; 0x210e <twi_readFrom+0x184>
    20c2:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <twi_timeout_us>
    20c6:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    20ca:	a0 91 e1 04 	lds	r26, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    20ce:	b0 91 e2 04 	lds	r27, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    20d2:	89 2b       	or	r24, r25
    20d4:	8a 2b       	or	r24, r26
    20d6:	8b 2b       	or	r24, r27
    20d8:	81 f3       	breq	.-32     	; 0x20ba <twi_readFrom+0x130>
    20da:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <micros>
    20de:	80 90 df 04 	lds	r8, 0x04DF	; 0x8004df <twi_timeout_us>
    20e2:	90 90 e0 04 	lds	r9, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    20e6:	a0 90 e1 04 	lds	r10, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    20ea:	b0 90 e2 04 	lds	r11, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	8c 19       	sub	r24, r12
    20f4:	9d 09       	sbc	r25, r13
    20f6:	ae 09       	sbc	r26, r14
    20f8:	bf 09       	sbc	r27, r15
    20fa:	88 16       	cp	r8, r24
    20fc:	99 06       	cpc	r9, r25
    20fe:	aa 06       	cpc	r10, r26
    2100:	bb 06       	cpc	r11, r27
    2102:	d8 f6       	brcc	.-74     	; 0x20ba <twi_readFrom+0x130>
    2104:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <twi_do_reset_on_timeout>
    2108:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <twi_handleTimeout>
    210c:	15 c0       	rjmp	.+42     	; 0x2138 <twi_readFrom+0x1ae>
    210e:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <twi_masterBufferIndex>
    2112:	8c 17       	cp	r24, r28
    2114:	10 f4       	brcc	.+4      	; 0x211a <twi_readFrom+0x190>
    2116:	c0 91 b8 04 	lds	r28, 0x04B8	; 0x8004b8 <twi_masterBufferIndex>
    211a:	a9 eb       	ldi	r26, 0xB9	; 185
    211c:	b4 e0       	ldi	r27, 0x04	; 4
    211e:	91 2f       	mov	r25, r17
    2120:	e1 2f       	mov	r30, r17
    2122:	f0 2f       	mov	r31, r16
    2124:	8e 2f       	mov	r24, r30
    2126:	89 1b       	sub	r24, r25
    2128:	8c 17       	cp	r24, r28
    212a:	18 f4       	brcc	.+6      	; 0x2132 <twi_readFrom+0x1a8>
    212c:	8d 91       	ld	r24, X+
    212e:	81 93       	st	Z+, r24
    2130:	f9 cf       	rjmp	.-14     	; 0x2124 <twi_readFrom+0x19a>
    2132:	dc 2f       	mov	r29, r28
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <twi_readFrom+0x1ae>
    2136:	d0 e0       	ldi	r29, 0x00	; 0
    2138:	8d 2f       	mov	r24, r29
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	1f 91       	pop	r17
    2140:	0f 91       	pop	r16
    2142:	ff 90       	pop	r15
    2144:	ef 90       	pop	r14
    2146:	df 90       	pop	r13
    2148:	cf 90       	pop	r12
    214a:	bf 90       	pop	r11
    214c:	af 90       	pop	r10
    214e:	9f 90       	pop	r9
    2150:	8f 90       	pop	r8
    2152:	7f 90       	pop	r7
    2154:	6f 90       	pop	r6
    2156:	5f 90       	pop	r5
    2158:	4f 90       	pop	r4
    215a:	08 95       	ret

0000215c <twi_writeTo>:
    215c:	4f 92       	push	r4
    215e:	5f 92       	push	r5
    2160:	6f 92       	push	r6
    2162:	7f 92       	push	r7
    2164:	8f 92       	push	r8
    2166:	9f 92       	push	r9
    2168:	af 92       	push	r10
    216a:	bf 92       	push	r11
    216c:	cf 92       	push	r12
    216e:	df 92       	push	r13
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	41 32       	cpi	r20, 0x21	; 33
    217e:	08 f0       	brcs	.+2      	; 0x2182 <twi_writeTo+0x26>
    2180:	c6 c0       	rjmp	.+396    	; 0x230e <twi_writeTo+0x1b2>
    2182:	12 2f       	mov	r17, r18
    2184:	f4 2e       	mov	r15, r20
    2186:	d7 2e       	mov	r13, r23
    2188:	e6 2e       	mov	r14, r22
    218a:	d8 2f       	mov	r29, r24
    218c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <micros>
    2190:	4b 01       	movw	r8, r22
    2192:	5c 01       	movw	r10, r24
    2194:	c0 91 e6 04 	lds	r28, 0x04E6	; 0x8004e6 <twi_state>
    2198:	cc 23       	and	r28, r28
    219a:	11 f1       	breq	.+68     	; 0x21e0 <twi_writeTo+0x84>
    219c:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <twi_timeout_us>
    21a0:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    21a4:	a0 91 e1 04 	lds	r26, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    21a8:	b0 91 e2 04 	lds	r27, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    21ac:	89 2b       	or	r24, r25
    21ae:	8a 2b       	or	r24, r26
    21b0:	8b 2b       	or	r24, r27
    21b2:	81 f3       	breq	.-32     	; 0x2194 <twi_writeTo+0x38>
    21b4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <micros>
    21b8:	40 90 df 04 	lds	r4, 0x04DF	; 0x8004df <twi_timeout_us>
    21bc:	50 90 e0 04 	lds	r5, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    21c0:	60 90 e1 04 	lds	r6, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    21c4:	70 90 e2 04 	lds	r7, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	88 19       	sub	r24, r8
    21ce:	99 09       	sbc	r25, r9
    21d0:	aa 09       	sbc	r26, r10
    21d2:	bb 09       	sbc	r27, r11
    21d4:	48 16       	cp	r4, r24
    21d6:	59 06       	cpc	r5, r25
    21d8:	6a 06       	cpc	r6, r26
    21da:	7b 06       	cpc	r7, r27
    21dc:	d8 f6       	brcc	.-74     	; 0x2194 <twi_writeTo+0x38>
    21de:	83 c0       	rjmp	.+262    	; 0x22e6 <twi_writeTo+0x18a>
    21e0:	82 e0       	ldi	r24, 0x02	; 2
    21e2:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <twi_state>
    21e6:	00 93 e4 04 	sts	0x04E4, r16	; 0x8004e4 <twi_sendStop>
    21ea:	8f ef       	ldi	r24, 0xFF	; 255
    21ec:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <twi_error>
    21f0:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <twi_masterBufferIndex>
    21f4:	f0 92 b7 04 	sts	0x04B7, r15	; 0x8004b7 <twi_masterBufferLength>
    21f8:	9e 2d       	mov	r25, r14
    21fa:	a9 eb       	ldi	r26, 0xB9	; 185
    21fc:	b4 e0       	ldi	r27, 0x04	; 4
    21fe:	ee 2d       	mov	r30, r14
    2200:	fd 2d       	mov	r31, r13
    2202:	8e 2f       	mov	r24, r30
    2204:	89 1b       	sub	r24, r25
    2206:	8f 15       	cp	r24, r15
    2208:	18 f4       	brcc	.+6      	; 0x2210 <twi_writeTo+0xb4>
    220a:	81 91       	ld	r24, Z+
    220c:	8d 93       	st	X+, r24
    220e:	f9 cf       	rjmp	.-14     	; 0x2202 <twi_writeTo+0xa6>
    2210:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <twi_slarw>
    2214:	90 91 e5 04 	lds	r25, 0x04E5	; 0x8004e5 <twi_slarw>
    2218:	dd 0f       	add	r29, r29
    221a:	d9 2b       	or	r29, r25
    221c:	d0 93 e5 04 	sts	0x04E5, r29	; 0x8004e5 <twi_slarw>
    2220:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_inRepStart>
    2224:	81 30       	cpi	r24, 0x01	; 1
    2226:	89 f5       	brne	.+98     	; 0x228a <twi_writeTo+0x12e>
    2228:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <twi_inRepStart>
    222c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <micros>
    2230:	6b 01       	movw	r12, r22
    2232:	7c 01       	movw	r14, r24
    2234:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <twi_slarw>
    2238:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    223c:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <twi_timeout_us>
    2240:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    2244:	a0 91 e1 04 	lds	r26, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    2248:	b0 91 e2 04 	lds	r27, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    224c:	89 2b       	or	r24, r25
    224e:	8a 2b       	or	r24, r26
    2250:	8b 2b       	or	r24, r27
    2252:	a9 f0       	breq	.+42     	; 0x227e <twi_writeTo+0x122>
    2254:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <micros>
    2258:	80 90 df 04 	lds	r8, 0x04DF	; 0x8004df <twi_timeout_us>
    225c:	90 90 e0 04 	lds	r9, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    2260:	a0 90 e1 04 	lds	r10, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    2264:	b0 90 e2 04 	lds	r11, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	8c 19       	sub	r24, r12
    226e:	9d 09       	sbc	r25, r13
    2270:	ae 09       	sbc	r26, r14
    2272:	bf 09       	sbc	r27, r15
    2274:	88 16       	cp	r8, r24
    2276:	99 06       	cpc	r9, r25
    2278:	aa 06       	cpc	r10, r26
    227a:	bb 06       	cpc	r11, r27
    227c:	a0 f1       	brcs	.+104    	; 0x22e6 <twi_writeTo+0x18a>
    227e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2282:	83 fd       	sbrc	r24, 3
    2284:	d7 cf       	rjmp	.-82     	; 0x2234 <twi_writeTo+0xd8>
    2286:	85 ec       	ldi	r24, 0xC5	; 197
    2288:	01 c0       	rjmp	.+2      	; 0x228c <twi_writeTo+0x130>
    228a:	85 ee       	ldi	r24, 0xE5	; 229
    228c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2290:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <micros>
    2294:	6b 01       	movw	r12, r22
    2296:	7c 01       	movw	r14, r24
    2298:	11 23       	and	r17, r17
    229a:	59 f1       	breq	.+86     	; 0x22f2 <twi_writeTo+0x196>
    229c:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <twi_state>
    22a0:	82 30       	cpi	r24, 0x02	; 2
    22a2:	39 f5       	brne	.+78     	; 0x22f2 <twi_writeTo+0x196>
    22a4:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <twi_timeout_us>
    22a8:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    22ac:	a0 91 e1 04 	lds	r26, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    22b0:	b0 91 e2 04 	lds	r27, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    22b4:	89 2b       	or	r24, r25
    22b6:	8a 2b       	or	r24, r26
    22b8:	8b 2b       	or	r24, r27
    22ba:	71 f3       	breq	.-36     	; 0x2298 <twi_writeTo+0x13c>
    22bc:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <micros>
    22c0:	80 90 df 04 	lds	r8, 0x04DF	; 0x8004df <twi_timeout_us>
    22c4:	90 90 e0 04 	lds	r9, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    22c8:	a0 90 e1 04 	lds	r10, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    22cc:	b0 90 e2 04 	lds	r11, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	8c 19       	sub	r24, r12
    22d6:	9d 09       	sbc	r25, r13
    22d8:	ae 09       	sbc	r26, r14
    22da:	bf 09       	sbc	r27, r15
    22dc:	88 16       	cp	r8, r24
    22de:	99 06       	cpc	r9, r25
    22e0:	aa 06       	cpc	r10, r26
    22e2:	bb 06       	cpc	r11, r27
    22e4:	c8 f6       	brcc	.-78     	; 0x2298 <twi_writeTo+0x13c>
    22e6:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <twi_do_reset_on_timeout>
    22ea:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <twi_handleTimeout>
    22ee:	c5 e0       	ldi	r28, 0x05	; 5
    22f0:	13 c0       	rjmp	.+38     	; 0x2318 <twi_writeTo+0x1bc>
    22f2:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <twi_error>
    22f6:	8f 3f       	cpi	r24, 0xFF	; 255
    22f8:	79 f0       	breq	.+30     	; 0x2318 <twi_writeTo+0x1bc>
    22fa:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <twi_error>
    22fe:	80 32       	cpi	r24, 0x20	; 32
    2300:	41 f0       	breq	.+16     	; 0x2312 <twi_writeTo+0x1b6>
    2302:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <twi_error>
    2306:	80 33       	cpi	r24, 0x30	; 48
    2308:	31 f0       	breq	.+12     	; 0x2316 <twi_writeTo+0x1ba>
    230a:	c4 e0       	ldi	r28, 0x04	; 4
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <twi_writeTo+0x1bc>
    230e:	c1 e0       	ldi	r28, 0x01	; 1
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <twi_writeTo+0x1bc>
    2312:	c2 e0       	ldi	r28, 0x02	; 2
    2314:	01 c0       	rjmp	.+2      	; 0x2318 <twi_writeTo+0x1bc>
    2316:	c3 e0       	ldi	r28, 0x03	; 3
    2318:	8c 2f       	mov	r24, r28
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	ff 90       	pop	r15
    2324:	ef 90       	pop	r14
    2326:	df 90       	pop	r13
    2328:	cf 90       	pop	r12
    232a:	bf 90       	pop	r11
    232c:	af 90       	pop	r10
    232e:	9f 90       	pop	r9
    2330:	8f 90       	pop	r8
    2332:	7f 90       	pop	r7
    2334:	6f 90       	pop	r6
    2336:	5f 90       	pop	r5
    2338:	4f 90       	pop	r4
    233a:	08 95       	ret

0000233c <twi_stop>:
    233c:	85 ed       	ldi	r24, 0xD5	; 213
    233e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2342:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <twi_timeout_us>
    2346:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    234a:	a0 91 e1 04 	lds	r26, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    234e:	b0 91 e2 04 	lds	r27, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    2352:	07 96       	adiw	r24, 0x07	; 7
    2354:	a1 1d       	adc	r26, r1
    2356:	b1 1d       	adc	r27, r1
    2358:	23 e0       	ldi	r18, 0x03	; 3
    235a:	b6 95       	lsr	r27
    235c:	a7 95       	ror	r26
    235e:	97 95       	ror	r25
    2360:	87 95       	ror	r24
    2362:	2a 95       	dec	r18
    2364:	d1 f7       	brne	.-12     	; 0x235a <twi_stop+0x1e>
    2366:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    236a:	24 ff       	sbrs	r18, 4
    236c:	1c c0       	rjmp	.+56     	; 0x23a6 <twi_stop+0x6a>
    236e:	40 91 df 04 	lds	r20, 0x04DF	; 0x8004df <twi_timeout_us>
    2372:	50 91 e0 04 	lds	r21, 0x04E0	; 0x8004e0 <twi_timeout_us+0x1>
    2376:	60 91 e1 04 	lds	r22, 0x04E1	; 0x8004e1 <twi_timeout_us+0x2>
    237a:	70 91 e2 04 	lds	r23, 0x04E2	; 0x8004e2 <twi_timeout_us+0x3>
    237e:	45 2b       	or	r20, r21
    2380:	46 2b       	or	r20, r22
    2382:	47 2b       	or	r20, r23
    2384:	81 f3       	breq	.-32     	; 0x2366 <twi_stop+0x2a>
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	a1 05       	cpc	r26, r1
    238a:	b1 05       	cpc	r27, r1
    238c:	41 f0       	breq	.+16     	; 0x239e <twi_stop+0x62>
    238e:	25 e3       	ldi	r18, 0x35	; 53
    2390:	2a 95       	dec	r18
    2392:	f1 f7       	brne	.-4      	; 0x2390 <twi_stop+0x54>
    2394:	00 00       	nop
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	a1 09       	sbc	r26, r1
    239a:	b1 09       	sbc	r27, r1
    239c:	e4 cf       	rjmp	.-56     	; 0x2366 <twi_stop+0x2a>
    239e:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <twi_do_reset_on_timeout>
    23a2:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <twi_handleTimeout>
    23a6:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <twi_state>
    23aa:	08 95       	ret

000023ac <__vector_24>:

ISR(TWI_vect)
{
    23ac:	1f 92       	push	r1
    23ae:	0f 92       	push	r0
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	0f 92       	push	r0
    23b4:	11 24       	eor	r1, r1
    23b6:	2f 93       	push	r18
    23b8:	3f 93       	push	r19
    23ba:	4f 93       	push	r20
    23bc:	5f 93       	push	r21
    23be:	6f 93       	push	r22
    23c0:	7f 93       	push	r23
    23c2:	8f 93       	push	r24
    23c4:	9f 93       	push	r25
    23c6:	af 93       	push	r26
    23c8:	bf 93       	push	r27
    23ca:	ef 93       	push	r30
    23cc:	ff 93       	push	r31
  switch(TW_STATUS){
    23ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    23d2:	88 7f       	andi	r24, 0xF8	; 248
    23d4:	80 36       	cpi	r24, 0x60	; 96
    23d6:	09 f4       	brne	.+2      	; 0x23da <__vector_24+0x2e>
    23d8:	9e c0       	rjmp	.+316    	; 0x2516 <__vector_24+0x16a>
    23da:	78 f5       	brcc	.+94     	; 0x243a <__vector_24+0x8e>
    23dc:	88 32       	cpi	r24, 0x28	; 40
    23de:	09 f4       	brne	.+2      	; 0x23e2 <__vector_24+0x36>
    23e0:	5d c0       	rjmp	.+186    	; 0x249c <__vector_24+0xf0>
    23e2:	90 f4       	brcc	.+36     	; 0x2408 <__vector_24+0x5c>
    23e4:	80 31       	cpi	r24, 0x10	; 16
    23e6:	09 f4       	brne	.+2      	; 0x23ea <__vector_24+0x3e>
    23e8:	56 c0       	rjmp	.+172    	; 0x2496 <__vector_24+0xea>
    23ea:	38 f4       	brcc	.+14     	; 0x23fa <__vector_24+0x4e>
    23ec:	88 23       	and	r24, r24
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <__vector_24+0x46>
    23f0:	f5 c0       	rjmp	.+490    	; 0x25dc <__vector_24+0x230>
    23f2:	88 30       	cpi	r24, 0x08	; 8
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <__vector_24+0x4c>
    23f6:	4f c0       	rjmp	.+158    	; 0x2496 <__vector_24+0xea>
    23f8:	f5 c0       	rjmp	.+490    	; 0x25e4 <__vector_24+0x238>
    23fa:	88 31       	cpi	r24, 0x18	; 24
    23fc:	09 f4       	brne	.+2      	; 0x2400 <__vector_24+0x54>
    23fe:	4e c0       	rjmp	.+156    	; 0x249c <__vector_24+0xf0>
    2400:	80 32       	cpi	r24, 0x20	; 32
    2402:	09 f4       	brne	.+2      	; 0x2406 <__vector_24+0x5a>
    2404:	5f c0       	rjmp	.+190    	; 0x24c4 <__vector_24+0x118>
    2406:	ee c0       	rjmp	.+476    	; 0x25e4 <__vector_24+0x238>
    2408:	80 34       	cpi	r24, 0x40	; 64
    240a:	09 f4       	brne	.+2      	; 0x240e <__vector_24+0x62>
    240c:	6a c0       	rjmp	.+212    	; 0x24e2 <__vector_24+0x136>
    240e:	58 f4       	brcc	.+22     	; 0x2426 <__vector_24+0x7a>
    2410:	80 33       	cpi	r24, 0x30	; 48
    2412:	09 f4       	brne	.+2      	; 0x2416 <__vector_24+0x6a>
    2414:	57 c0       	rjmp	.+174    	; 0x24c4 <__vector_24+0x118>
    2416:	88 33       	cpi	r24, 0x38	; 56
    2418:	09 f0       	breq	.+2      	; 0x241c <__vector_24+0x70>
    241a:	e4 c0       	rjmp	.+456    	; 0x25e4 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    241c:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <twi_error>
      twi_releaseBus();
    2420:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <twi_releaseBus>
      break;
    2424:	df c0       	rjmp	.+446    	; 0x25e4 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2426:	80 35       	cpi	r24, 0x50	; 80
    2428:	09 f4       	brne	.+2      	; 0x242c <__vector_24+0x80>
    242a:	4f c0       	rjmp	.+158    	; 0x24ca <__vector_24+0x11e>
    242c:	88 35       	cpi	r24, 0x58	; 88
    242e:	09 f4       	brne	.+2      	; 0x2432 <__vector_24+0x86>
    2430:	5d c0       	rjmp	.+186    	; 0x24ec <__vector_24+0x140>
    2432:	88 34       	cpi	r24, 0x48	; 72
    2434:	09 f0       	breq	.+2      	; 0x2438 <__vector_24+0x8c>
    2436:	d6 c0       	rjmp	.+428    	; 0x25e4 <__vector_24+0x238>
    2438:	d3 c0       	rjmp	.+422    	; 0x25e0 <__vector_24+0x234>
    243a:	88 39       	cpi	r24, 0x98	; 152
    243c:	09 f4       	brne	.+2      	; 0x2440 <__vector_24+0x94>
    243e:	c4 c0       	rjmp	.+392    	; 0x25c8 <__vector_24+0x21c>
    2440:	a8 f4       	brcc	.+42     	; 0x246c <__vector_24+0xc0>
    2442:	88 37       	cpi	r24, 0x78	; 120
    2444:	09 f4       	brne	.+2      	; 0x2448 <__vector_24+0x9c>
    2446:	67 c0       	rjmp	.+206    	; 0x2516 <__vector_24+0x16a>
    2448:	38 f4       	brcc	.+14     	; 0x2458 <__vector_24+0xac>
    244a:	88 36       	cpi	r24, 0x68	; 104
    244c:	09 f4       	brne	.+2      	; 0x2450 <__vector_24+0xa4>
    244e:	63 c0       	rjmp	.+198    	; 0x2516 <__vector_24+0x16a>
    2450:	80 37       	cpi	r24, 0x70	; 112
    2452:	09 f4       	brne	.+2      	; 0x2456 <__vector_24+0xaa>
    2454:	60 c0       	rjmp	.+192    	; 0x2516 <__vector_24+0x16a>
    2456:	c6 c0       	rjmp	.+396    	; 0x25e4 <__vector_24+0x238>
    2458:	88 38       	cpi	r24, 0x88	; 136
    245a:	09 f4       	brne	.+2      	; 0x245e <__vector_24+0xb2>
    245c:	b5 c0       	rjmp	.+362    	; 0x25c8 <__vector_24+0x21c>
    245e:	80 39       	cpi	r24, 0x90	; 144
    2460:	09 f4       	brne	.+2      	; 0x2464 <__vector_24+0xb8>
    2462:	5f c0       	rjmp	.+190    	; 0x2522 <__vector_24+0x176>
    2464:	80 38       	cpi	r24, 0x80	; 128
    2466:	09 f0       	breq	.+2      	; 0x246a <__vector_24+0xbe>
    2468:	bd c0       	rjmp	.+378    	; 0x25e4 <__vector_24+0x238>
    246a:	5b c0       	rjmp	.+182    	; 0x2522 <__vector_24+0x176>
    246c:	80 3b       	cpi	r24, 0xB0	; 176
    246e:	09 f4       	brne	.+2      	; 0x2472 <__vector_24+0xc6>
    2470:	83 c0       	rjmp	.+262    	; 0x2578 <__vector_24+0x1cc>
    2472:	38 f4       	brcc	.+14     	; 0x2482 <__vector_24+0xd6>
    2474:	80 3a       	cpi	r24, 0xA0	; 160
    2476:	09 f4       	brne	.+2      	; 0x247a <__vector_24+0xce>
    2478:	66 c0       	rjmp	.+204    	; 0x2546 <__vector_24+0x19a>
    247a:	88 3a       	cpi	r24, 0xA8	; 168
    247c:	09 f4       	brne	.+2      	; 0x2480 <__vector_24+0xd4>
    247e:	7c c0       	rjmp	.+248    	; 0x2578 <__vector_24+0x1cc>
    2480:	b1 c0       	rjmp	.+354    	; 0x25e4 <__vector_24+0x238>
    2482:	80 3c       	cpi	r24, 0xC0	; 192
    2484:	09 f4       	brne	.+2      	; 0x2488 <__vector_24+0xdc>
    2486:	a4 c0       	rjmp	.+328    	; 0x25d0 <__vector_24+0x224>
    2488:	88 3c       	cpi	r24, 0xC8	; 200
    248a:	09 f4       	brne	.+2      	; 0x248e <__vector_24+0xe2>
    248c:	a1 c0       	rjmp	.+322    	; 0x25d0 <__vector_24+0x224>
    248e:	88 3b       	cpi	r24, 0xB8	; 184
    2490:	09 f4       	brne	.+2      	; 0x2494 <__vector_24+0xe8>
    2492:	87 c0       	rjmp	.+270    	; 0x25a2 <__vector_24+0x1f6>
    2494:	a7 c0       	rjmp	.+334    	; 0x25e4 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2496:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <twi_slarw>
    249a:	10 c0       	rjmp	.+32     	; 0x24bc <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    249c:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <twi_masterBufferIndex>
    24a0:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_masterBufferLength>
    24a4:	98 17       	cp	r25, r24
    24a6:	70 f5       	brcc	.+92     	; 0x2504 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    24a8:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <twi_masterBufferIndex>
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	8e 0f       	add	r24, r30
    24b0:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <twi_masterBufferIndex>
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	e7 54       	subi	r30, 0x47	; 71
    24b8:	fb 4f       	sbci	r31, 0xFB	; 251
    24ba:	80 81       	ld	r24, Z
    24bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    24c0:	85 ec       	ldi	r24, 0xC5	; 197
    24c2:	83 c0       	rjmp	.+262    	; 0x25ca <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    24c4:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <twi_error>
    24c8:	8b c0       	rjmp	.+278    	; 0x25e0 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    24ca:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <twi_masterBufferIndex>
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	8e 0f       	add	r24, r30
    24d2:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <twi_masterBufferIndex>
    24d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	e7 54       	subi	r30, 0x47	; 71
    24de:	fb 4f       	sbci	r31, 0xFB	; 251
    24e0:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    24e2:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <twi_masterBufferIndex>
    24e6:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_masterBufferLength>
    24ea:	6b c0       	rjmp	.+214    	; 0x25c2 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    24ec:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <twi_masterBufferIndex>
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	8e 0f       	add	r24, r30
    24f4:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <twi_masterBufferIndex>
    24f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	e7 54       	subi	r30, 0x47	; 71
    2500:	fb 4f       	sbci	r31, 0xFB	; 251
    2502:	80 83       	st	Z, r24
      if (twi_sendStop){
    2504:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_sendStop>
    2508:	81 11       	cpse	r24, r1
    250a:	6a c0       	rjmp	.+212    	; 0x25e0 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2512:	84 ea       	ldi	r24, 0xA4	; 164
    2514:	5e c0       	rjmp	.+188    	; 0x25d2 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2516:	83 e0       	ldi	r24, 0x03	; 3
    2518:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    251c:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <twi_rxBufferIndex>
    2520:	cf cf       	rjmp	.-98     	; 0x24c0 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2522:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <twi_rxBufferIndex>
    2526:	80 32       	cpi	r24, 0x20	; 32
    2528:	08 f0       	brcs	.+2      	; 0x252c <__vector_24+0x180>
    252a:	4e c0       	rjmp	.+156    	; 0x25c8 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    252c:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <twi_rxBufferIndex>
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	8e 0f       	add	r24, r30
    2534:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <twi_rxBufferIndex>
    2538:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	eb 58       	subi	r30, 0x8B	; 139
    2540:	fb 4f       	sbci	r31, 0xFB	; 251
    2542:	80 83       	st	Z, r24
    2544:	bd cf       	rjmp	.-134    	; 0x24c0 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2546:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    254a:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <twi_rxBufferIndex>
    254e:	80 32       	cpi	r24, 0x20	; 32
    2550:	30 f4       	brcc	.+12     	; 0x255e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2552:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <twi_rxBufferIndex>
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	eb 58       	subi	r30, 0x8B	; 139
    255a:	fb 4f       	sbci	r31, 0xFB	; 251
    255c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    255e:	60 91 74 04 	lds	r22, 0x0474	; 0x800474 <twi_rxBufferIndex>
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	e0 91 d9 04 	lds	r30, 0x04D9	; 0x8004d9 <twi_onSlaveReceive>
    2568:	f0 91 da 04 	lds	r31, 0x04DA	; 0x8004da <twi_onSlaveReceive+0x1>
    256c:	85 e7       	ldi	r24, 0x75	; 117
    256e:	94 e0       	ldi	r25, 0x04	; 4
    2570:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2572:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <twi_rxBufferIndex>
      break;
    2576:	36 c0       	rjmp	.+108    	; 0x25e4 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2578:	84 e0       	ldi	r24, 0x04	; 4
    257a:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    257e:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2582:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2586:	e0 91 db 04 	lds	r30, 0x04DB	; 0x8004db <twi_onSlaveTransmit>
    258a:	f0 91 dc 04 	lds	r31, 0x04DC	; 0x8004dc <twi_onSlaveTransmit+0x1>
    258e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2590:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <twi_txBufferLength>
    2594:	81 11       	cpse	r24, r1
    2596:	05 c0       	rjmp	.+10     	; 0x25a2 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    259e:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    25a2:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <twi_txBufferIndex>
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	8e 0f       	add	r24, r30
    25aa:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <twi_txBufferIndex>
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	e9 56       	subi	r30, 0x69	; 105
    25b2:	fb 4f       	sbci	r31, 0xFB	; 251
    25b4:	80 81       	ld	r24, Z
    25b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    25ba:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <twi_txBufferIndex>
    25be:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <twi_txBufferLength>
    25c2:	98 17       	cp	r25, r24
    25c4:	08 f4       	brcc	.+2      	; 0x25c8 <__vector_24+0x21c>
    25c6:	7c cf       	rjmp	.-264    	; 0x24c0 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    25c8:	85 e8       	ldi	r24, 0x85	; 133
    25ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    25ce:	0a c0       	rjmp	.+20     	; 0x25e4 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    25d0:	85 ec       	ldi	r24, 0xC5	; 197
    25d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    25d6:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <twi_state>
      break;
    25da:	04 c0       	rjmp	.+8      	; 0x25e4 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    25dc:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <twi_error>
      twi_stop();
    25e0:	0e 94 9e 11 	call	0x233c	; 0x233c <twi_stop>
      break;
  }
}
    25e4:	ff 91       	pop	r31
    25e6:	ef 91       	pop	r30
    25e8:	bf 91       	pop	r27
    25ea:	af 91       	pop	r26
    25ec:	9f 91       	pop	r25
    25ee:	8f 91       	pop	r24
    25f0:	7f 91       	pop	r23
    25f2:	6f 91       	pop	r22
    25f4:	5f 91       	pop	r21
    25f6:	4f 91       	pop	r20
    25f8:	3f 91       	pop	r19
    25fa:	2f 91       	pop	r18
    25fc:	0f 90       	pop	r0
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	0f 90       	pop	r0
    2602:	1f 90       	pop	r1
    2604:	18 95       	reti

00002606 <__cmpsf2>:
    2606:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_cmp>
    260a:	08 f4       	brcc	.+2      	; 0x260e <__cmpsf2+0x8>
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	08 95       	ret

00002610 <__unordsf2>:
    2610:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_cmp>
    2614:	88 0b       	sbc	r24, r24
    2616:	99 0b       	sbc	r25, r25
    2618:	08 95       	ret

0000261a <__udivmodsi4>:
    261a:	a1 e2       	ldi	r26, 0x21	; 33
    261c:	1a 2e       	mov	r1, r26
    261e:	aa 1b       	sub	r26, r26
    2620:	bb 1b       	sub	r27, r27
    2622:	fd 01       	movw	r30, r26
    2624:	0d c0       	rjmp	.+26     	; 0x2640 <__udivmodsi4_ep>

00002626 <__udivmodsi4_loop>:
    2626:	aa 1f       	adc	r26, r26
    2628:	bb 1f       	adc	r27, r27
    262a:	ee 1f       	adc	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	a2 17       	cp	r26, r18
    2630:	b3 07       	cpc	r27, r19
    2632:	e4 07       	cpc	r30, r20
    2634:	f5 07       	cpc	r31, r21
    2636:	20 f0       	brcs	.+8      	; 0x2640 <__udivmodsi4_ep>
    2638:	a2 1b       	sub	r26, r18
    263a:	b3 0b       	sbc	r27, r19
    263c:	e4 0b       	sbc	r30, r20
    263e:	f5 0b       	sbc	r31, r21

00002640 <__udivmodsi4_ep>:
    2640:	66 1f       	adc	r22, r22
    2642:	77 1f       	adc	r23, r23
    2644:	88 1f       	adc	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	1a 94       	dec	r1
    264a:	69 f7       	brne	.-38     	; 0x2626 <__udivmodsi4_loop>
    264c:	60 95       	com	r22
    264e:	70 95       	com	r23
    2650:	80 95       	com	r24
    2652:	90 95       	com	r25
    2654:	9b 01       	movw	r18, r22
    2656:	ac 01       	movw	r20, r24
    2658:	bd 01       	movw	r22, r26
    265a:	cf 01       	movw	r24, r30
    265c:	08 95       	ret

0000265e <__tablejump2__>:
    265e:	ee 0f       	add	r30, r30
    2660:	ff 1f       	adc	r31, r31
    2662:	05 90       	lpm	r0, Z+
    2664:	f4 91       	lpm	r31, Z
    2666:	e0 2d       	mov	r30, r0
    2668:	09 94       	ijmp

0000266a <_exit>:
    266a:	f8 94       	cli

0000266c <__stop_program>:
    266c:	ff cf       	rjmp	.-2      	; 0x266c <__stop_program>
