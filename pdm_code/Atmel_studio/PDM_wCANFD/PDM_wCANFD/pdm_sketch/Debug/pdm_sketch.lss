
pdm_sketch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e0  00800100  0000510a  0000519e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000510a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000370  008002e0  008002e0  0000537e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000537e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000053b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007b8  00000000  00000000  000053f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015500  00000000  00000000  00005ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003968  00000000  00000000  0001b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004ecc  00000000  00000000  0001ea10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b8c  00000000  00000000  000238dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000603b  00000000  00000000  00025468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a123  00000000  00000000  0002b4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000790  00000000  00000000  000355c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__dtors_end>
       4:	0c 94 4e 22 	jmp	0x449c	; 0x449c <__vector_1>
       8:	0c 94 75 22 	jmp	0x44ea	; 0x44ea <__vector_2>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__vector_16>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_18>
      4c:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_19>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 3a 25 	jmp	0x4a74	; 0x4a74 <__vector_24>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	73 65       	ori	r23, 0x53	; 83
      6a:	74 20       	and	r7, r4
      6c:	63 61       	ori	r22, 0x13	; 19
      6e:	6c 69       	ori	r22, 0x9C	; 156
      70:	62 72       	andi	r22, 0x22	; 34
      72:	61 74       	andi	r22, 0x41	; 65
      74:	69 6f       	ori	r22, 0xF9	; 249
      76:	6e 00       	.word	0x006e	; ????

00000078 <_ZZN8INA233_S10resetAlarmEvE3__c>:
      78:	72 65 73 65 74 20 61 6c 61 72 6d 00                 reset alarm.

00000084 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_4>:
      84:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     UV WARN LIMIT re
      94:	61 64 62 61 63 6b 3a 20 00                          adback: .

0000009d <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_3>:
      9d:	55 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     UV WARN LIMIT: .

000000ad <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_2>:
      ad:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OV WARN LIMIT re
      bd:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000c6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_1>:
      c6:	4f 56 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OV WARN LIMIT: .

000000d6 <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c_0>:
      d6:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 20 72 65     OC WARN LIMIT re
      e6:	61 64 62 61 63 6b 3a 20 00                          adback: .

000000ef <_ZZN8INA233_S14setAlarmLimitsE19INA233_Alarm_ConfigE3__c>:
      ef:	4f 43 20 57 41 52 4e 20 4c 49 4d 49 54 3a 20 00     OC WARN LIMIT: .

000000ff <digital_pin_to_timer_PGM>:
      ff:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     10f:	00 00 00 00                                         ....

00000113 <digital_pin_to_bit_mask_PGM>:
     113:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     123:	04 08 10 20                                         ... 

00000127 <digital_pin_to_port_PGM>:
     127:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     137:	03 03 03 03                                         ....

0000013b <port_to_output_PGM>:
     13b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000145 <port_to_mode_PGM>:
     145:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000150 <__ctors_start>:
     150:	00 07       	cpc	r16, r16
     152:	d7 0a       	sbc	r13, r23
     154:	4d 21       	and	r20, r13

00000156 <__ctors_end>:
     156:	28 08       	sbc	r2, r8

00000158 <__dtors_end>:
     158:	11 24       	eor	r1, r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	cf ef       	ldi	r28, 0xFF	; 255
     15e:	d8 e0       	ldi	r29, 0x08	; 8
     160:	de bf       	out	0x3e, r29	; 62
     162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
     164:	12 e0       	ldi	r17, 0x02	; 2
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	ea e0       	ldi	r30, 0x0A	; 10
     16c:	f1 e5       	ldi	r31, 0x51	; 81
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x10>
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	a0 3e       	cpi	r26, 0xE0	; 224
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0xc>

0000017a <__do_clear_bss>:
     17a:	26 e0       	ldi	r18, 0x06	; 6
     17c:	a0 ee       	ldi	r26, 0xE0	; 224
     17e:	b2 e0       	ldi	r27, 0x02	; 2
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	a0 35       	cpi	r26, 0x50	; 80
     186:	b2 07       	cpc	r27, r18
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>

0000018a <__do_global_ctors>:
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	cb ea       	ldi	r28, 0xAB	; 171
     18e:	d0 e0       	ldi	r29, 0x00	; 0
     190:	04 c0       	rjmp	.+8      	; 0x19a <__do_global_ctors+0x10>
     192:	21 97       	sbiw	r28, 0x01	; 1
     194:	fe 01       	movw	r30, r28
     196:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__tablejump2__>
     19a:	c8 3a       	cpi	r28, 0xA8	; 168
     19c:	d1 07       	cpc	r29, r17
     19e:	c9 f7       	brne	.-14     	; 0x192 <__do_global_ctors+0x8>
     1a0:	0e 94 05 0b 	call	0x160a	; 0x160a <main>
     1a4:	0c 94 78 28 	jmp	0x50f0	; 0x50f0 <__do_global_dtors>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>:

void INA233_S::getAlarm()
{
    INA233_Data_Package data = receiveData_(0x7C, 1);
    Serial.print("status input: ");
    Serial.println(data.msg[0], BIN);
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	dc 01       	movw	r26, r24
     1b6:	6c 93       	st	X, r22
     1b8:	12 96       	adiw	r26, 0x02	; 2
     1ba:	5c 93       	st	X, r21
     1bc:	4e 93       	st	-X, r20
     1be:	11 97       	sbiw	r26, 0x01	; 1
     1c0:	14 96       	adiw	r26, 0x04	; 4
     1c2:	3c 93       	st	X, r19
     1c4:	2e 93       	st	-X, r18
     1c6:	13 97       	sbiw	r26, 0x03	; 3
     1c8:	2c e0       	ldi	r18, 0x0C	; 12
     1ca:	fe 01       	movw	r30, r28
     1cc:	35 96       	adiw	r30, 0x05	; 5
     1ce:	15 96       	adiw	r26, 0x05	; 5
     1d0:	01 90       	ld	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	2a 95       	dec	r18
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config+0x24>
     1d8:	2a e0       	ldi	r18, 0x0A	; 10
     1da:	fc 01       	movw	r30, r24
     1dc:	71 96       	adiw	r30, 0x11	; 17
     1de:	df 01       	movw	r26, r30
     1e0:	32 2f       	mov	r19, r18
     1e2:	1d 92       	st	X+, r1
     1e4:	3a 95       	dec	r19
     1e6:	e9 f7       	brne	.-6      	; 0x1e2 <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config+0x36>
     1e8:	dc 01       	movw	r26, r24
     1ea:	5b 96       	adiw	r26, 0x1b	; 27
     1ec:	1c 92       	st	X, r1
     1ee:	5b 97       	sbiw	r26, 0x1b	; 27
     1f0:	5c 96       	adiw	r26, 0x1c	; 28
     1f2:	2c 93       	st	X, r18
     1f4:	5c 97       	sbiw	r26, 0x1c	; 28
     1f6:	5d 96       	adiw	r26, 0x1d	; 29
     1f8:	1c 92       	st	X, r1
     1fa:	5d 97       	sbiw	r26, 0x1d	; 29
     1fc:	5e 96       	adiw	r26, 0x1e	; 30
     1fe:	1c 92       	st	X, r1
     200:	5e 97       	sbiw	r26, 0x1e	; 30
     202:	5f 96       	adiw	r26, 0x1f	; 31
     204:	1c 92       	st	X, r1
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <_ZN8INA233_S15transmitCommandEh>:
     20c:	cf 93       	push	r28
     20e:	c6 2f       	mov	r28, r22
     210:	fc 01       	movw	r30, r24
     212:	60 81       	ld	r22, Z
     214:	82 e8       	ldi	r24, 0x82	; 130
     216:	95 e0       	ldi	r25, 0x05	; 5
     218:	0e 94 c6 20 	call	0x418c	; 0x418c <_ZN7TwoWire17beginTransmissionEh>
     21c:	6c 2f       	mov	r22, r28
     21e:	82 e8       	ldi	r24, 0x82	; 130
     220:	95 e0       	ldi	r25, 0x05	; 5
     222:	0e 94 71 20 	call	0x40e2	; 0x40e2 <_ZN7TwoWire5writeEh>
     226:	82 e8       	ldi	r24, 0x82	; 130
     228:	95 e0       	ldi	r25, 0x05	; 5
     22a:	cf 91       	pop	r28
     22c:	0c 94 4a 21 	jmp	0x4294	; 0x4294 <_ZN7TwoWire15endTransmissionEv>

00000230 <_ZN8INA233_S10resetAlarmEv>:
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	ec 01       	movw	r28, r24
     236:	68 e7       	ldi	r22, 0x78	; 120
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	87 ed       	ldi	r24, 0xD7	; 215
     23c:	94 e0       	ldi	r25, 0x04	; 4
     23e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN5Print7printlnEPK19__FlashStringHelper>
     242:	63 e0       	ldi	r22, 0x03	; 3
     244:	ce 01       	movw	r24, r28
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	0c 94 06 01 	jmp	0x20c	; 0x20c <_ZN8INA233_S15transmitCommandEh>

0000024e <_ZN8INA233_S9resetChipEv>:
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	ec 01       	movw	r28, r24
     254:	6f e2       	ldi	r22, 0x2F	; 47
     256:	71 e0       	ldi	r23, 0x01	; 1
     258:	87 ed       	ldi	r24, 0xD7	; 215
     25a:	94 e0       	ldi	r25, 0x04	; 4
     25c:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN5Print7printlnEPKc>
     260:	62 e1       	ldi	r22, 0x12	; 18
     262:	ce 01       	movw	r24, r28
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	0c 94 06 01 	jmp	0x20c	; 0x20c <_ZN8INA233_S15transmitCommandEh>

0000026c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>:
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	fc 01       	movw	r30, r24
     274:	eb 01       	movw	r28, r22
     276:	14 2f       	mov	r17, r20
     278:	9a 85       	ldd	r25, Y+10	; 0x0a
     27a:	93 30       	cpi	r25, 0x03	; 3
     27c:	18 f0       	brcs	.+6      	; 0x284 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x18>
     27e:	6a e3       	ldi	r22, 0x3A	; 58
     280:	71 e0       	ldi	r23, 0x01	; 1
     282:	04 c0       	rjmp	.+8      	; 0x28c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x20>
     284:	91 11       	cpse	r25, r1
     286:	0f c0       	rjmp	.+30     	; 0x2a6 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x3a>
     288:	60 ea       	ldi	r22, 0xA0	; 160
     28a:	71 e0       	ldi	r23, 0x01	; 1
     28c:	87 ed       	ldi	r24, 0xD7	; 215
     28e:	94 e0       	ldi	r25, 0x04	; 4
     290:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN5Print7printlnEPKc>
     294:	6f e7       	ldi	r22, 0x7F	; 127
     296:	71 e0       	ldi	r23, 0x01	; 1
     298:	87 ed       	ldi	r24, 0xD7	; 215
     29a:	94 e0       	ldi	r25, 0x04	; 4
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <_ZN5Print7printlnEPKc>
     2a6:	60 81       	ld	r22, Z
     2a8:	82 e8       	ldi	r24, 0x82	; 130
     2aa:	95 e0       	ldi	r25, 0x05	; 5
     2ac:	0e 94 c6 20 	call	0x418c	; 0x418c <_ZN7TwoWire17beginTransmissionEh>
     2b0:	61 2f       	mov	r22, r17
     2b2:	82 e8       	ldi	r24, 0x82	; 130
     2b4:	95 e0       	ldi	r25, 0x05	; 5
     2b6:	0e 94 71 20 	call	0x40e2	; 0x40e2 <_ZN7TwoWire5writeEh>
     2ba:	68 81       	ld	r22, Y
     2bc:	82 e8       	ldi	r24, 0x82	; 130
     2be:	95 e0       	ldi	r25, 0x05	; 5
     2c0:	0e 94 71 20 	call	0x40e2	; 0x40e2 <_ZN7TwoWire5writeEh>
     2c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     2c6:	82 30       	cpi	r24, 0x02	; 2
     2c8:	29 f4       	brne	.+10     	; 0x2d4 <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh+0x68>
     2ca:	69 81       	ldd	r22, Y+1	; 0x01
     2cc:	82 e8       	ldi	r24, 0x82	; 130
     2ce:	95 e0       	ldi	r25, 0x05	; 5
     2d0:	0e 94 71 20 	call	0x40e2	; 0x40e2 <_ZN7TwoWire5writeEh>
     2d4:	82 e8       	ldi	r24, 0x82	; 130
     2d6:	95 e0       	ldi	r25, 0x05	; 5
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	0c 94 4a 21 	jmp	0x4294	; 0x4294 <_ZN7TwoWire15endTransmissionEv>

000002e2 <_ZN8INA233_S12receiveData_Ehh>:
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	ec 01       	movw	r28, r24
     2f0:	7b 01       	movw	r14, r22
     2f2:	02 2f       	mov	r16, r18
     2f4:	8f e0       	ldi	r24, 0x0F	; 15
     2f6:	fe 01       	movw	r30, r28
     2f8:	11 92       	st	Z+, r1
     2fa:	8a 95       	dec	r24
     2fc:	e9 f7       	brne	.-6      	; 0x2f8 <_ZN8INA233_S12receiveData_Ehh+0x16>
     2fe:	8a e0       	ldi	r24, 0x0A	; 10
     300:	8b 87       	std	Y+11, r24	; 0x0b
     302:	64 2f       	mov	r22, r20
     304:	c7 01       	movw	r24, r14
     306:	0e 94 06 01 	call	0x20c	; 0x20c <_ZN8INA233_S15transmitCommandEh>
     30a:	40 2f       	mov	r20, r16
     30c:	f7 01       	movw	r30, r14
     30e:	60 81       	ld	r22, Z
     310:	82 e8       	ldi	r24, 0x82	; 130
     312:	95 e0       	ldi	r25, 0x05	; 5
     314:	0e 94 47 21 	call	0x428e	; 0x428e <_ZN7TwoWire11requestFromEhh>
     318:	82 e8       	ldi	r24, 0x82	; 130
     31a:	95 e0       	ldi	r25, 0x05	; 5
     31c:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <_ZN7TwoWire9availableEv>
     320:	89 2b       	or	r24, r25
     322:	79 f0       	breq	.+30     	; 0x342 <_ZN8INA233_S12receiveData_Ehh+0x60>
     324:	1a 85       	ldd	r17, Y+10	; 0x0a
     326:	82 e8       	ldi	r24, 0x82	; 130
     328:	95 e0       	ldi	r25, 0x05	; 5
     32a:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN7TwoWire4readEv>
     32e:	fe 01       	movw	r30, r28
     330:	e1 0f       	add	r30, r17
     332:	f1 1d       	adc	r31, r1
     334:	80 83       	st	Z, r24
     336:	1f 5f       	subi	r17, 0xFF	; 255
     338:	1a 87       	std	Y+10, r17	; 0x0a
     33a:	1a 30       	cpi	r17, 0x0A	; 10
     33c:	68 f3       	brcs	.-38     	; 0x318 <_ZN8INA233_S12receiveData_Ehh+0x36>
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	8c 87       	std	Y+12, r24	; 0x0c
     342:	8a 85       	ldd	r24, Y+10	; 0x0a
     344:	80 17       	cp	r24, r16
     346:	18 f4       	brcc	.+6      	; 0x34e <_ZN8INA233_S12receiveData_Ehh+0x6c>
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	8d 87       	std	Y+13, r24	; 0x0d
     34c:	04 c0       	rjmp	.+8      	; 0x356 <_ZN8INA233_S12receiveData_Ehh+0x74>
     34e:	08 17       	cp	r16, r24
     350:	10 f4       	brcc	.+4      	; 0x356 <_ZN8INA233_S12receiveData_Ehh+0x74>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	8e 87       	std	Y+14, r24	; 0x0e
     356:	ce 01       	movw	r24, r28
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	08 95       	ret

00000366 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>:
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	2f 97       	sbiw	r28, 0x0f	; 15
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
     382:	8b 01       	movw	r16, r22
     384:	fb 01       	movw	r30, r22
     386:	22 85       	ldd	r18, Z+10	; 0x0a
     388:	bc 01       	movw	r22, r24
     38a:	ce 01       	movw	r24, r28
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	7c 01       	movw	r14, r24
     390:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     394:	f8 01       	movw	r30, r16
     396:	62 85       	ldd	r22, Z+10	; 0x0a
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	a8 01       	movw	r20, r16
     39c:	d7 01       	movw	r26, r14
     39e:	c8 01       	movw	r24, r16
     3a0:	9d 01       	movw	r18, r26
     3a2:	2e 19       	sub	r18, r14
     3a4:	3f 09       	sbc	r19, r15
     3a6:	26 17       	cp	r18, r22
     3a8:	37 07       	cpc	r19, r23
     3aa:	40 f4       	brcc	.+16     	; 0x3bc <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x56>
     3ac:	fc 01       	movw	r30, r24
     3ae:	31 91       	ld	r19, Z+
     3b0:	cf 01       	movw	r24, r30
     3b2:	2d 91       	ld	r18, X+
     3b4:	32 17       	cp	r19, r18
     3b6:	a1 f3       	breq	.-24     	; 0x3a0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x3a>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	0a c0       	rjmp	.+20     	; 0x3d0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x6a>
     3bc:	60 0f       	add	r22, r16
     3be:	71 1f       	adc	r23, r17
     3c0:	46 17       	cp	r20, r22
     3c2:	57 07       	cpc	r21, r23
     3c4:	21 f0       	breq	.+8      	; 0x3ce <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x68>
     3c6:	fa 01       	movw	r30, r20
     3c8:	11 92       	st	Z+, r1
     3ca:	af 01       	movw	r20, r30
     3cc:	f9 cf       	rjmp	.-14     	; 0x3c0 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh+0x5a>
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	2f 96       	adiw	r28, 0x0f	; 15
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	08 95       	ret

000003ea <_ZN8INA233_S15setADC_SettingsEj>:
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	2f 97       	sbiw	r28, 0x0f	; 15
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	7c 01       	movw	r14, r24
     408:	8e 01       	movw	r16, r28
     40a:	0f 5f       	subi	r16, 0xFF	; 255
     40c:	1f 4f       	sbci	r17, 0xFF	; 255
     40e:	8f e0       	ldi	r24, 0x0F	; 15
     410:	f8 01       	movw	r30, r16
     412:	11 92       	st	Z+, r1
     414:	8a 95       	dec	r24
     416:	e9 f7       	brne	.-6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     418:	8a e0       	ldi	r24, 0x0A	; 10
     41a:	8c 87       	std	Y+12, r24	; 0x0c
     41c:	69 83       	std	Y+1, r22	; 0x01
     41e:	7a 83       	std	Y+2, r23	; 0x02
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	8b 87       	std	Y+11, r24	; 0x0b
     424:	40 ed       	ldi	r20, 0xD0	; 208
     426:	b8 01       	movw	r22, r16
     428:	c7 01       	movw	r24, r14
     42a:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     42e:	40 ed       	ldi	r20, 0xD0	; 208
     430:	b8 01       	movw	r22, r16
     432:	c7 01       	movw	r24, r14
     434:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	2f 96       	adiw	r28, 0x0f	; 15
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	08 95       	ret

00000454 <_ZN8INA233_S15setCallibrationEj>:
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	2f 97       	sbiw	r28, 0x0f	; 15
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	7c 01       	movw	r14, r24
     476:	6b 01       	movw	r12, r22
     478:	68 e6       	ldi	r22, 0x68	; 104
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	87 ed       	ldi	r24, 0xD7	; 215
     47e:	94 e0       	ldi	r25, 0x04	; 4
     480:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN5Print7printlnEPK19__FlashStringHelper>
     484:	8e 01       	movw	r16, r28
     486:	0f 5f       	subi	r16, 0xFF	; 255
     488:	1f 4f       	sbci	r17, 0xFF	; 255
     48a:	8f e0       	ldi	r24, 0x0F	; 15
     48c:	f8 01       	movw	r30, r16
     48e:	11 92       	st	Z+, r1
     490:	8a 95       	dec	r24
     492:	e9 f7       	brne	.-6      	; 0x48e <_ZN8INA233_S15setCallibrationEj+0x3a>
     494:	8a e0       	ldi	r24, 0x0A	; 10
     496:	8c 87       	std	Y+12, r24	; 0x0c
     498:	c9 82       	std	Y+1, r12	; 0x01
     49a:	da 82       	std	Y+2, r13	; 0x02
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	8b 87       	std	Y+11, r24	; 0x0b
     4a0:	44 ed       	ldi	r20, 0xD4	; 212
     4a2:	b8 01       	movw	r22, r16
     4a4:	c7 01       	movw	r24, r14
     4a6:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     4aa:	44 ed       	ldi	r20, 0xD4	; 212
     4ac:	b8 01       	movw	r22, r16
     4ae:	c7 01       	movw	r24, r14
     4b0:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN8INA233_S13readbackCheckEP19INA233_Data_Packageh>
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	2f 96       	adiw	r28, 0x0f	; 15
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	08 95       	ret

000004d4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>:
     4d4:	4f 92       	push	r4
     4d6:	5f 92       	push	r5
     4d8:	6f 92       	push	r6
     4da:	7f 92       	push	r7
     4dc:	af 92       	push	r10
     4de:	bf 92       	push	r11
     4e0:	cf 92       	push	r12
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	ae 97       	sbiw	r28, 0x2e	; 46
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	5c 01       	movw	r10, r24
     502:	cf 8e       	std	Y+31, r12	; 0x1f
     504:	d8 a2       	std	Y+32, r13	; 0x20
     506:	e9 a2       	std	Y+33, r14	; 0x21
     508:	fa a2       	std	Y+34, r15	; 0x22
     50a:	0b a3       	std	Y+35, r16	; 0x23
     50c:	1c a3       	std	Y+36, r17	; 0x24
     50e:	2d a3       	std	Y+37, r18	; 0x25
     510:	3e a3       	std	Y+38, r19	; 0x26
     512:	4f a3       	std	Y+39, r20	; 0x27
     514:	58 a7       	std	Y+40, r21	; 0x28
     516:	69 a7       	std	Y+41, r22	; 0x29
     518:	7a a7       	std	Y+42, r23	; 0x2a
     51a:	cf 8c       	ldd	r12, Y+31	; 0x1f
     51c:	d8 a0       	ldd	r13, Y+32	; 0x20
     51e:	e9 a0       	ldd	r14, Y+33	; 0x21
     520:	fa a0       	ldd	r15, Y+34	; 0x22
     522:	8b a1       	ldd	r24, Y+35	; 0x23
     524:	9c a1       	ldd	r25, Y+36	; 0x24
     526:	ad a1       	ldd	r26, Y+37	; 0x25
     528:	be a1       	ldd	r27, Y+38	; 0x26
     52a:	8b a7       	std	Y+43, r24	; 0x2b
     52c:	9c a7       	std	Y+44, r25	; 0x2c
     52e:	ad a7       	std	Y+45, r26	; 0x2d
     530:	be a7       	std	Y+46, r27	; 0x2e
     532:	4f a0       	ldd	r4, Y+39	; 0x27
     534:	58 a4       	ldd	r5, Y+40	; 0x28
     536:	69 a4       	ldd	r6, Y+41	; 0x29
     538:	7a a4       	ldd	r7, Y+42	; 0x2a
     53a:	6c eb       	ldi	r22, 0xBC	; 188
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	87 ed       	ldi	r24, 0xD7	; 215
     540:	94 e0       	ldi	r25, 0x04	; 4
     542:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN5Print7printlnEPKc>
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	a9 01       	movw	r20, r18
     54c:	c7 01       	movw	r24, r14
     54e:	b6 01       	movw	r22, r12
     550:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__gesf2>
     554:	18 16       	cp	r1, r24
     556:	0c f0       	brlt	.+2      	; 0x55a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x86>
     558:	51 c0       	rjmp	.+162    	; 0x5fc <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x128>
     55a:	d5 01       	movw	r26, r10
     55c:	11 96       	adiw	r26, 0x01	; 1
     55e:	6d 91       	ld	r22, X+
     560:	7c 91       	ld	r23, X
     562:	12 97       	sbiw	r26, 0x02	; 2
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 4e 09 	call	0x129c	; 0x129c <__floatunsisf>
     56c:	a7 01       	movw	r20, r14
     56e:	96 01       	movw	r18, r12
     570:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     574:	6b 01       	movw	r12, r22
     576:	7c 01       	movw	r14, r24
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	a9 01       	movw	r20, r18
     57e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__gesf2>
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	5f e3       	ldi	r21, 0x3F	; 63
     58a:	87 fd       	sbrc	r24, 7
     58c:	05 c0       	rjmp	.+10     	; 0x598 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xc4>
     58e:	c7 01       	movw	r24, r14
     590:	b6 01       	movw	r22, r12
     592:	0e 94 3a 08 	call	0x1074	; 0x1074 <__addsf3>
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xcc>
     598:	c7 01       	movw	r24, r14
     59a:	b6 01       	movw	r22, r12
     59c:	0e 94 39 08 	call	0x1072	; 0x1072 <__subsf3>
     5a0:	0e 94 18 09 	call	0x1230	; 0x1230 <__fixsfsi>
     5a4:	8b 01       	movw	r16, r22
     5a6:	7e 01       	movw	r14, r28
     5a8:	b0 e1       	ldi	r27, 0x10	; 16
     5aa:	eb 0e       	add	r14, r27
     5ac:	f1 1c       	adc	r15, r1
     5ae:	8f e0       	ldi	r24, 0x0F	; 15
     5b0:	f7 01       	movw	r30, r14
     5b2:	11 92       	st	Z+, r1
     5b4:	8a 95       	dec	r24
     5b6:	e9 f7       	brne	.-6      	; 0x5b2 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0xde>
     5b8:	8a e0       	ldi	r24, 0x0A	; 10
     5ba:	8b 8f       	std	Y+27, r24	; 0x1b
     5bc:	08 8b       	std	Y+16, r16	; 0x10
     5be:	19 8b       	std	Y+17, r17	; 0x11
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	8a 8f       	std	Y+26, r24	; 0x1a
     5c4:	6f ee       	ldi	r22, 0xEF	; 239
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	87 ed       	ldi	r24, 0xD7	; 215
     5ca:	94 e0       	ldi	r25, 0x04	; 4
     5cc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN5Print7printlnEPK19__FlashStringHelper>
     5d0:	4a e0       	ldi	r20, 0x0A	; 10
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	b8 01       	movw	r22, r16
     5d6:	87 ed       	ldi	r24, 0xD7	; 215
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	0e 94 13 0c 	call	0x1826	; 0x1826 <_ZN5Print7printlnEji>
     5de:	4a e4       	ldi	r20, 0x4A	; 74
     5e0:	b7 01       	movw	r22, r14
     5e2:	c5 01       	movw	r24, r10
     5e4:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     5e8:	22 e0       	ldi	r18, 0x02	; 2
     5ea:	4a e4       	ldi	r20, 0x4A	; 74
     5ec:	b5 01       	movw	r22, r10
     5ee:	ce 01       	movw	r24, r28
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     5f6:	66 ed       	ldi	r22, 0xD6	; 214
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	af c0       	rjmp	.+350    	; 0x75a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	a9 01       	movw	r20, r18
     602:	6b a5       	ldd	r22, Y+43	; 0x2b
     604:	7c a5       	ldd	r23, Y+44	; 0x2c
     606:	8d a5       	ldd	r24, Y+45	; 0x2d
     608:	9e a5       	ldd	r25, Y+46	; 0x2e
     60a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__gesf2>
     60e:	18 16       	cp	r1, r24
     610:	0c f0       	brlt	.+2      	; 0x614 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x140>
     612:	4e c0       	rjmp	.+156    	; 0x6b0 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1dc>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	48 e4       	ldi	r20, 0x48	; 72
     61a:	54 e4       	ldi	r21, 0x44	; 68
     61c:	6b a5       	ldd	r22, Y+43	; 0x2b
     61e:	7c a5       	ldd	r23, Y+44	; 0x2c
     620:	8d a5       	ldd	r24, Y+45	; 0x2d
     622:	9e a5       	ldd	r25, Y+46	; 0x2e
     624:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     628:	6b 01       	movw	r12, r22
     62a:	7c 01       	movw	r14, r24
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	a9 01       	movw	r20, r18
     632:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__gesf2>
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	5f e3       	ldi	r21, 0x3F	; 63
     63e:	87 fd       	sbrc	r24, 7
     640:	05 c0       	rjmp	.+10     	; 0x64c <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x178>
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	0e 94 3a 08 	call	0x1074	; 0x1074 <__addsf3>
     64a:	04 c0       	rjmp	.+8      	; 0x654 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x180>
     64c:	c7 01       	movw	r24, r14
     64e:	b6 01       	movw	r22, r12
     650:	0e 94 39 08 	call	0x1072	; 0x1072 <__subsf3>
     654:	0e 94 18 09 	call	0x1230	; 0x1230 <__fixsfsi>
     658:	8b 01       	movw	r16, r22
     65a:	7e 01       	movw	r14, r28
     65c:	f0 e1       	ldi	r31, 0x10	; 16
     65e:	ef 0e       	add	r14, r31
     660:	f1 1c       	adc	r15, r1
     662:	8f e0       	ldi	r24, 0x0F	; 15
     664:	d7 01       	movw	r26, r14
     666:	1d 92       	st	X+, r1
     668:	8a 95       	dec	r24
     66a:	e9 f7       	brne	.-6      	; 0x666 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x192>
     66c:	8a e0       	ldi	r24, 0x0A	; 10
     66e:	8b 8f       	std	Y+27, r24	; 0x1b
     670:	08 8b       	std	Y+16, r16	; 0x10
     672:	19 8b       	std	Y+17, r17	; 0x11
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	8a 8f       	std	Y+26, r24	; 0x1a
     678:	66 ec       	ldi	r22, 0xC6	; 198
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	87 ed       	ldi	r24, 0xD7	; 215
     67e:	94 e0       	ldi	r25, 0x04	; 4
     680:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN5Print7printlnEPK19__FlashStringHelper>
     684:	4a e0       	ldi	r20, 0x0A	; 10
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	b8 01       	movw	r22, r16
     68a:	87 ed       	ldi	r24, 0xD7	; 215
     68c:	94 e0       	ldi	r25, 0x04	; 4
     68e:	0e 94 13 0c 	call	0x1826	; 0x1826 <_ZN5Print7printlnEji>
     692:	47 e5       	ldi	r20, 0x57	; 87
     694:	b7 01       	movw	r22, r14
     696:	c5 01       	movw	r24, r10
     698:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     69c:	22 e0       	ldi	r18, 0x02	; 2
     69e:	47 e5       	ldi	r20, 0x57	; 87
     6a0:	b5 01       	movw	r22, r10
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     6aa:	6d ea       	ldi	r22, 0xAD	; 173
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	55 c0       	rjmp	.+170    	; 0x75a <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x286>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	a9 01       	movw	r20, r18
     6b6:	c3 01       	movw	r24, r6
     6b8:	b2 01       	movw	r22, r4
     6ba:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__gesf2>
     6be:	18 16       	cp	r1, r24
     6c0:	0c f0       	brlt	.+2      	; 0x6c4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x1f0>
     6c2:	5a c0       	rjmp	.+180    	; 0x778 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	48 e4       	ldi	r20, 0x48	; 72
     6ca:	54 e4       	ldi	r21, 0x44	; 68
     6cc:	c3 01       	movw	r24, r6
     6ce:	b2 01       	movw	r22, r4
     6d0:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     6d4:	6b 01       	movw	r12, r22
     6d6:	7c 01       	movw	r14, r24
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	a9 01       	movw	r20, r18
     6de:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__gesf2>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	5f e3       	ldi	r21, 0x3F	; 63
     6ea:	87 fd       	sbrc	r24, 7
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x224>
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	0e 94 3a 08 	call	0x1074	; 0x1074 <__addsf3>
     6f6:	04 c0       	rjmp	.+8      	; 0x700 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x22c>
     6f8:	c7 01       	movw	r24, r14
     6fa:	b6 01       	movw	r22, r12
     6fc:	0e 94 39 08 	call	0x1072	; 0x1072 <__subsf3>
     700:	0e 94 18 09 	call	0x1230	; 0x1230 <__fixsfsi>
     704:	8b 01       	movw	r16, r22
     706:	7e 01       	movw	r14, r28
     708:	b0 e1       	ldi	r27, 0x10	; 16
     70a:	eb 0e       	add	r14, r27
     70c:	f1 1c       	adc	r15, r1
     70e:	8f e0       	ldi	r24, 0x0F	; 15
     710:	f7 01       	movw	r30, r14
     712:	11 92       	st	Z+, r1
     714:	8a 95       	dec	r24
     716:	e9 f7       	brne	.-6      	; 0x712 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x23e>
     718:	8a e0       	ldi	r24, 0x0A	; 10
     71a:	8b 8f       	std	Y+27, r24	; 0x1b
     71c:	08 8b       	std	Y+16, r16	; 0x10
     71e:	19 8b       	std	Y+17, r17	; 0x11
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	8a 8f       	std	Y+26, r24	; 0x1a
     724:	6d e9       	ldi	r22, 0x9D	; 157
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	87 ed       	ldi	r24, 0xD7	; 215
     72a:	94 e0       	ldi	r25, 0x04	; 4
     72c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN5Print7printlnEPK19__FlashStringHelper>
     730:	4a e0       	ldi	r20, 0x0A	; 10
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	b8 01       	movw	r22, r16
     736:	87 ed       	ldi	r24, 0xD7	; 215
     738:	94 e0       	ldi	r25, 0x04	; 4
     73a:	0e 94 13 0c 	call	0x1826	; 0x1826 <_ZN5Print7printlnEji>
     73e:	48 e5       	ldi	r20, 0x58	; 88
     740:	b7 01       	movw	r22, r14
     742:	c5 01       	movw	r24, r10
     744:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN8INA233_S12transmitDataEP19INA233_Data_Packageh>
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	48 e5       	ldi	r20, 0x58	; 88
     74c:	b5 01       	movw	r22, r10
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     756:	64 e8       	ldi	r22, 0x84	; 132
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	87 ed       	ldi	r24, 0xD7	; 215
     75c:	94 e0       	ldi	r25, 0x04	; 4
     75e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN5Print7printlnEPK19__FlashStringHelper>
     762:	69 81       	ldd	r22, Y+1	; 0x01
     764:	7a 81       	ldd	r23, Y+2	; 0x02
     766:	4a e0       	ldi	r20, 0x0A	; 10
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	87 ed       	ldi	r24, 0xD7	; 215
     76c:	94 e0       	ldi	r25, 0x04	; 4
     76e:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN5Print7printlnEii>
     772:	8a e0       	ldi	r24, 0x0A	; 10
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	00 c0       	rjmp	.+0      	; 0x778 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config+0x2a4>
     778:	ae 96       	adiw	r28, 0x2e	; 46
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	bf 90       	pop	r11
     796:	af 90       	pop	r10
     798:	7f 90       	pop	r7
     79a:	6f 90       	pop	r6
     79c:	5f 90       	pop	r5
     79e:	4f 90       	pop	r4
     7a0:	08 95       	ret

000007a2 <_ZN8INA233_S10initializeEv>:
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	ec 01       	movw	r28, r24
     7b4:	0e 94 27 01 	call	0x24e	; 0x24e <_ZN8INA233_S9resetChipEv>
     7b8:	6b 81       	ldd	r22, Y+3	; 0x03
     7ba:	7c 81       	ldd	r23, Y+4	; 0x04
     7bc:	ce 01       	movw	r24, r28
     7be:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN8INA233_S15setCallibrationEj>
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	91 05       	cpc	r25, r1
     7c6:	a1 f0       	breq	.+40     	; 0x7f0 <_ZN8INA233_S10initializeEv+0x4e>
     7c8:	ce 01       	movw	r24, r28
     7ca:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8INA233_S10resetAlarmEv>
     7ce:	cd 80       	ldd	r12, Y+5	; 0x05
     7d0:	de 80       	ldd	r13, Y+6	; 0x06
     7d2:	ef 80       	ldd	r14, Y+7	; 0x07
     7d4:	f8 84       	ldd	r15, Y+8	; 0x08
     7d6:	09 85       	ldd	r16, Y+9	; 0x09
     7d8:	1a 85       	ldd	r17, Y+10	; 0x0a
     7da:	2b 85       	ldd	r18, Y+11	; 0x0b
     7dc:	3c 85       	ldd	r19, Y+12	; 0x0c
     7de:	4d 85       	ldd	r20, Y+13	; 0x0d
     7e0:	5e 85       	ldd	r21, Y+14	; 0x0e
     7e2:	6f 85       	ldd	r22, Y+15	; 0x0f
     7e4:	78 89       	ldd	r23, Y+16	; 0x10
     7e6:	ce 01       	movw	r24, r28
     7e8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN8INA233_S14setAlarmLimitsE19INA233_Alarm_Config>
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	08 95       	ret

00000802 <_ZN8INA233_S12getVoltage_LEv>:
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	2f 97       	sbiw	r28, 0x0f	; 15
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	8c 01       	movw	r16, r24
     824:	22 e0       	ldi	r18, 0x02	; 2
     826:	48 e8       	ldi	r20, 0x88	; 136
     828:	bc 01       	movw	r22, r24
     82a:	ce 01       	movw	r24, r28
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     832:	f8 01       	movw	r30, r16
     834:	61 81       	ldd	r22, Z+1	; 0x01
     836:	72 81       	ldd	r23, Z+2	; 0x02
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 4e 09 	call	0x129c	; 0x129c <__floatunsisf>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	80 e8       	ldi	r24, 0x80	; 128
     84a:	9f e3       	ldi	r25, 0x3F	; 63
     84c:	0e 94 a6 08 	call	0x114c	; 0x114c <__divsf3>
     850:	6b 01       	movw	r12, r22
     852:	7c 01       	movw	r14, r24
     854:	69 81       	ldd	r22, Y+1	; 0x01
     856:	7a 81       	ldd	r23, Y+2	; 0x02
     858:	07 2e       	mov	r0, r23
     85a:	00 0c       	add	r0, r0
     85c:	88 0b       	sbc	r24, r24
     85e:	99 0b       	sbc	r25, r25
     860:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__floatsisf>
     864:	9b 01       	movw	r18, r22
     866:	ac 01       	movw	r20, r24
     868:	c7 01       	movw	r24, r14
     86a:	b6 01       	movw	r22, r12
     86c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     870:	2f 96       	adiw	r28, 0x0f	; 15
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	08 95       	ret

0000088e <_ZN8INA233_S10getCurrentEv>:
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	2f 97       	sbiw	r28, 0x0f	; 15
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	7c 01       	movw	r14, r24
     8b0:	22 e0       	ldi	r18, 0x02	; 2
     8b2:	49 e8       	ldi	r20, 0x89	; 137
     8b4:	bc 01       	movw	r22, r24
     8b6:	ce 01       	movw	r24, r28
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
     8be:	09 81       	ldd	r16, Y+1	; 0x01
     8c0:	1a 81       	ldd	r17, Y+2	; 0x02
     8c2:	69 ec       	ldi	r22, 0xC9	; 201
     8c4:	71 e0       	ldi	r23, 0x01	; 1
     8c6:	87 ed       	ldi	r24, 0xD7	; 215
     8c8:	94 e0       	ldi	r25, 0x04	; 4
     8ca:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN5Print5printEPKc>
     8ce:	4a e0       	ldi	r20, 0x0A	; 10
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	b8 01       	movw	r22, r16
     8d4:	87 ed       	ldi	r24, 0xD7	; 215
     8d6:	94 e0       	ldi	r25, 0x04	; 4
     8d8:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN5Print7printlnEii>
     8dc:	f7 01       	movw	r30, r14
     8de:	61 81       	ldd	r22, Z+1	; 0x01
     8e0:	72 81       	ldd	r23, Z+2	; 0x02
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 4e 09 	call	0x129c	; 0x129c <__floatunsisf>
     8ea:	9b 01       	movw	r18, r22
     8ec:	ac 01       	movw	r20, r24
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	80 e8       	ldi	r24, 0x80	; 128
     8f4:	9f e3       	ldi	r25, 0x3F	; 63
     8f6:	0e 94 a6 08 	call	0x114c	; 0x114c <__divsf3>
     8fa:	6b 01       	movw	r12, r22
     8fc:	7c 01       	movw	r14, r24
     8fe:	b8 01       	movw	r22, r16
     900:	11 0f       	add	r17, r17
     902:	88 0b       	sbc	r24, r24
     904:	99 0b       	sbc	r25, r25
     906:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__floatsisf>
     90a:	9b 01       	movw	r18, r22
     90c:	ac 01       	movw	r20, r24
     90e:	c7 01       	movw	r24, r14
     910:	b6 01       	movw	r22, r12
     912:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     916:	2f 96       	adiw	r28, 0x0f	; 15
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	df 90       	pop	r13
     930:	cf 90       	pop	r12
     932:	08 95       	ret

00000934 <_ZN8INA233_S17testCommunicationEv>:
    Serial.println("reset chip");
    transmitCommand(0x12);
}

int INA233_S::testCommunication()
{
     934:	af 92       	push	r10
     936:	bf 92       	push	r11
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	66 97       	sbiw	r28, 0x16	; 22
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	8c 01       	movw	r16, r24
    Serial.println("test communications");
     958:	6a ee       	ldi	r22, 0xEA	; 234
     95a:	71 e0       	ldi	r23, 0x01	; 1
     95c:	87 ed       	ldi	r24, 0xD7	; 215
     95e:	94 e0       	ldi	r25, 0x04	; 4
     960:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN5Print7printlnEPKc>
    // TO DO ! Read MFR_MODEL, compare if correct.
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x9A, 7);
     964:	27 e0       	ldi	r18, 0x07	; 7
     966:	4a e9       	ldi	r20, 0x9A	; 154
     968:	b8 01       	movw	r22, r16
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN8INA233_S12receiveData_Ehh>
    uint8_t compare[7] = {
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};
     972:	87 e0       	ldi	r24, 0x07	; 7
     974:	e8 e2       	ldi	r30, 0x28	; 40
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	de 01       	movw	r26, r28
     97a:	50 96       	adiw	r26, 0x10	; 16
     97c:	01 90       	ld	r0, Z+
     97e:	0d 92       	st	X+, r0
     980:	8a 95       	dec	r24
     982:	e1 f7       	brne	.-8      	; 0x97c <_ZN8INA233_S17testCommunicationEv+0x48>
     984:	8e 01       	movw	r16, r28
     986:	0f 5f       	subi	r16, 0xFF	; 255
     988:	1f 4f       	sbci	r17, 0xFF	; 255
     98a:	7e 01       	movw	r14, r28
     98c:	80 e1       	ldi	r24, 0x10	; 16
     98e:	e8 0e       	add	r14, r24
     990:	f1 1c       	adc	r15, r1
     992:	5e 01       	movw	r10, r28
     994:	e8 e0       	ldi	r30, 0x08	; 8
     996:	ae 0e       	add	r10, r30
     998:	b1 1c       	adc	r11, r1

    for (int ii = 0; ii < 7; ii++)
    {
        Serial.print("Readback MFR_MODEL: ");
     99a:	6e ef       	ldi	r22, 0xFE	; 254
     99c:	71 e0       	ldi	r23, 0x01	; 1
     99e:	87 ed       	ldi	r24, 0xD7	; 215
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN5Print5printEPKc>
        Serial.print(data.msg[ii]);
     9a6:	f8 01       	movw	r30, r16
     9a8:	d1 90       	ld	r13, Z+
     9aa:	8f 01       	movw	r16, r30
     9ac:	4a e0       	ldi	r20, 0x0A	; 10
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	6d 2d       	mov	r22, r13
     9b2:	87 ed       	ldi	r24, 0xD7	; 215
     9b4:	94 e0       	ldi	r25, 0x04	; 4
     9b6:	0e 94 06 0c 	call	0x180c	; 0x180c <_ZN5Print5printEhi>
        if (compare[ii] != data.msg[ii])
     9ba:	f7 01       	movw	r30, r14
     9bc:	81 91       	ld	r24, Z+
     9be:	7f 01       	movw	r14, r30
     9c0:	d8 16       	cp	r13, r24
     9c2:	49 f0       	breq	.+18     	; 0x9d6 <_ZN8INA233_S17testCommunicationEv+0xa2>
        {
            Serial.println("Communication error");
     9c4:	63 e1       	ldi	r22, 0x13	; 19
     9c6:	72 e0       	ldi	r23, 0x02	; 2
     9c8:	87 ed       	ldi	r24, 0xD7	; 215
     9ca:	94 e0       	ldi	r25, 0x04	; 4
     9cc:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN5Print7printlnEPKc>
			return 1;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <_ZN8INA233_S17testCommunicationEv+0xac>
    // Is there a way in wire.h to check for communications?
    INA233_Data_Package data = receiveData_(0x9A, 7);
    uint8_t compare[7] = {
        0x06, 0x49, 0x4E, 0x41, 0x32, 0x33, 0x33};

    for (int ii = 0; ii < 7; ii++)
     9d6:	0a 15       	cp	r16, r10
     9d8:	1b 05       	cpc	r17, r11
     9da:	f9 f6       	brne	.-66     	; 0x99a <_ZN8INA233_S17testCommunicationEv+0x66>
            Serial.println("Communication error");
			return 1;
        }
    }
	
	return 0;
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
}
     9e0:	66 96       	adiw	r28, 0x16	; 22
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	bf 90       	pop	r11
     9fc:	af 90       	pop	r10
     9fe:	08 95       	ret

00000a00 <_ZZ5setupENUlvE_4_FUNEv>:
		STATE = !STATE;
		digitalWrite(9, STATE);
		
		blink_time = millis();
	}
}
     a00:	83 e8       	ldi	r24, 0x83	; 131
     a02:	94 e0       	ldi	r25, 0x04	; 4
     a04:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <_ZN10ACAN2517FD3isrEv>

00000a08 <_ZN12CANFDMessageC1Ev>:
     a08:	fc 01       	movw	r30, r24
     a0a:	10 82       	st	Z, r1
     a0c:	11 82       	std	Z+1, r1	; 0x01
     a0e:	12 82       	std	Z+2, r1	; 0x02
     a10:	13 82       	std	Z+3, r1	; 0x03
     a12:	14 82       	std	Z+4, r1	; 0x04
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	85 83       	std	Z+5, r24	; 0x05
     a18:	16 82       	std	Z+6, r1	; 0x06
     a1a:	17 82       	std	Z+7, r1	; 0x07
     a1c:	df 01       	movw	r26, r30
     a1e:	18 96       	adiw	r26, 0x08	; 8
     a20:	e8 5b       	subi	r30, 0xB8	; 184
     a22:	ff 4f       	sbci	r31, 0xFF	; 255
     a24:	1d 92       	st	X+, r1
     a26:	ae 17       	cp	r26, r30
     a28:	bf 07       	cpc	r27, r31
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <_ZN12CANFDMessageC1Ev+0x1c>
     a2c:	08 95       	ret

00000a2e <_ZN6mosfetC1Eh>:
     a2e:	fc 01       	movw	r30, r24
     a30:	86 2f       	mov	r24, r22
     a32:	60 83       	st	Z, r22
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <pinMode>

00000a3a <setup>:
     a3a:	cf 92       	push	r12
     a3c:	df 92       	push	r13
     a3e:	ef 92       	push	r14
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	a8 97       	sbiw	r28, 0x28	; 40
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	9d e0       	ldi	r25, 0x0D	; 13
     a5c:	88 e1       	ldi	r24, 0x18	; 24
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	a8 95       	wdr
     a64:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
     a6e:	82 e8       	ldi	r24, 0x82	; 130
     a70:	95 e0       	ldi	r25, 0x05	; 5
     a72:	0e 94 b0 20 	call	0x4160	; 0x4160 <_ZN7TwoWire5beginEv>
     a76:	40 e1       	ldi	r20, 0x10	; 16
     a78:	57 e2       	ldi	r21, 0x27	; 39
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	82 e8       	ldi	r24, 0x82	; 130
     a80:	95 e0       	ldi	r25, 0x05	; 5
     a82:	0e 94 c2 20 	call	0x4184	; 0x4184 <_ZN7TwoWire8setClockEm>
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	89 e0       	ldi	r24, 0x09	; 9
     a8a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <pinMode>
     a8e:	04 e1       	ldi	r16, 0x14	; 20
     a90:	11 e0       	ldi	r17, 0x01	; 1
     a92:	22 e2       	ldi	r18, 0x22	; 34
     a94:	c2 2e       	mov	r12, r18
     a96:	21 e0       	ldi	r18, 0x01	; 1
     a98:	d2 2e       	mov	r13, r18
     a9a:	78 01       	movw	r14, r16
     a9c:	d7 01       	movw	r26, r14
     a9e:	8d 91       	ld	r24, X+
     aa0:	9d 91       	ld	r25, X+
     aa2:	7d 01       	movw	r14, r26
     aa4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN8INA233_S10initializeEv>
     aa8:	ce 14       	cp	r12, r14
     aaa:	df 04       	cpc	r13, r15
     aac:	b9 f7       	brne	.-18     	; 0xa9c <setup+0x62>
     aae:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <default_address>
     ab2:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <default_address+0x1>
     ab6:	f8 01       	movw	r30, r16
     ab8:	81 91       	ld	r24, Z+
     aba:	91 91       	ld	r25, Z+
     abc:	8f 01       	movw	r16, r30
     abe:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN8INA233_S15setADC_SettingsEj>
     ac2:	c0 16       	cp	r12, r16
     ac4:	d1 06       	cpc	r13, r17
     ac6:	99 f7       	brne	.-26     	; 0xaae <setup+0x74>
     ac8:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <_ZN8SPIClass5beginEv>
     acc:	98 ee       	ldi	r25, 0xE8	; 232
     ace:	c9 2e       	mov	r12, r25
     ad0:	93 e0       	ldi	r25, 0x03	; 3
     ad2:	d9 2e       	mov	r13, r25
     ad4:	e1 2c       	mov	r14, r1
     ad6:	f1 2c       	mov	r15, r1
     ad8:	08 e0       	ldi	r16, 0x08	; 8
     ada:	20 e2       	ldi	r18, 0x20	; 32
     adc:	31 ea       	ldi	r19, 0xA1	; 161
     ade:	47 e0       	ldi	r20, 0x07	; 7
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	64 e0       	ldi	r22, 0x04	; 4
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm>
     aec:	1a 8e       	std	Y+26, r1	; 0x1a
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	9c 8f       	std	Y+28, r25	; 0x1c
     af4:	8b 8f       	std	Y+27, r24	; 0x1b
     af6:	9e a3       	std	Y+38, r25	; 0x26
     af8:	8d a3       	std	Y+37, r24	; 0x25
     afa:	67 e2       	ldi	r22, 0x27	; 39
     afc:	72 e0       	ldi	r23, 0x02	; 2
     afe:	87 ed       	ldi	r24, 0xD7	; 215
     b00:	94 e0       	ldi	r25, 0x04	; 4
     b02:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN5Print5printEPKc>
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZNK18ACAN2517FDSettings8ramUsageEv>
     b0e:	ab 01       	movw	r20, r22
     b10:	bc 01       	movw	r22, r24
     b12:	2a e0       	ldi	r18, 0x0A	; 10
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	87 ed       	ldi	r24, 0xD7	; 215
     b18:	94 e0       	ldi	r25, 0x04	; 4
     b1a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN5Print5printEmi>
     b1e:	6d e3       	ldi	r22, 0x3D	; 61
     b20:	72 e0       	ldi	r23, 0x02	; 2
     b22:	87 ed       	ldi	r24, 0xD7	; 215
     b24:	94 e0       	ldi	r25, 0x04	; 4
     b26:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN5Print7printlnEPKc>
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	55 e0       	ldi	r21, 0x05	; 5
     b2e:	be 01       	movw	r22, r28
     b30:	6f 5f       	subi	r22, 0xFF	; 255
     b32:	7f 4f       	sbci	r23, 0xFF	; 255
     b34:	83 e8       	ldi	r24, 0x83	; 131
     b36:	94 e0       	ldi	r25, 0x04	; 4
     b38:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE>
     b3c:	6b 01       	movw	r12, r22
     b3e:	7c 01       	movw	r14, r24
     b40:	67 2b       	or	r22, r23
     b42:	68 2b       	or	r22, r24
     b44:	69 2b       	or	r22, r25
     b46:	71 f0       	breq	.+28     	; 0xb64 <setup+0x12a>
     b48:	64 e4       	ldi	r22, 0x44	; 68
     b4a:	72 e0       	ldi	r23, 0x02	; 2
     b4c:	87 ed       	ldi	r24, 0xD7	; 215
     b4e:	94 e0       	ldi	r25, 0x04	; 4
     b50:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN5Print5printEPKc>
     b54:	20 e1       	ldi	r18, 0x10	; 16
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	b7 01       	movw	r22, r14
     b5a:	a6 01       	movw	r20, r12
     b5c:	87 ed       	ldi	r24, 0xD7	; 215
     b5e:	94 e0       	ldi	r25, 0x04	; 4
     b60:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN5Print7printlnEmi>
     b64:	e3 e4       	ldi	r30, 0x43	; 67
     b66:	f4 e0       	ldi	r31, 0x04	; 4
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	81 93       	st	Z+, r24
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	80 34       	cpi	r24, 0x40	; 64
     b70:	e1 f7       	brne	.-8      	; 0xb6a <setup+0x130>
     b72:	eb ef       	ldi	r30, 0xFB	; 251
     b74:	f3 e0       	ldi	r31, 0x03	; 3
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	81 93       	st	Z+, r24
     b7a:	8f 5f       	subi	r24, 0xFF	; 255
     b7c:	88 30       	cpi	r24, 0x08	; 8
     b7e:	e1 f7       	brne	.-8      	; 0xb78 <setup+0x13e>
     b80:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <frame+0x7>
     b84:	80 e4       	ldi	r24, 0x40	; 64
     b86:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <frame_FD+0x7>
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <frame+0x5>
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <frame_FD+0x5>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	95 e0       	ldi	r25, 0x05	; 5
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <frame>
     ba2:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <frame+0x1>
     ba6:	a0 93 f5 03 	sts	0x03F5, r26	; 0x8003f5 <frame+0x2>
     baa:	b0 93 f6 03 	sts	0x03F6, r27	; 0x8003f6 <frame+0x3>
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	95 e0       	ldi	r25, 0x05	; 5
     bb2:	a0 e0       	ldi	r26, 0x00	; 0
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <frame_FD>
     bba:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <frame_FD+0x1>
     bbe:	a0 93 3d 04 	sts	0x043D, r26	; 0x80043d <frame_FD+0x2>
     bc2:	b0 93 3e 04 	sts	0x043E, r27	; 0x80043e <frame_FD+0x3>
     bc6:	06 e0       	ldi	r16, 0x06	; 6
     bc8:	11 e0       	ldi	r17, 0x01	; 1
     bca:	84 e1       	ldi	r24, 0x14	; 20
     bcc:	e8 2e       	mov	r14, r24
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	f8 2e       	mov	r15, r24
     bd2:	d8 01       	movw	r26, r16
     bd4:	ed 91       	ld	r30, X+
     bd6:	fd 91       	ld	r31, X+
     bd8:	8d 01       	movw	r16, r26
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	80 81       	ld	r24, Z
     bde:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <digitalWrite>
     be2:	e0 16       	cp	r14, r16
     be4:	f1 06       	cpc	r15, r17
     be6:	a9 f7       	brne	.-22     	; 0xbd2 <setup+0x198>
     be8:	a8 96       	adiw	r28, 0x28	; 40
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	08 95       	ret

00000c06 <_Z29check_INA233_miscommunicationv>:
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <millis>
     c12:	00 91 c7 03 	lds	r16, 0x03C7	; 0x8003c7 <timeStamps>
     c16:	10 91 c8 03 	lds	r17, 0x03C8	; 0x8003c8 <timeStamps+0x1>
     c1a:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <timeStamps+0x2>
     c1e:	30 91 ca 03 	lds	r19, 0x03CA	; 0x8003ca <timeStamps+0x3>
     c22:	dc 01       	movw	r26, r24
     c24:	cb 01       	movw	r24, r22
     c26:	80 1b       	sub	r24, r16
     c28:	91 0b       	sbc	r25, r17
     c2a:	a2 0b       	sbc	r26, r18
     c2c:	b3 0b       	sbc	r27, r19
     c2e:	85 36       	cpi	r24, 0x65	; 101
     c30:	91 05       	cpc	r25, r1
     c32:	a1 05       	cpc	r26, r1
     c34:	b1 05       	cpc	r27, r1
     c36:	08 f1       	brcs	.+66     	; 0xc7a <_Z29check_INA233_miscommunicationv+0x74>
     c38:	c4 e1       	ldi	r28, 0x14	; 20
     c3a:	d1 e0       	ldi	r29, 0x01	; 1
     c3c:	06 e0       	ldi	r16, 0x06	; 6
     c3e:	11 e0       	ldi	r17, 0x01	; 1
     c40:	89 91       	ld	r24, Y+
     c42:	99 91       	ld	r25, Y+
     c44:	0e 94 9a 04 	call	0x934	; 0x934 <_ZN8INA233_S17testCommunicationEv>
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	39 f4       	brne	.+14     	; 0xc5a <_Z29check_INA233_miscommunicationv+0x54>
     c4c:	d8 01       	movw	r26, r16
     c4e:	ed 91       	ld	r30, X+
     c50:	fc 91       	ld	r31, X
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <digitalWrite>
     c5a:	0e 5f       	subi	r16, 0xFE	; 254
     c5c:	1f 4f       	sbci	r17, 0xFF	; 255
     c5e:	b1 e0       	ldi	r27, 0x01	; 1
     c60:	c2 32       	cpi	r28, 0x22	; 34
     c62:	db 07       	cpc	r29, r27
     c64:	69 f7       	brne	.-38     	; 0xc40 <_Z29check_INA233_miscommunicationv+0x3a>
     c66:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <millis>
     c6a:	60 93 c7 03 	sts	0x03C7, r22	; 0x8003c7 <timeStamps>
     c6e:	70 93 c8 03 	sts	0x03C8, r23	; 0x8003c8 <timeStamps+0x1>
     c72:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <timeStamps+0x2>
     c76:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <timeStamps+0x3>
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	08 95       	ret

00000c84 <loop>:
     c84:	8f 92       	push	r8
     c86:	9f 92       	push	r9
     c88:	af 92       	push	r10
     c8a:	bf 92       	push	r11
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	cf 93       	push	r28
     c96:	0e 94 03 06 	call	0xc06	; 0xc06 <_Z29check_INA233_miscommunicationv>
     c9a:	87 ea       	ldi	r24, 0xA7	; 167
     c9c:	93 e0       	ldi	r25, 0x03	; 3
     c9e:	0e 94 47 04 	call	0x88e	; 0x88e <_ZN8INA233_S10getCurrentEv>
     ca2:	ab 01       	movw	r20, r22
     ca4:	bc 01       	movw	r22, r24
     ca6:	22 e0       	ldi	r18, 0x02	; 2
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	87 ed       	ldi	r24, 0xD7	; 215
     cac:	94 e0       	ldi	r25, 0x04	; 4
     cae:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <_ZN5Print7printlnEdi>
     cb2:	83 e8       	ldi	r24, 0x83	; 131
     cb4:	94 e0       	ldi	r25, 0x04	; 4
     cb6:	0e 94 95 10 	call	0x212a	; 0x212a <_ZN10ACAN2517FD9availableEv>
     cba:	88 23       	and	r24, r24
     cbc:	61 f1       	breq	.+88     	; 0xd16 <loop+0x92>
     cbe:	6b e3       	ldi	r22, 0x3B	; 59
     cc0:	74 e0       	ldi	r23, 0x04	; 4
     cc2:	83 e8       	ldi	r24, 0x83	; 131
     cc4:	94 e0       	ldi	r25, 0x04	; 4
     cc6:	0e 94 b2 10 	call	0x2164	; 0x2164 <_ZN10ACAN2517FD7receiveER12CANFDMessage>
     cca:	6b e5       	ldi	r22, 0x5B	; 91
     ccc:	72 e0       	ldi	r23, 0x02	; 2
     cce:	87 ed       	ldi	r24, 0xD7	; 215
     cd0:	94 e0       	ldi	r25, 0x04	; 4
     cd2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN5Print5printEPKc>
     cd6:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <frame_FD+0x8>
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	61 f4       	brne	.+24     	; 0xcf6 <loop+0x72>
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	89 e0       	ldi	r24, 0x09	; 9
     ce2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <digitalWrite>
     ce6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <MosfetList+0x2>
     cea:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <MosfetList+0x3>
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	80 81       	ld	r24, Z
     cf2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <digitalWrite>
     cf6:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <frame_FD+0x8>
     cfa:	82 30       	cpi	r24, 0x02	; 2
     cfc:	61 f4       	brne	.+24     	; 0xd16 <loop+0x92>
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	89 e0       	ldi	r24, 0x09	; 9
     d02:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <digitalWrite>
     d06:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <MosfetList+0x2>
     d0a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <MosfetList+0x3>
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <digitalWrite>
     d16:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <millis>
     d1a:	c0 90 cb 03 	lds	r12, 0x03CB	; 0x8003cb <timeStamps+0x4>
     d1e:	d0 90 cc 03 	lds	r13, 0x03CC	; 0x8003cc <timeStamps+0x5>
     d22:	e0 90 cd 03 	lds	r14, 0x03CD	; 0x8003cd <timeStamps+0x6>
     d26:	f0 90 ce 03 	lds	r15, 0x03CE	; 0x8003ce <timeStamps+0x7>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	8c 19       	sub	r24, r12
     d30:	9d 09       	sbc	r25, r13
     d32:	ae 09       	sbc	r26, r14
     d34:	bf 09       	sbc	r27, r15
     d36:	85 36       	cpi	r24, 0x65	; 101
     d38:	91 05       	cpc	r25, r1
     d3a:	a1 05       	cpc	r26, r1
     d3c:	b1 05       	cpc	r27, r1
     d3e:	08 f4       	brcc	.+2      	; 0xd42 <loop+0xbe>
     d40:	54 c0       	rjmp	.+168    	; 0xdea <loop+0x166>
     d42:	80 e1       	ldi	r24, 0x10	; 16
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <frame>
     d4e:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <frame+0x1>
     d52:	a0 93 f5 03 	sts	0x03F5, r26	; 0x8003f5 <frame+0x2>
     d56:	b0 93 f6 03 	sts	0x03F6, r27	; 0x8003f6 <frame+0x3>
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <frame+0x7>
     d60:	87 e8       	ldi	r24, 0x87	; 135
     d62:	93 e0       	ldi	r25, 0x03	; 3
     d64:	0e 94 47 04 	call	0x88e	; 0x88e <_ZN8INA233_S10getCurrentEv>
     d68:	4b 01       	movw	r8, r22
     d6a:	5c 01       	movw	r10, r24
     d6c:	87 e8       	ldi	r24, 0x87	; 135
     d6e:	93 e0       	ldi	r25, 0x03	; 3
     d70:	0e 94 01 04 	call	0x802	; 0x802 <_ZN8INA233_S12getVoltage_LEv>
     d74:	6b 01       	movw	r12, r22
     d76:	7c 01       	movw	r14, r24
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	48 ec       	ldi	r20, 0xC8	; 200
     d7e:	52 e4       	ldi	r21, 0x42	; 66
     d80:	c5 01       	movw	r24, r10
     d82:	b4 01       	movw	r22, r8
     d84:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     d88:	0e 94 18 09 	call	0x1230	; 0x1230 <__fixsfsi>
     d8c:	c6 2f       	mov	r28, r22
     d8e:	70 93 f0 03 	sts	0x03F0, r23	; 0x8003f0 <CT_1+0x1>
     d92:	60 93 ef 03 	sts	0x03EF, r22	; 0x8003ef <CT_1>
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e2       	ldi	r20, 0x20	; 32
     d9c:	51 e4       	ldi	r21, 0x41	; 65
     d9e:	c7 01       	movw	r24, r14
     da0:	b6 01       	movw	r22, r12
     da2:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
     da6:	0e 94 18 09 	call	0x1230	; 0x1230 <__fixsfsi>
     daa:	70 93 f2 03 	sts	0x03F2, r23	; 0x8003f2 <CT_1+0x3>
     dae:	60 93 f1 03 	sts	0x03F1, r22	; 0x8003f1 <CT_1+0x2>
     db2:	c0 93 fb 03 	sts	0x03FB, r28	; 0x8003fb <frame+0x8>
     db6:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <CT_1+0x1>
     dba:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <frame+0x9>
     dbe:	60 93 fd 03 	sts	0x03FD, r22	; 0x8003fd <frame+0xa>
     dc2:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <CT_1+0x3>
     dc6:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <frame+0xb>
     dca:	63 ef       	ldi	r22, 0xF3	; 243
     dcc:	73 e0       	ldi	r23, 0x03	; 3
     dce:	83 e8       	ldi	r24, 0x83	; 131
     dd0:	94 e0       	ldi	r25, 0x04	; 4
     dd2:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage>
     dd6:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <millis>
     dda:	60 93 cb 03 	sts	0x03CB, r22	; 0x8003cb <timeStamps+0x4>
     dde:	70 93 cc 03 	sts	0x03CC, r23	; 0x8003cc <timeStamps+0x5>
     de2:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <timeStamps+0x6>
     de6:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <timeStamps+0x7>
     dea:	a8 95       	wdr
     dec:	cf 91       	pop	r28
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	af 90       	pop	r10
     dfa:	9f 90       	pop	r9
     dfc:	8f 90       	pop	r8
     dfe:	08 95       	ret

00000e00 <_GLOBAL__sub_I_can>:
};

struct INA233_Alarm_Config
{
  float overCurrent = 0, overVoltage = 0, underVoltage = 0;
  INA233_Alarm_Config(float oc, float ov, float uv) : overCurrent(oc), overVoltage(ov), underVoltage(uv) {}  
     e00:	eb ec       	ldi	r30, 0xCB	; 203
     e02:	f4 e0       	ldi	r31, 0x04	; 4
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e4       	ldi	r23, 0x40	; 64
     e0c:	40 83       	st	Z, r20
     e0e:	51 83       	std	Z+1, r21	; 0x01
     e10:	62 83       	std	Z+2, r22	; 0x02
     e12:	73 83       	std	Z+3, r23	; 0x03
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	a0 e5       	ldi	r26, 0x50	; 80
     e1a:	b1 e4       	ldi	r27, 0x41	; 65
     e1c:	84 83       	std	Z+4, r24	; 0x04
     e1e:	95 83       	std	Z+5, r25	; 0x05
     e20:	a6 83       	std	Z+6, r26	; 0x06
     e22:	b7 83       	std	Z+7, r27	; 0x07
     e24:	10 86       	std	Z+8, r1	; 0x08
     e26:	11 86       	std	Z+9, r1	; 0x09
     e28:	12 86       	std	Z+10, r1	; 0x0a
     e2a:	13 86       	std	Z+11, r1	; 0x0b
     e2c:	ef eb       	ldi	r30, 0xBF	; 191
     e2e:	f4 e0       	ldi	r31, 0x04	; 4
     e30:	40 83       	st	Z, r20
     e32:	51 83       	std	Z+1, r21	; 0x01
     e34:	62 83       	std	Z+2, r22	; 0x02
     e36:	73 83       	std	Z+3, r23	; 0x03
     e38:	84 83       	std	Z+4, r24	; 0x04
     e3a:	95 83       	std	Z+5, r25	; 0x05
     e3c:	a6 83       	std	Z+6, r26	; 0x06
     e3e:	b7 83       	std	Z+7, r27	; 0x07
     e40:	10 86       	std	Z+8, r1	; 0x08
     e42:	11 86       	std	Z+9, r1	; 0x09
     e44:	12 86       	std	Z+10, r1	; 0x0a
     e46:	13 86       	std	Z+11, r1	; 0x0b

// ___________________________ CANBUS SETTINGS ______________________________//
static const byte MCP2517_CS  = 7 ; // CS input of MCP2517
static const byte MCP2517_INT =  2 ; // INT output of MCP2517

ACAN2517FD can (MCP2517_CS, SPI, MCP2517_INT);
     e48:	22 e0       	ldi	r18, 0x02	; 2
     e4a:	41 e8       	ldi	r20, 0x81	; 129
     e4c:	55 e0       	ldi	r21, 0x05	; 5
     e4e:	67 e0       	ldi	r22, 0x07	; 7
     e50:	83 e8       	ldi	r24, 0x83	; 131
     e52:	94 e0       	ldi	r25, 0x04	; 4
     e54:	0e 94 56 10 	call	0x20ac	; 0x20ac <_ZN10ACAN2517FDC1EhR8SPIClassh>
	CANFDMessage frame_FD, frame;
     e58:	8b e3       	ldi	r24, 0x3B	; 59
     e5a:	94 e0       	ldi	r25, 0x04	; 4
     e5c:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN12CANFDMessageC1Ev>
     e60:	83 ef       	ldi	r24, 0xF3	; 243
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN12CANFDMessageC1Ev>
uint16_t default_address = 0b0100011100100111;
unsigned long timeStamps[10] = {0};


// creating each INA233 sensor object
INA233_S Sensor_1(adrSensor1, m_valueSensor1, cal_valueSensor1, alarmConfigSensor1), 
     e68:	8d b7       	in	r24, 0x3d	; 61
     e6a:	9e b7       	in	r25, 0x3e	; 62
     e6c:	0c 97       	sbiw	r24, 0x0c	; 12
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	9e bf       	out	0x3e, r25	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	8d bf       	out	0x3d, r24	; 61
     e78:	ad b7       	in	r26, 0x3d	; 61
     e7a:	be b7       	in	r27, 0x3e	; 62
     e7c:	11 96       	adiw	r26, 0x01	; 1
     e7e:	8c e0       	ldi	r24, 0x0C	; 12
     e80:	eb ec       	ldi	r30, 0xCB	; 203
     e82:	f4 e0       	ldi	r31, 0x04	; 4
     e84:	01 90       	ld	r0, Z+
     e86:	0d 92       	st	X+, r0
     e88:	8a 95       	dec	r24
     e8a:	e1 f7       	brne	.-8      	; 0xe84 <_GLOBAL__sub_I_can+0x84>
     e8c:	23 e3       	ldi	r18, 0x33	; 51
     e8e:	38 e0       	ldi	r19, 0x08	; 8
     e90:	44 e3       	ldi	r20, 0x34	; 52
     e92:	53 e0       	ldi	r21, 0x03	; 3
     e94:	60 e4       	ldi	r22, 0x40	; 64
     e96:	87 ea       	ldi	r24, 0xA7	; 167
     e98:	93 e0       	ldi	r25, 0x03	; 3
     e9a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_2(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     e9e:	8d b7       	in	r24, 0x3d	; 61
     ea0:	9e b7       	in	r25, 0x3e	; 62
     ea2:	0c 97       	sbiw	r24, 0x0c	; 12
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	9e bf       	out	0x3e, r25	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	8d bf       	out	0x3d, r24	; 61
     eae:	ad b7       	in	r26, 0x3d	; 61
     eb0:	be b7       	in	r27, 0x3e	; 62
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	8c e0       	ldi	r24, 0x0C	; 12
     eb6:	ef eb       	ldi	r30, 0xBF	; 191
     eb8:	f4 e0       	ldi	r31, 0x04	; 4
     eba:	01 90       	ld	r0, Z+
     ebc:	0d 92       	st	X+, r0
     ebe:	8a 95       	dec	r24
     ec0:	e1 f7       	brne	.-8      	; 0xeba <_GLOBAL__sub_I_can+0xba>
     ec2:	23 e3       	ldi	r18, 0x33	; 51
     ec4:	38 e0       	ldi	r19, 0x08	; 8
     ec6:	44 e3       	ldi	r20, 0x34	; 52
     ec8:	53 e0       	ldi	r21, 0x03	; 3
     eca:	61 e4       	ldi	r22, 0x41	; 65
     ecc:	87 e8       	ldi	r24, 0x87	; 135
     ece:	93 e0       	ldi	r25, 0x03	; 3
     ed0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_3(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     ed4:	8d b7       	in	r24, 0x3d	; 61
     ed6:	9e b7       	in	r25, 0x3e	; 62
     ed8:	0c 97       	sbiw	r24, 0x0c	; 12
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	9e bf       	out	0x3e, r25	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	8d bf       	out	0x3d, r24	; 61
     ee4:	ad b7       	in	r26, 0x3d	; 61
     ee6:	be b7       	in	r27, 0x3e	; 62
     ee8:	11 96       	adiw	r26, 0x01	; 1
     eea:	8c e0       	ldi	r24, 0x0C	; 12
     eec:	ef eb       	ldi	r30, 0xBF	; 191
     eee:	f4 e0       	ldi	r31, 0x04	; 4
     ef0:	01 90       	ld	r0, Z+
     ef2:	0d 92       	st	X+, r0
     ef4:	8a 95       	dec	r24
     ef6:	e1 f7       	brne	.-8      	; 0xef0 <_GLOBAL__sub_I_can+0xf0>
     ef8:	23 e3       	ldi	r18, 0x33	; 51
     efa:	38 e0       	ldi	r19, 0x08	; 8
     efc:	44 e3       	ldi	r20, 0x34	; 52
     efe:	53 e0       	ldi	r21, 0x03	; 3
     f00:	61 e4       	ldi	r22, 0x41	; 65
     f02:	87 e6       	ldi	r24, 0x67	; 103
     f04:	93 e0       	ldi	r25, 0x03	; 3
     f06:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_4(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     f0a:	8d b7       	in	r24, 0x3d	; 61
     f0c:	9e b7       	in	r25, 0x3e	; 62
     f0e:	84 96       	adiw	r24, 0x24	; 36
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	9e bf       	out	0x3e, r25	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	8d bf       	out	0x3d, r24	; 61
     f1a:	0c 97       	sbiw	r24, 0x0c	; 12
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	9e bf       	out	0x3e, r25	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	8d bf       	out	0x3d, r24	; 61
     f26:	ad b7       	in	r26, 0x3d	; 61
     f28:	be b7       	in	r27, 0x3e	; 62
     f2a:	11 96       	adiw	r26, 0x01	; 1
     f2c:	8c e0       	ldi	r24, 0x0C	; 12
     f2e:	ef eb       	ldi	r30, 0xBF	; 191
     f30:	f4 e0       	ldi	r31, 0x04	; 4
     f32:	01 90       	ld	r0, Z+
     f34:	0d 92       	st	X+, r0
     f36:	8a 95       	dec	r24
     f38:	e1 f7       	brne	.-8      	; 0xf32 <_GLOBAL__sub_I_can+0x132>
     f3a:	23 e3       	ldi	r18, 0x33	; 51
     f3c:	38 e0       	ldi	r19, 0x08	; 8
     f3e:	44 e3       	ldi	r20, 0x34	; 52
     f40:	53 e0       	ldi	r21, 0x03	; 3
     f42:	61 e4       	ldi	r22, 0x41	; 65
     f44:	87 e4       	ldi	r24, 0x47	; 71
     f46:	93 e0       	ldi	r25, 0x03	; 3
     f48:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_5(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     f4c:	8d b7       	in	r24, 0x3d	; 61
     f4e:	9e b7       	in	r25, 0x3e	; 62
     f50:	0c 97       	sbiw	r24, 0x0c	; 12
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	9e bf       	out	0x3e, r25	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	8d bf       	out	0x3d, r24	; 61
     f5c:	ad b7       	in	r26, 0x3d	; 61
     f5e:	be b7       	in	r27, 0x3e	; 62
     f60:	11 96       	adiw	r26, 0x01	; 1
     f62:	8c e0       	ldi	r24, 0x0C	; 12
     f64:	ef eb       	ldi	r30, 0xBF	; 191
     f66:	f4 e0       	ldi	r31, 0x04	; 4
     f68:	01 90       	ld	r0, Z+
     f6a:	0d 92       	st	X+, r0
     f6c:	8a 95       	dec	r24
     f6e:	e1 f7       	brne	.-8      	; 0xf68 <_GLOBAL__sub_I_can+0x168>
     f70:	23 e3       	ldi	r18, 0x33	; 51
     f72:	38 e0       	ldi	r19, 0x08	; 8
     f74:	44 e3       	ldi	r20, 0x34	; 52
     f76:	53 e0       	ldi	r21, 0x03	; 3
     f78:	61 e4       	ldi	r22, 0x41	; 65
     f7a:	87 e2       	ldi	r24, 0x27	; 39
     f7c:	93 e0       	ldi	r25, 0x03	; 3
     f7e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_6(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2),
     f82:	8d b7       	in	r24, 0x3d	; 61
     f84:	9e b7       	in	r25, 0x3e	; 62
     f86:	0c 97       	sbiw	r24, 0x0c	; 12
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	9e bf       	out	0x3e, r25	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	8d bf       	out	0x3d, r24	; 61
     f92:	ad b7       	in	r26, 0x3d	; 61
     f94:	be b7       	in	r27, 0x3e	; 62
     f96:	11 96       	adiw	r26, 0x01	; 1
     f98:	8c e0       	ldi	r24, 0x0C	; 12
     f9a:	ef eb       	ldi	r30, 0xBF	; 191
     f9c:	f4 e0       	ldi	r31, 0x04	; 4
     f9e:	01 90       	ld	r0, Z+
     fa0:	0d 92       	st	X+, r0
     fa2:	8a 95       	dec	r24
     fa4:	e1 f7       	brne	.-8      	; 0xf9e <_GLOBAL__sub_I_can+0x19e>
     fa6:	23 e3       	ldi	r18, 0x33	; 51
     fa8:	38 e0       	ldi	r19, 0x08	; 8
     faa:	44 e3       	ldi	r20, 0x34	; 52
     fac:	53 e0       	ldi	r21, 0x03	; 3
     fae:	61 e4       	ldi	r22, 0x41	; 65
     fb0:	87 e0       	ldi	r24, 0x07	; 7
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
		Sensor_7(adrSensor2, m_valueSensor2, cal_valueSensor2, alarmConfigSensor2);
     fb8:	8d b7       	in	r24, 0x3d	; 61
     fba:	9e b7       	in	r25, 0x3e	; 62
     fbc:	84 96       	adiw	r24, 0x24	; 36
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	9e bf       	out	0x3e, r25	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	8d bf       	out	0x3d, r24	; 61
     fc8:	0c 97       	sbiw	r24, 0x0c	; 12
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	9e bf       	out	0x3e, r25	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	8d bf       	out	0x3d, r24	; 61
     fd4:	ad b7       	in	r26, 0x3d	; 61
     fd6:	be b7       	in	r27, 0x3e	; 62
     fd8:	11 96       	adiw	r26, 0x01	; 1
     fda:	8c e0       	ldi	r24, 0x0C	; 12
     fdc:	ef eb       	ldi	r30, 0xBF	; 191
     fde:	f4 e0       	ldi	r31, 0x04	; 4
     fe0:	01 90       	ld	r0, Z+
     fe2:	0d 92       	st	X+, r0
     fe4:	8a 95       	dec	r24
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <_GLOBAL__sub_I_can+0x1e0>
     fe8:	23 e3       	ldi	r18, 0x33	; 51
     fea:	38 e0       	ldi	r19, 0x08	; 8
     fec:	44 e3       	ldi	r20, 0x34	; 52
     fee:	53 e0       	ldi	r21, 0x03	; 3
     ff0:	61 e4       	ldi	r22, 0x41	; 65
     ff2:	87 ee       	ldi	r24, 0xE7	; 231
     ff4:	92 e0       	ldi	r25, 0x02	; 2
     ff6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN8INA233_SC1Ehjj19INA233_Alarm_Config>
// INA233 [0 to 6] are the mosfets, [7 to 9] others
INA233_S* SensorList[] = { &Sensor_1, &Sensor_2, &Sensor_3, &Sensor_4, &Sensor_5, &Sensor_6, &Sensor_7 };


// Create instances of each mosfet object
mosfet	p1(p1_ACM_E_Pin), 
     ffa:	63 e0       	ldi	r22, 0x03	; 3
     ffc:	86 ee       	ldi	r24, 0xE6	; 230
     ffe:	92 e0       	ldi	r25, 0x02	; 2
    1000:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN6mosfetC1Eh>
		p2(p2_ACM_E_Pin), 
    1004:	65 e0       	ldi	r22, 0x05	; 5
    1006:	85 ee       	ldi	r24, 0xE5	; 229
    1008:	92 e0       	ldi	r25, 0x02	; 2
    100a:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN6mosfetC1Eh>
		p3(p3_ACM_E_Pin), 
    100e:	66 e0       	ldi	r22, 0x06	; 6
    1010:	84 ee       	ldi	r24, 0xE4	; 228
    1012:	92 e0       	ldi	r25, 0x02	; 2
    1014:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN6mosfetC1Eh>
		p4(p4_ACM_E_Pin),
    1018:	6a e0       	ldi	r22, 0x0A	; 10
    101a:	83 ee       	ldi	r24, 0xE3	; 227
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN6mosfetC1Eh>
		p5(p5_ACM_E_Pin),
    1022:	6f e0       	ldi	r22, 0x0F	; 15
    1024:	82 ee       	ldi	r24, 0xE2	; 226
    1026:	92 e0       	ldi	r25, 0x02	; 2
    1028:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN6mosfetC1Eh>
		p6(p6_ACM_E_Pin),
    102c:	60 e1       	ldi	r22, 0x10	; 16
    102e:	81 ee       	ldi	r24, 0xE1	; 225
    1030:	92 e0       	ldi	r25, 0x02	; 2
    1032:	0e 94 17 05 	call	0xa2e	; 0xa2e <_ZN6mosfetC1Eh>
		p7(p7_ACM_E_Pin);
    1036:	8d b7       	in	r24, 0x3d	; 61
    1038:	9e b7       	in	r25, 0x3e	; 62
    103a:	0c 96       	adiw	r24, 0x0c	; 12
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	9e bf       	out	0x3e, r25	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	8d bf       	out	0x3d, r24	; 61
    1046:	61 e1       	ldi	r22, 0x11	; 17
    1048:	80 ee       	ldi	r24, 0xE0	; 224
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <_ZN6mosfetC1Eh>

00001050 <_GLOBAL__sub_D_can>:
//······················································································································
// Destructor
//······················································································································

  public: ~ ACANFDBuffer (void) {
    delete [] mBuffer ;
    1050:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <can+0x26>
    1054:	90 91 aa 04 	lds	r25, 0x04AA	; 0x8004aa <can+0x27>
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	11 f0       	breq	.+4      	; 0x1060 <_GLOBAL__sub_D_can+0x10>
    105c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_ZdaPv>
    1060:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <can+0x10>
    1064:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <can+0x11>
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	11 f0       	breq	.+4      	; 0x1070 <_GLOBAL__sub_D_can+0x20>
    106c:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <_ZdaPv>
    1070:	08 95       	ret

00001072 <__subsf3>:
    1072:	50 58       	subi	r21, 0x80	; 128

00001074 <__addsf3>:
    1074:	bb 27       	eor	r27, r27
    1076:	aa 27       	eor	r26, r26
    1078:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__addsf3x>
    107c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_round>
    1080:	0e 94 94 09 	call	0x1328	; 0x1328 <__fp_pscA>
    1084:	38 f0       	brcs	.+14     	; 0x1094 <__addsf3+0x20>
    1086:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fp_pscB>
    108a:	20 f0       	brcs	.+8      	; 0x1094 <__addsf3+0x20>
    108c:	39 f4       	brne	.+14     	; 0x109c <__addsf3+0x28>
    108e:	9f 3f       	cpi	r25, 0xFF	; 255
    1090:	19 f4       	brne	.+6      	; 0x1098 <__addsf3+0x24>
    1092:	26 f4       	brtc	.+8      	; 0x109c <__addsf3+0x28>
    1094:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__fp_nan>
    1098:	0e f4       	brtc	.+2      	; 0x109c <__addsf3+0x28>
    109a:	e0 95       	com	r30
    109c:	e7 fb       	bst	r30, 7
    109e:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_inf>

000010a2 <__addsf3x>:
    10a2:	e9 2f       	mov	r30, r25
    10a4:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_split3>
    10a8:	58 f3       	brcs	.-42     	; 0x1080 <__addsf3+0xc>
    10aa:	ba 17       	cp	r27, r26
    10ac:	62 07       	cpc	r22, r18
    10ae:	73 07       	cpc	r23, r19
    10b0:	84 07       	cpc	r24, r20
    10b2:	95 07       	cpc	r25, r21
    10b4:	20 f0       	brcs	.+8      	; 0x10be <__addsf3x+0x1c>
    10b6:	79 f4       	brne	.+30     	; 0x10d6 <__addsf3x+0x34>
    10b8:	a6 f5       	brtc	.+104    	; 0x1122 <__addsf3x+0x80>
    10ba:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_zero>
    10be:	0e f4       	brtc	.+2      	; 0x10c2 <__addsf3x+0x20>
    10c0:	e0 95       	com	r30
    10c2:	0b 2e       	mov	r0, r27
    10c4:	ba 2f       	mov	r27, r26
    10c6:	a0 2d       	mov	r26, r0
    10c8:	0b 01       	movw	r0, r22
    10ca:	b9 01       	movw	r22, r18
    10cc:	90 01       	movw	r18, r0
    10ce:	0c 01       	movw	r0, r24
    10d0:	ca 01       	movw	r24, r20
    10d2:	a0 01       	movw	r20, r0
    10d4:	11 24       	eor	r1, r1
    10d6:	ff 27       	eor	r31, r31
    10d8:	59 1b       	sub	r21, r25
    10da:	99 f0       	breq	.+38     	; 0x1102 <__addsf3x+0x60>
    10dc:	59 3f       	cpi	r21, 0xF9	; 249
    10de:	50 f4       	brcc	.+20     	; 0x10f4 <__addsf3x+0x52>
    10e0:	50 3e       	cpi	r21, 0xE0	; 224
    10e2:	68 f1       	brcs	.+90     	; 0x113e <__addsf3x+0x9c>
    10e4:	1a 16       	cp	r1, r26
    10e6:	f0 40       	sbci	r31, 0x00	; 0
    10e8:	a2 2f       	mov	r26, r18
    10ea:	23 2f       	mov	r18, r19
    10ec:	34 2f       	mov	r19, r20
    10ee:	44 27       	eor	r20, r20
    10f0:	58 5f       	subi	r21, 0xF8	; 248
    10f2:	f3 cf       	rjmp	.-26     	; 0x10da <__addsf3x+0x38>
    10f4:	46 95       	lsr	r20
    10f6:	37 95       	ror	r19
    10f8:	27 95       	ror	r18
    10fa:	a7 95       	ror	r26
    10fc:	f0 40       	sbci	r31, 0x00	; 0
    10fe:	53 95       	inc	r21
    1100:	c9 f7       	brne	.-14     	; 0x10f4 <__addsf3x+0x52>
    1102:	7e f4       	brtc	.+30     	; 0x1122 <__addsf3x+0x80>
    1104:	1f 16       	cp	r1, r31
    1106:	ba 0b       	sbc	r27, r26
    1108:	62 0b       	sbc	r22, r18
    110a:	73 0b       	sbc	r23, r19
    110c:	84 0b       	sbc	r24, r20
    110e:	ba f0       	brmi	.+46     	; 0x113e <__addsf3x+0x9c>
    1110:	91 50       	subi	r25, 0x01	; 1
    1112:	a1 f0       	breq	.+40     	; 0x113c <__addsf3x+0x9a>
    1114:	ff 0f       	add	r31, r31
    1116:	bb 1f       	adc	r27, r27
    1118:	66 1f       	adc	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	88 1f       	adc	r24, r24
    111e:	c2 f7       	brpl	.-16     	; 0x1110 <__addsf3x+0x6e>
    1120:	0e c0       	rjmp	.+28     	; 0x113e <__addsf3x+0x9c>
    1122:	ba 0f       	add	r27, r26
    1124:	62 1f       	adc	r22, r18
    1126:	73 1f       	adc	r23, r19
    1128:	84 1f       	adc	r24, r20
    112a:	48 f4       	brcc	.+18     	; 0x113e <__addsf3x+0x9c>
    112c:	87 95       	ror	r24
    112e:	77 95       	ror	r23
    1130:	67 95       	ror	r22
    1132:	b7 95       	ror	r27
    1134:	f7 95       	ror	r31
    1136:	9e 3f       	cpi	r25, 0xFE	; 254
    1138:	08 f0       	brcs	.+2      	; 0x113c <__addsf3x+0x9a>
    113a:	b0 cf       	rjmp	.-160    	; 0x109c <__addsf3+0x28>
    113c:	93 95       	inc	r25
    113e:	88 0f       	add	r24, r24
    1140:	08 f0       	brcs	.+2      	; 0x1144 <__addsf3x+0xa2>
    1142:	99 27       	eor	r25, r25
    1144:	ee 0f       	add	r30, r30
    1146:	97 95       	ror	r25
    1148:	87 95       	ror	r24
    114a:	08 95       	ret

0000114c <__divsf3>:
    114c:	0e 94 ba 08 	call	0x1174	; 0x1174 <__divsf3x>
    1150:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_round>
    1154:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fp_pscB>
    1158:	58 f0       	brcs	.+22     	; 0x1170 <__divsf3+0x24>
    115a:	0e 94 94 09 	call	0x1328	; 0x1328 <__fp_pscA>
    115e:	40 f0       	brcs	.+16     	; 0x1170 <__divsf3+0x24>
    1160:	29 f4       	brne	.+10     	; 0x116c <__divsf3+0x20>
    1162:	5f 3f       	cpi	r21, 0xFF	; 255
    1164:	29 f0       	breq	.+10     	; 0x1170 <__divsf3+0x24>
    1166:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_inf>
    116a:	51 11       	cpse	r21, r1
    116c:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_szero>
    1170:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__fp_nan>

00001174 <__divsf3x>:
    1174:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_split3>
    1178:	68 f3       	brcs	.-38     	; 0x1154 <__divsf3+0x8>

0000117a <__divsf3_pse>:
    117a:	99 23       	and	r25, r25
    117c:	b1 f3       	breq	.-20     	; 0x116a <__divsf3+0x1e>
    117e:	55 23       	and	r21, r21
    1180:	91 f3       	breq	.-28     	; 0x1166 <__divsf3+0x1a>
    1182:	95 1b       	sub	r25, r21
    1184:	55 0b       	sbc	r21, r21
    1186:	bb 27       	eor	r27, r27
    1188:	aa 27       	eor	r26, r26
    118a:	62 17       	cp	r22, r18
    118c:	73 07       	cpc	r23, r19
    118e:	84 07       	cpc	r24, r20
    1190:	38 f0       	brcs	.+14     	; 0x11a0 <__divsf3_pse+0x26>
    1192:	9f 5f       	subi	r25, 0xFF	; 255
    1194:	5f 4f       	sbci	r21, 0xFF	; 255
    1196:	22 0f       	add	r18, r18
    1198:	33 1f       	adc	r19, r19
    119a:	44 1f       	adc	r20, r20
    119c:	aa 1f       	adc	r26, r26
    119e:	a9 f3       	breq	.-22     	; 0x118a <__divsf3_pse+0x10>
    11a0:	35 d0       	rcall	.+106    	; 0x120c <__divsf3_pse+0x92>
    11a2:	0e 2e       	mov	r0, r30
    11a4:	3a f0       	brmi	.+14     	; 0x11b4 <__divsf3_pse+0x3a>
    11a6:	e0 e8       	ldi	r30, 0x80	; 128
    11a8:	32 d0       	rcall	.+100    	; 0x120e <__divsf3_pse+0x94>
    11aa:	91 50       	subi	r25, 0x01	; 1
    11ac:	50 40       	sbci	r21, 0x00	; 0
    11ae:	e6 95       	lsr	r30
    11b0:	00 1c       	adc	r0, r0
    11b2:	ca f7       	brpl	.-14     	; 0x11a6 <__divsf3_pse+0x2c>
    11b4:	2b d0       	rcall	.+86     	; 0x120c <__divsf3_pse+0x92>
    11b6:	fe 2f       	mov	r31, r30
    11b8:	29 d0       	rcall	.+82     	; 0x120c <__divsf3_pse+0x92>
    11ba:	66 0f       	add	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	88 1f       	adc	r24, r24
    11c0:	bb 1f       	adc	r27, r27
    11c2:	26 17       	cp	r18, r22
    11c4:	37 07       	cpc	r19, r23
    11c6:	48 07       	cpc	r20, r24
    11c8:	ab 07       	cpc	r26, r27
    11ca:	b0 e8       	ldi	r27, 0x80	; 128
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <__divsf3_pse+0x56>
    11ce:	bb 0b       	sbc	r27, r27
    11d0:	80 2d       	mov	r24, r0
    11d2:	bf 01       	movw	r22, r30
    11d4:	ff 27       	eor	r31, r31
    11d6:	93 58       	subi	r25, 0x83	; 131
    11d8:	5f 4f       	sbci	r21, 0xFF	; 255
    11da:	3a f0       	brmi	.+14     	; 0x11ea <__divsf3_pse+0x70>
    11dc:	9e 3f       	cpi	r25, 0xFE	; 254
    11de:	51 05       	cpc	r21, r1
    11e0:	78 f0       	brcs	.+30     	; 0x1200 <__divsf3_pse+0x86>
    11e2:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_inf>
    11e6:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_szero>
    11ea:	5f 3f       	cpi	r21, 0xFF	; 255
    11ec:	e4 f3       	brlt	.-8      	; 0x11e6 <__divsf3_pse+0x6c>
    11ee:	98 3e       	cpi	r25, 0xE8	; 232
    11f0:	d4 f3       	brlt	.-12     	; 0x11e6 <__divsf3_pse+0x6c>
    11f2:	86 95       	lsr	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	b7 95       	ror	r27
    11fa:	f7 95       	ror	r31
    11fc:	9f 5f       	subi	r25, 0xFF	; 255
    11fe:	c9 f7       	brne	.-14     	; 0x11f2 <__divsf3_pse+0x78>
    1200:	88 0f       	add	r24, r24
    1202:	91 1d       	adc	r25, r1
    1204:	96 95       	lsr	r25
    1206:	87 95       	ror	r24
    1208:	97 f9       	bld	r25, 7
    120a:	08 95       	ret
    120c:	e1 e0       	ldi	r30, 0x01	; 1
    120e:	66 0f       	add	r22, r22
    1210:	77 1f       	adc	r23, r23
    1212:	88 1f       	adc	r24, r24
    1214:	bb 1f       	adc	r27, r27
    1216:	62 17       	cp	r22, r18
    1218:	73 07       	cpc	r23, r19
    121a:	84 07       	cpc	r24, r20
    121c:	ba 07       	cpc	r27, r26
    121e:	20 f0       	brcs	.+8      	; 0x1228 <__divsf3_pse+0xae>
    1220:	62 1b       	sub	r22, r18
    1222:	73 0b       	sbc	r23, r19
    1224:	84 0b       	sbc	r24, r20
    1226:	ba 0b       	sbc	r27, r26
    1228:	ee 1f       	adc	r30, r30
    122a:	88 f7       	brcc	.-30     	; 0x120e <__divsf3_pse+0x94>
    122c:	e0 95       	com	r30
    122e:	08 95       	ret

00001230 <__fixsfsi>:
    1230:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixunssfsi>
    1234:	68 94       	set
    1236:	b1 11       	cpse	r27, r1
    1238:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_szero>
    123c:	08 95       	ret

0000123e <__fixunssfsi>:
    123e:	0e 94 bb 09 	call	0x1376	; 0x1376 <__fp_splitA>
    1242:	88 f0       	brcs	.+34     	; 0x1266 <__fixunssfsi+0x28>
    1244:	9f 57       	subi	r25, 0x7F	; 127
    1246:	98 f0       	brcs	.+38     	; 0x126e <__fixunssfsi+0x30>
    1248:	b9 2f       	mov	r27, r25
    124a:	99 27       	eor	r25, r25
    124c:	b7 51       	subi	r27, 0x17	; 23
    124e:	b0 f0       	brcs	.+44     	; 0x127c <__fixunssfsi+0x3e>
    1250:	e1 f0       	breq	.+56     	; 0x128a <__fixunssfsi+0x4c>
    1252:	66 0f       	add	r22, r22
    1254:	77 1f       	adc	r23, r23
    1256:	88 1f       	adc	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	1a f0       	brmi	.+6      	; 0x1262 <__fixunssfsi+0x24>
    125c:	ba 95       	dec	r27
    125e:	c9 f7       	brne	.-14     	; 0x1252 <__fixunssfsi+0x14>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <__fixunssfsi+0x4c>
    1262:	b1 30       	cpi	r27, 0x01	; 1
    1264:	91 f0       	breq	.+36     	; 0x128a <__fixunssfsi+0x4c>
    1266:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__fp_zero>
    126a:	b1 e0       	ldi	r27, 0x01	; 1
    126c:	08 95       	ret
    126e:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_zero>
    1272:	67 2f       	mov	r22, r23
    1274:	78 2f       	mov	r23, r24
    1276:	88 27       	eor	r24, r24
    1278:	b8 5f       	subi	r27, 0xF8	; 248
    127a:	39 f0       	breq	.+14     	; 0x128a <__fixunssfsi+0x4c>
    127c:	b9 3f       	cpi	r27, 0xF9	; 249
    127e:	cc f3       	brlt	.-14     	; 0x1272 <__fixunssfsi+0x34>
    1280:	86 95       	lsr	r24
    1282:	77 95       	ror	r23
    1284:	67 95       	ror	r22
    1286:	b3 95       	inc	r27
    1288:	d9 f7       	brne	.-10     	; 0x1280 <__fixunssfsi+0x42>
    128a:	3e f4       	brtc	.+14     	; 0x129a <__fixunssfsi+0x5c>
    128c:	90 95       	com	r25
    128e:	80 95       	com	r24
    1290:	70 95       	com	r23
    1292:	61 95       	neg	r22
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	8f 4f       	sbci	r24, 0xFF	; 255
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	08 95       	ret

0000129c <__floatunsisf>:
    129c:	e8 94       	clt
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <__floatsisf+0x12>

000012a0 <__floatsisf>:
    12a0:	97 fb       	bst	r25, 7
    12a2:	3e f4       	brtc	.+14     	; 0x12b2 <__floatsisf+0x12>
    12a4:	90 95       	com	r25
    12a6:	80 95       	com	r24
    12a8:	70 95       	com	r23
    12aa:	61 95       	neg	r22
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	8f 4f       	sbci	r24, 0xFF	; 255
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	99 23       	and	r25, r25
    12b4:	a9 f0       	breq	.+42     	; 0x12e0 <__floatsisf+0x40>
    12b6:	f9 2f       	mov	r31, r25
    12b8:	96 e9       	ldi	r25, 0x96	; 150
    12ba:	bb 27       	eor	r27, r27
    12bc:	93 95       	inc	r25
    12be:	f6 95       	lsr	r31
    12c0:	87 95       	ror	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	b7 95       	ror	r27
    12c8:	f1 11       	cpse	r31, r1
    12ca:	f8 cf       	rjmp	.-16     	; 0x12bc <__floatsisf+0x1c>
    12cc:	fa f4       	brpl	.+62     	; 0x130c <__floatsisf+0x6c>
    12ce:	bb 0f       	add	r27, r27
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <__floatsisf+0x36>
    12d2:	60 ff       	sbrs	r22, 0
    12d4:	1b c0       	rjmp	.+54     	; 0x130c <__floatsisf+0x6c>
    12d6:	6f 5f       	subi	r22, 0xFF	; 255
    12d8:	7f 4f       	sbci	r23, 0xFF	; 255
    12da:	8f 4f       	sbci	r24, 0xFF	; 255
    12dc:	9f 4f       	sbci	r25, 0xFF	; 255
    12de:	16 c0       	rjmp	.+44     	; 0x130c <__floatsisf+0x6c>
    12e0:	88 23       	and	r24, r24
    12e2:	11 f0       	breq	.+4      	; 0x12e8 <__floatsisf+0x48>
    12e4:	96 e9       	ldi	r25, 0x96	; 150
    12e6:	11 c0       	rjmp	.+34     	; 0x130a <__floatsisf+0x6a>
    12e8:	77 23       	and	r23, r23
    12ea:	21 f0       	breq	.+8      	; 0x12f4 <__floatsisf+0x54>
    12ec:	9e e8       	ldi	r25, 0x8E	; 142
    12ee:	87 2f       	mov	r24, r23
    12f0:	76 2f       	mov	r23, r22
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <__floatsisf+0x5e>
    12f4:	66 23       	and	r22, r22
    12f6:	71 f0       	breq	.+28     	; 0x1314 <__floatsisf+0x74>
    12f8:	96 e8       	ldi	r25, 0x86	; 134
    12fa:	86 2f       	mov	r24, r22
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	2a f0       	brmi	.+10     	; 0x130c <__floatsisf+0x6c>
    1302:	9a 95       	dec	r25
    1304:	66 0f       	add	r22, r22
    1306:	77 1f       	adc	r23, r23
    1308:	88 1f       	adc	r24, r24
    130a:	da f7       	brpl	.-10     	; 0x1302 <__floatsisf+0x62>
    130c:	88 0f       	add	r24, r24
    130e:	96 95       	lsr	r25
    1310:	87 95       	ror	r24
    1312:	97 f9       	bld	r25, 7
    1314:	08 95       	ret

00001316 <__fp_inf>:
    1316:	97 f9       	bld	r25, 7
    1318:	9f 67       	ori	r25, 0x7F	; 127
    131a:	80 e8       	ldi	r24, 0x80	; 128
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	08 95       	ret

00001322 <__fp_nan>:
    1322:	9f ef       	ldi	r25, 0xFF	; 255
    1324:	80 ec       	ldi	r24, 0xC0	; 192
    1326:	08 95       	ret

00001328 <__fp_pscA>:
    1328:	00 24       	eor	r0, r0
    132a:	0a 94       	dec	r0
    132c:	16 16       	cp	r1, r22
    132e:	17 06       	cpc	r1, r23
    1330:	18 06       	cpc	r1, r24
    1332:	09 06       	cpc	r0, r25
    1334:	08 95       	ret

00001336 <__fp_pscB>:
    1336:	00 24       	eor	r0, r0
    1338:	0a 94       	dec	r0
    133a:	12 16       	cp	r1, r18
    133c:	13 06       	cpc	r1, r19
    133e:	14 06       	cpc	r1, r20
    1340:	05 06       	cpc	r0, r21
    1342:	08 95       	ret

00001344 <__fp_round>:
    1344:	09 2e       	mov	r0, r25
    1346:	03 94       	inc	r0
    1348:	00 0c       	add	r0, r0
    134a:	11 f4       	brne	.+4      	; 0x1350 <__fp_round+0xc>
    134c:	88 23       	and	r24, r24
    134e:	52 f0       	brmi	.+20     	; 0x1364 <__fp_round+0x20>
    1350:	bb 0f       	add	r27, r27
    1352:	40 f4       	brcc	.+16     	; 0x1364 <__fp_round+0x20>
    1354:	bf 2b       	or	r27, r31
    1356:	11 f4       	brne	.+4      	; 0x135c <__fp_round+0x18>
    1358:	60 ff       	sbrs	r22, 0
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <__fp_round+0x20>
    135c:	6f 5f       	subi	r22, 0xFF	; 255
    135e:	7f 4f       	sbci	r23, 0xFF	; 255
    1360:	8f 4f       	sbci	r24, 0xFF	; 255
    1362:	9f 4f       	sbci	r25, 0xFF	; 255
    1364:	08 95       	ret

00001366 <__fp_split3>:
    1366:	57 fd       	sbrc	r21, 7
    1368:	90 58       	subi	r25, 0x80	; 128
    136a:	44 0f       	add	r20, r20
    136c:	55 1f       	adc	r21, r21
    136e:	59 f0       	breq	.+22     	; 0x1386 <__fp_splitA+0x10>
    1370:	5f 3f       	cpi	r21, 0xFF	; 255
    1372:	71 f0       	breq	.+28     	; 0x1390 <__fp_splitA+0x1a>
    1374:	47 95       	ror	r20

00001376 <__fp_splitA>:
    1376:	88 0f       	add	r24, r24
    1378:	97 fb       	bst	r25, 7
    137a:	99 1f       	adc	r25, r25
    137c:	61 f0       	breq	.+24     	; 0x1396 <__fp_splitA+0x20>
    137e:	9f 3f       	cpi	r25, 0xFF	; 255
    1380:	79 f0       	breq	.+30     	; 0x13a0 <__fp_splitA+0x2a>
    1382:	87 95       	ror	r24
    1384:	08 95       	ret
    1386:	12 16       	cp	r1, r18
    1388:	13 06       	cpc	r1, r19
    138a:	14 06       	cpc	r1, r20
    138c:	55 1f       	adc	r21, r21
    138e:	f2 cf       	rjmp	.-28     	; 0x1374 <__fp_split3+0xe>
    1390:	46 95       	lsr	r20
    1392:	f1 df       	rcall	.-30     	; 0x1376 <__fp_splitA>
    1394:	08 c0       	rjmp	.+16     	; 0x13a6 <__fp_splitA+0x30>
    1396:	16 16       	cp	r1, r22
    1398:	17 06       	cpc	r1, r23
    139a:	18 06       	cpc	r1, r24
    139c:	99 1f       	adc	r25, r25
    139e:	f1 cf       	rjmp	.-30     	; 0x1382 <__fp_splitA+0xc>
    13a0:	86 95       	lsr	r24
    13a2:	71 05       	cpc	r23, r1
    13a4:	61 05       	cpc	r22, r1
    13a6:	08 94       	sec
    13a8:	08 95       	ret

000013aa <__fp_zero>:
    13aa:	e8 94       	clt

000013ac <__fp_szero>:
    13ac:	bb 27       	eor	r27, r27
    13ae:	66 27       	eor	r22, r22
    13b0:	77 27       	eor	r23, r23
    13b2:	cb 01       	movw	r24, r22
    13b4:	97 f9       	bld	r25, 7
    13b6:	08 95       	ret

000013b8 <__gesf2>:
    13b8:	0e 94 4e 0a 	call	0x149c	; 0x149c <__fp_cmp>
    13bc:	08 f4       	brcc	.+2      	; 0x13c0 <__gesf2+0x8>
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	08 95       	ret

000013c2 <__mulsf3>:
    13c2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__mulsf3x>
    13c6:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_round>
    13ca:	0e 94 94 09 	call	0x1328	; 0x1328 <__fp_pscA>
    13ce:	38 f0       	brcs	.+14     	; 0x13de <__mulsf3+0x1c>
    13d0:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fp_pscB>
    13d4:	20 f0       	brcs	.+8      	; 0x13de <__mulsf3+0x1c>
    13d6:	95 23       	and	r25, r21
    13d8:	11 f0       	breq	.+4      	; 0x13de <__mulsf3+0x1c>
    13da:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_inf>
    13de:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__fp_nan>
    13e2:	11 24       	eor	r1, r1
    13e4:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_szero>

000013e8 <__mulsf3x>:
    13e8:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_split3>
    13ec:	70 f3       	brcs	.-36     	; 0x13ca <__mulsf3+0x8>

000013ee <__mulsf3_pse>:
    13ee:	95 9f       	mul	r25, r21
    13f0:	c1 f3       	breq	.-16     	; 0x13e2 <__mulsf3+0x20>
    13f2:	95 0f       	add	r25, r21
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	55 1f       	adc	r21, r21
    13f8:	62 9f       	mul	r22, r18
    13fa:	f0 01       	movw	r30, r0
    13fc:	72 9f       	mul	r23, r18
    13fe:	bb 27       	eor	r27, r27
    1400:	f0 0d       	add	r31, r0
    1402:	b1 1d       	adc	r27, r1
    1404:	63 9f       	mul	r22, r19
    1406:	aa 27       	eor	r26, r26
    1408:	f0 0d       	add	r31, r0
    140a:	b1 1d       	adc	r27, r1
    140c:	aa 1f       	adc	r26, r26
    140e:	64 9f       	mul	r22, r20
    1410:	66 27       	eor	r22, r22
    1412:	b0 0d       	add	r27, r0
    1414:	a1 1d       	adc	r26, r1
    1416:	66 1f       	adc	r22, r22
    1418:	82 9f       	mul	r24, r18
    141a:	22 27       	eor	r18, r18
    141c:	b0 0d       	add	r27, r0
    141e:	a1 1d       	adc	r26, r1
    1420:	62 1f       	adc	r22, r18
    1422:	73 9f       	mul	r23, r19
    1424:	b0 0d       	add	r27, r0
    1426:	a1 1d       	adc	r26, r1
    1428:	62 1f       	adc	r22, r18
    142a:	83 9f       	mul	r24, r19
    142c:	a0 0d       	add	r26, r0
    142e:	61 1d       	adc	r22, r1
    1430:	22 1f       	adc	r18, r18
    1432:	74 9f       	mul	r23, r20
    1434:	33 27       	eor	r19, r19
    1436:	a0 0d       	add	r26, r0
    1438:	61 1d       	adc	r22, r1
    143a:	23 1f       	adc	r18, r19
    143c:	84 9f       	mul	r24, r20
    143e:	60 0d       	add	r22, r0
    1440:	21 1d       	adc	r18, r1
    1442:	82 2f       	mov	r24, r18
    1444:	76 2f       	mov	r23, r22
    1446:	6a 2f       	mov	r22, r26
    1448:	11 24       	eor	r1, r1
    144a:	9f 57       	subi	r25, 0x7F	; 127
    144c:	50 40       	sbci	r21, 0x00	; 0
    144e:	9a f0       	brmi	.+38     	; 0x1476 <__mulsf3_pse+0x88>
    1450:	f1 f0       	breq	.+60     	; 0x148e <__mulsf3_pse+0xa0>
    1452:	88 23       	and	r24, r24
    1454:	4a f0       	brmi	.+18     	; 0x1468 <__mulsf3_pse+0x7a>
    1456:	ee 0f       	add	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	bb 1f       	adc	r27, r27
    145c:	66 1f       	adc	r22, r22
    145e:	77 1f       	adc	r23, r23
    1460:	88 1f       	adc	r24, r24
    1462:	91 50       	subi	r25, 0x01	; 1
    1464:	50 40       	sbci	r21, 0x00	; 0
    1466:	a9 f7       	brne	.-22     	; 0x1452 <__mulsf3_pse+0x64>
    1468:	9e 3f       	cpi	r25, 0xFE	; 254
    146a:	51 05       	cpc	r21, r1
    146c:	80 f0       	brcs	.+32     	; 0x148e <__mulsf3_pse+0xa0>
    146e:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_inf>
    1472:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__fp_szero>
    1476:	5f 3f       	cpi	r21, 0xFF	; 255
    1478:	e4 f3       	brlt	.-8      	; 0x1472 <__mulsf3_pse+0x84>
    147a:	98 3e       	cpi	r25, 0xE8	; 232
    147c:	d4 f3       	brlt	.-12     	; 0x1472 <__mulsf3_pse+0x84>
    147e:	86 95       	lsr	r24
    1480:	77 95       	ror	r23
    1482:	67 95       	ror	r22
    1484:	b7 95       	ror	r27
    1486:	f7 95       	ror	r31
    1488:	e7 95       	ror	r30
    148a:	9f 5f       	subi	r25, 0xFF	; 255
    148c:	c1 f7       	brne	.-16     	; 0x147e <__mulsf3_pse+0x90>
    148e:	fe 2b       	or	r31, r30
    1490:	88 0f       	add	r24, r24
    1492:	91 1d       	adc	r25, r1
    1494:	96 95       	lsr	r25
    1496:	87 95       	ror	r24
    1498:	97 f9       	bld	r25, 7
    149a:	08 95       	ret

0000149c <__fp_cmp>:
    149c:	99 0f       	add	r25, r25
    149e:	00 08       	sbc	r0, r0
    14a0:	55 0f       	add	r21, r21
    14a2:	aa 0b       	sbc	r26, r26
    14a4:	e0 e8       	ldi	r30, 0x80	; 128
    14a6:	fe ef       	ldi	r31, 0xFE	; 254
    14a8:	16 16       	cp	r1, r22
    14aa:	17 06       	cpc	r1, r23
    14ac:	e8 07       	cpc	r30, r24
    14ae:	f9 07       	cpc	r31, r25
    14b0:	c0 f0       	brcs	.+48     	; 0x14e2 <__fp_cmp+0x46>
    14b2:	12 16       	cp	r1, r18
    14b4:	13 06       	cpc	r1, r19
    14b6:	e4 07       	cpc	r30, r20
    14b8:	f5 07       	cpc	r31, r21
    14ba:	98 f0       	brcs	.+38     	; 0x14e2 <__fp_cmp+0x46>
    14bc:	62 1b       	sub	r22, r18
    14be:	73 0b       	sbc	r23, r19
    14c0:	84 0b       	sbc	r24, r20
    14c2:	95 0b       	sbc	r25, r21
    14c4:	39 f4       	brne	.+14     	; 0x14d4 <__fp_cmp+0x38>
    14c6:	0a 26       	eor	r0, r26
    14c8:	61 f0       	breq	.+24     	; 0x14e2 <__fp_cmp+0x46>
    14ca:	23 2b       	or	r18, r19
    14cc:	24 2b       	or	r18, r20
    14ce:	25 2b       	or	r18, r21
    14d0:	21 f4       	brne	.+8      	; 0x14da <__fp_cmp+0x3e>
    14d2:	08 95       	ret
    14d4:	0a 26       	eor	r0, r26
    14d6:	09 f4       	brne	.+2      	; 0x14da <__fp_cmp+0x3e>
    14d8:	a1 40       	sbci	r26, 0x01	; 1
    14da:	a6 95       	lsr	r26
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	81 1d       	adc	r24, r1
    14e0:	81 1d       	adc	r24, r1
    14e2:	08 95       	ret

000014e4 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	08 95       	ret

000014ea <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	11 24       	eor	r1, r1
    14f4:	2f 93       	push	r18
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	ef 93       	push	r30
    14fc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    14fe:	e0 91 e7 04 	lds	r30, 0x04E7	; 0x8004e7 <Serial+0x10>
    1502:	f0 91 e8 04 	lds	r31, 0x04E8	; 0x8004e8 <Serial+0x11>
    1506:	80 81       	ld	r24, Z
    1508:	e0 91 ed 04 	lds	r30, 0x04ED	; 0x8004ed <Serial+0x16>
    150c:	f0 91 ee 04 	lds	r31, 0x04EE	; 0x8004ee <Serial+0x17>
    1510:	82 fd       	sbrc	r24, 2
    1512:	12 c0       	rjmp	.+36     	; 0x1538 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1514:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1516:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <Serial+0x19>
    151a:	8f 5f       	subi	r24, 0xFF	; 255
    151c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    151e:	20 91 f1 04 	lds	r18, 0x04F1	; 0x8004f1 <Serial+0x1a>
    1522:	82 17       	cp	r24, r18
    1524:	51 f0       	breq	.+20     	; 0x153a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1526:	e0 91 f0 04 	lds	r30, 0x04F0	; 0x8004f0 <Serial+0x19>
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	e9 52       	subi	r30, 0x29	; 41
    152e:	fb 4f       	sbci	r31, 0xFB	; 251
    1530:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1532:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <Serial+0x19>
    1536:	01 c0       	rjmp	.+2      	; 0x153a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1538:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    153a:	ff 91       	pop	r31
    153c:	ef 91       	pop	r30
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	2f 91       	pop	r18
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	0f 92       	push	r0
    1556:	11 24       	eor	r1, r1
    1558:	2f 93       	push	r18
    155a:	3f 93       	push	r19
    155c:	4f 93       	push	r20
    155e:	5f 93       	push	r21
    1560:	6f 93       	push	r22
    1562:	7f 93       	push	r23
    1564:	8f 93       	push	r24
    1566:	9f 93       	push	r25
    1568:	af 93       	push	r26
    156a:	bf 93       	push	r27
    156c:	ef 93       	push	r30
    156e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1570:	87 ed       	ldi	r24, 0xD7	; 215
    1572:	94 e0       	ldi	r25, 0x04	; 4
    1574:	0e 94 9c 21 	call	0x4338	; 0x4338 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1578:	ff 91       	pop	r31
    157a:	ef 91       	pop	r30
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	0f 90       	pop	r0
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	0f 90       	pop	r0
    1596:	1f 90       	pop	r1
    1598:	18 95       	reti

0000159a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    159a:	87 ed       	ldi	r24, 0xD7	; 215
    159c:	94 e0       	ldi	r25, 0x04	; 4
    159e:	0e 94 51 21 	call	0x42a2	; 0x42a2 <_ZN14HardwareSerial9availableEv>
    15a2:	21 e0       	ldi	r18, 0x01	; 1
    15a4:	89 2b       	or	r24, r25
    15a6:	09 f4       	brne	.+2      	; 0x15aa <_Z17Serial0_availablev+0x10>
    15a8:	20 e0       	ldi	r18, 0x00	; 0
}
    15aa:	82 2f       	mov	r24, r18
    15ac:	08 95       	ret

000015ae <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    15ae:	e7 ed       	ldi	r30, 0xD7	; 215
    15b0:	f4 e0       	ldi	r31, 0x04	; 4
    15b2:	13 82       	std	Z+3, r1	; 0x03
    15b4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    15b6:	88 ee       	ldi	r24, 0xE8	; 232
    15b8:	93 e0       	ldi	r25, 0x03	; 3
    15ba:	a0 e0       	ldi	r26, 0x00	; 0
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	84 83       	std	Z+4, r24	; 0x04
    15c0:	95 83       	std	Z+5, r25	; 0x05
    15c2:	a6 83       	std	Z+6, r26	; 0x06
    15c4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    15c6:	81 ed       	ldi	r24, 0xD1	; 209
    15c8:	92 e0       	ldi	r25, 0x02	; 2
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
    15ce:	85 ec       	ldi	r24, 0xC5	; 197
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	95 87       	std	Z+13, r25	; 0x0d
    15d4:	84 87       	std	Z+12, r24	; 0x0c
    15d6:	84 ec       	ldi	r24, 0xC4	; 196
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	97 87       	std	Z+15, r25	; 0x0f
    15dc:	86 87       	std	Z+14, r24	; 0x0e
    15de:	80 ec       	ldi	r24, 0xC0	; 192
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	91 8b       	std	Z+17, r25	; 0x11
    15e4:	80 8b       	std	Z+16, r24	; 0x10
    15e6:	81 ec       	ldi	r24, 0xC1	; 193
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	93 8b       	std	Z+19, r25	; 0x13
    15ec:	82 8b       	std	Z+18, r24	; 0x12
    15ee:	82 ec       	ldi	r24, 0xC2	; 194
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	95 8b       	std	Z+21, r25	; 0x15
    15f4:	84 8b       	std	Z+20, r24	; 0x14
    15f6:	86 ec       	ldi	r24, 0xC6	; 198
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	97 8b       	std	Z+23, r25	; 0x17
    15fc:	86 8b       	std	Z+22, r24	; 0x16
    15fe:	11 8e       	std	Z+25, r1	; 0x19
    1600:	12 8e       	std	Z+26, r1	; 0x1a
    1602:	13 8e       	std	Z+27, r1	; 0x1b
    1604:	14 8e       	std	Z+28, r1	; 0x1c
    1606:	08 95       	ret

00001608 <initVariant>:
    1608:	08 95       	ret

0000160a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    160a:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <init>

	initVariant();
    160e:	0e 94 04 0b 	call	0x1608	; 0x1608 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1612:	0e 94 1d 05 	call	0xa3a	; 0xa3a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1616:	ce e8       	ldi	r28, 0x8E	; 142
    1618:	d1 e2       	ldi	r29, 0x21	; 33
#endif
	
	setup();
    
	for (;;) {
		loop();
    161a:	0e 94 42 06 	call	0xc84	; 0xc84 <loop>
		if (serialEventRun) serialEventRun();
    161e:	20 97       	sbiw	r28, 0x00	; 0
    1620:	e1 f3       	breq	.-8      	; 0x161a <main+0x10>
    1622:	0e 94 8e 21 	call	0x431c	; 0x431c <_Z14serialEventRunv>
    1626:	f9 cf       	rjmp	.-14     	; 0x161a <main+0x10>

00001628 <_Znwj>:
    1628:	0c 94 57 27 	jmp	0x4eae	; 0x4eae <malloc>

0000162c <_Znaj>:
}

void * operator new(size_t size, void * ptr) noexcept {
  (void)size;
  return ptr;
}
    162c:	0c 94 57 27 	jmp	0x4eae	; 0x4eae <malloc>

00001630 <_ZdlPv>:
    1630:	0c 94 ef 27 	jmp	0x4fde	; 0x4fde <free>

00001634 <_ZdaPv>:
void operator delete(void * ptr) {
  free(ptr);
}

void operator delete[](void * ptr) {
  free(ptr);
    1634:	0c 94 ef 27 	jmp	0x4fde	; 0x4fde <free>

00001638 <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1638:	cf 92       	push	r12
    163a:	df 92       	push	r13
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	6c 01       	movw	r12, r24
    164a:	7a 01       	movw	r14, r20
    164c:	8b 01       	movw	r16, r22
    164e:	c0 e0       	ldi	r28, 0x00	; 0
    1650:	d0 e0       	ldi	r29, 0x00	; 0
    1652:	ce 15       	cp	r28, r14
    1654:	df 05       	cpc	r29, r15
    1656:	81 f0       	breq	.+32     	; 0x1678 <_ZN5Print5writeEPKhj+0x40>
    1658:	d8 01       	movw	r26, r16
    165a:	6d 91       	ld	r22, X+
    165c:	8d 01       	movw	r16, r26
    165e:	d6 01       	movw	r26, r12
    1660:	ed 91       	ld	r30, X+
    1662:	fc 91       	ld	r31, X
    1664:	01 90       	ld	r0, Z+
    1666:	f0 81       	ld	r31, Z
    1668:	e0 2d       	mov	r30, r0
    166a:	c6 01       	movw	r24, r12
    166c:	09 95       	icall
    166e:	89 2b       	or	r24, r25
    1670:	11 f0       	breq	.+4      	; 0x1676 <_ZN5Print5writeEPKhj+0x3e>
    1672:	21 96       	adiw	r28, 0x01	; 1
    1674:	ee cf       	rjmp	.-36     	; 0x1652 <_ZN5Print5writeEPKhj+0x1a>
    1676:	7e 01       	movw	r14, r28
    1678:	c7 01       	movw	r24, r14
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	cf 90       	pop	r12
    168a:	08 95       	ret

0000168c <_ZN5Print5writeEPKc>:
    168c:	61 15       	cp	r22, r1
    168e:	71 05       	cpc	r23, r1
    1690:	79 f0       	breq	.+30     	; 0x16b0 <_ZN5Print5writeEPKc+0x24>
    1692:	fb 01       	movw	r30, r22
    1694:	01 90       	ld	r0, Z+
    1696:	00 20       	and	r0, r0
    1698:	e9 f7       	brne	.-6      	; 0x1694 <_ZN5Print5writeEPKc+0x8>
    169a:	31 97       	sbiw	r30, 0x01	; 1
    169c:	af 01       	movw	r20, r30
    169e:	46 1b       	sub	r20, r22
    16a0:	57 0b       	sbc	r21, r23
    16a2:	dc 01       	movw	r26, r24
    16a4:	ed 91       	ld	r30, X+
    16a6:	fc 91       	ld	r31, X
    16a8:	02 80       	ldd	r0, Z+2	; 0x02
    16aa:	f3 81       	ldd	r31, Z+3	; 0x03
    16ac:	e0 2d       	mov	r30, r0
    16ae:	09 94       	ijmp
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	08 95       	ret

000016b6 <_ZN5Print5printEPK19__FlashStringHelper>:
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	8c 01       	movw	r16, r24
    16c4:	7b 01       	movw	r14, r22
    16c6:	c0 e0       	ldi	r28, 0x00	; 0
    16c8:	d0 e0       	ldi	r29, 0x00	; 0
    16ca:	f7 01       	movw	r30, r14
    16cc:	ec 0f       	add	r30, r28
    16ce:	fd 1f       	adc	r31, r29
    16d0:	64 91       	lpm	r22, Z
    16d2:	66 23       	and	r22, r22
    16d4:	61 f0       	breq	.+24     	; 0x16ee <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    16d6:	d8 01       	movw	r26, r16
    16d8:	ed 91       	ld	r30, X+
    16da:	fc 91       	ld	r31, X
    16dc:	01 90       	ld	r0, Z+
    16de:	f0 81       	ld	r31, Z
    16e0:	e0 2d       	mov	r30, r0
    16e2:	c8 01       	movw	r24, r16
    16e4:	09 95       	icall
    16e6:	89 2b       	or	r24, r25
    16e8:	11 f0       	breq	.+4      	; 0x16ee <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    16ea:	21 96       	adiw	r28, 0x01	; 1
    16ec:	ee cf       	rjmp	.-36     	; 0x16ca <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    16ee:	ce 01       	movw	r24, r28
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	ff 90       	pop	r15
    16fa:	ef 90       	pop	r14
    16fc:	08 95       	ret

000016fe <_ZN5Print5printEPKc>:
    16fe:	0c 94 46 0b 	jmp	0x168c	; 0x168c <_ZN5Print5writeEPKc>

00001702 <_ZN5Print5printEc>:
    1702:	dc 01       	movw	r26, r24
    1704:	ed 91       	ld	r30, X+
    1706:	fc 91       	ld	r31, X
    1708:	01 90       	ld	r0, Z+
    170a:	f0 81       	ld	r31, Z
    170c:	e0 2d       	mov	r30, r0
    170e:	09 94       	ijmp

00001710 <_ZN5Print7printlnEv>:
    1710:	66 e6       	ldi	r22, 0x66	; 102
    1712:	72 e0       	ldi	r23, 0x02	; 2
    1714:	0c 94 46 0b 	jmp	0x168c	; 0x168c <_ZN5Print5writeEPKc>

00001718 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	ec 01       	movw	r28, r24
    1722:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN5Print5printEPK19__FlashStringHelper>
    1726:	8c 01       	movw	r16, r24
    1728:	ce 01       	movw	r24, r28
    172a:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN5Print7printlnEv>
    172e:	80 0f       	add	r24, r16
    1730:	91 1f       	adc	r25, r17
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	08 95       	ret

0000173c <_ZN5Print7printlnEPKc>:
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	ec 01       	movw	r28, r24
    1746:	0e 94 46 0b 	call	0x168c	; 0x168c <_ZN5Print5writeEPKc>
    174a:	8c 01       	movw	r16, r24
    174c:	ce 01       	movw	r24, r28
    174e:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN5Print7printlnEv>
    1752:	80 0f       	add	r24, r16
    1754:	91 1f       	adc	r25, r17
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	08 95       	ret

00001760 <_ZN5Print11printNumberEmh>:
    1760:	8f 92       	push	r8
    1762:	9f 92       	push	r9
    1764:	af 92       	push	r10
    1766:	bf 92       	push	r11
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	a1 97       	sbiw	r28, 0x21	; 33
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	7c 01       	movw	r14, r24
    1786:	fa 01       	movw	r30, r20
    1788:	cb 01       	movw	r24, r22
    178a:	19 a2       	std	Y+33, r1	; 0x21
    178c:	22 30       	cpi	r18, 0x02	; 2
    178e:	08 f4       	brcc	.+2      	; 0x1792 <_ZN5Print11printNumberEmh+0x32>
    1790:	2a e0       	ldi	r18, 0x0A	; 10
    1792:	8e 01       	movw	r16, r28
    1794:	0f 5d       	subi	r16, 0xDF	; 223
    1796:	1f 4f       	sbci	r17, 0xFF	; 255
    1798:	82 2e       	mov	r8, r18
    179a:	91 2c       	mov	r9, r1
    179c:	a1 2c       	mov	r10, r1
    179e:	b1 2c       	mov	r11, r1
    17a0:	bf 01       	movw	r22, r30
    17a2:	a5 01       	movw	r20, r10
    17a4:	94 01       	movw	r18, r8
    17a6:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__udivmodsi4>
    17aa:	f9 01       	movw	r30, r18
    17ac:	ca 01       	movw	r24, r20
    17ae:	01 50       	subi	r16, 0x01	; 1
    17b0:	11 09       	sbc	r17, r1
    17b2:	6a 30       	cpi	r22, 0x0A	; 10
    17b4:	10 f4       	brcc	.+4      	; 0x17ba <_ZN5Print11printNumberEmh+0x5a>
    17b6:	60 5d       	subi	r22, 0xD0	; 208
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <_ZN5Print11printNumberEmh+0x5c>
    17ba:	69 5c       	subi	r22, 0xC9	; 201
    17bc:	d8 01       	movw	r26, r16
    17be:	6c 93       	st	X, r22
    17c0:	23 2b       	or	r18, r19
    17c2:	24 2b       	or	r18, r20
    17c4:	25 2b       	or	r18, r21
    17c6:	61 f7       	brne	.-40     	; 0x17a0 <_ZN5Print11printNumberEmh+0x40>
    17c8:	b8 01       	movw	r22, r16
    17ca:	c7 01       	movw	r24, r14
    17cc:	0e 94 46 0b 	call	0x168c	; 0x168c <_ZN5Print5writeEPKc>
    17d0:	a1 96       	adiw	r28, 0x21	; 33
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	bf 90       	pop	r11
    17ea:	af 90       	pop	r10
    17ec:	9f 90       	pop	r9
    17ee:	8f 90       	pop	r8
    17f0:	08 95       	ret

000017f2 <_ZN5Print5printEmi>:
    17f2:	21 15       	cp	r18, r1
    17f4:	31 05       	cpc	r19, r1
    17f6:	41 f4       	brne	.+16     	; 0x1808 <_ZN5Print5printEmi+0x16>
    17f8:	dc 01       	movw	r26, r24
    17fa:	ed 91       	ld	r30, X+
    17fc:	fc 91       	ld	r31, X
    17fe:	01 90       	ld	r0, Z+
    1800:	f0 81       	ld	r31, Z
    1802:	e0 2d       	mov	r30, r0
    1804:	64 2f       	mov	r22, r20
    1806:	09 94       	ijmp
    1808:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <_ZN5Print11printNumberEmh>

0000180c <_ZN5Print5printEhi>:
    180c:	9a 01       	movw	r18, r20
    180e:	46 2f       	mov	r20, r22
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <_ZN5Print5printEmi>

0000181a <_ZN5Print5printEji>:
    181a:	9a 01       	movw	r18, r20
    181c:	ab 01       	movw	r20, r22
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <_ZN5Print5printEmi>

00001826 <_ZN5Print7printlnEji>:
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	ec 01       	movw	r28, r24
    1830:	0e 94 0d 0c 	call	0x181a	; 0x181a <_ZN5Print5printEji>
    1834:	8c 01       	movw	r16, r24
    1836:	ce 01       	movw	r24, r28
    1838:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN5Print7printlnEv>
    183c:	80 0f       	add	r24, r16
    183e:	91 1f       	adc	r25, r17
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	08 95       	ret

0000184a <_ZN5Print7printlnEmi>:
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	ec 01       	movw	r28, r24
    1854:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <_ZN5Print5printEmi>
    1858:	8c 01       	movw	r16, r24
    185a:	ce 01       	movw	r24, r28
    185c:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN5Print7printlnEv>
    1860:	80 0f       	add	r24, r16
    1862:	91 1f       	adc	r25, r17
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	08 95       	ret

0000186e <_ZN5Print5printEli>:
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	21 15       	cp	r18, r1
    1880:	31 05       	cpc	r19, r1
    1882:	81 f4       	brne	.+32     	; 0x18a4 <_ZN5Print5printEli+0x36>
    1884:	dc 01       	movw	r26, r24
    1886:	ed 91       	ld	r30, X+
    1888:	fc 91       	ld	r31, X
    188a:	01 90       	ld	r0, Z+
    188c:	f0 81       	ld	r31, Z
    188e:	e0 2d       	mov	r30, r0
    1890:	64 2f       	mov	r22, r20
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	09 94       	ijmp
    18a4:	2a 30       	cpi	r18, 0x0A	; 10
    18a6:	31 05       	cpc	r19, r1
    18a8:	01 f5       	brne	.+64     	; 0x18ea <_ZN5Print5printEli+0x7c>
    18aa:	77 ff       	sbrs	r23, 7
    18ac:	1d c0       	rjmp	.+58     	; 0x18e8 <_ZN5Print5printEli+0x7a>
    18ae:	6a 01       	movw	r12, r20
    18b0:	7b 01       	movw	r14, r22
    18b2:	ec 01       	movw	r28, r24
    18b4:	6d e2       	ldi	r22, 0x2D	; 45
    18b6:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZN5Print5printEc>
    18ba:	8c 01       	movw	r16, r24
    18bc:	44 27       	eor	r20, r20
    18be:	55 27       	eor	r21, r21
    18c0:	ba 01       	movw	r22, r20
    18c2:	4c 19       	sub	r20, r12
    18c4:	5d 09       	sbc	r21, r13
    18c6:	6e 09       	sbc	r22, r14
    18c8:	7f 09       	sbc	r23, r15
    18ca:	2a e0       	ldi	r18, 0x0A	; 10
    18cc:	ce 01       	movw	r24, r28
    18ce:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Print11printNumberEmh>
    18d2:	80 0f       	add	r24, r16
    18d4:	91 1f       	adc	r25, r17
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	1f 91       	pop	r17
    18dc:	0f 91       	pop	r16
    18de:	ff 90       	pop	r15
    18e0:	ef 90       	pop	r14
    18e2:	df 90       	pop	r13
    18e4:	cf 90       	pop	r12
    18e6:	08 95       	ret
    18e8:	2a e0       	ldi	r18, 0x0A	; 10
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	cf 90       	pop	r12
    18fa:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <_ZN5Print11printNumberEmh>

000018fe <_ZN5Print5printEii>:
    18fe:	9a 01       	movw	r18, r20
    1900:	ab 01       	movw	r20, r22
    1902:	77 0f       	add	r23, r23
    1904:	66 0b       	sbc	r22, r22
    1906:	77 0b       	sbc	r23, r23
    1908:	0c 94 37 0c 	jmp	0x186e	; 0x186e <_ZN5Print5printEli>

0000190c <_ZN5Print7printlnEii>:
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	ec 01       	movw	r28, r24
    1916:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <_ZN5Print5printEii>
    191a:	8c 01       	movw	r16, r24
    191c:	ce 01       	movw	r24, r28
    191e:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN5Print7printlnEv>
    1922:	80 0f       	add	r24, r16
    1924:	91 1f       	adc	r25, r17
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	08 95       	ret

00001930 <_ZN5Print10printFloatEdh>:
    1930:	7f 92       	push	r7
    1932:	8f 92       	push	r8
    1934:	9f 92       	push	r9
    1936:	af 92       	push	r10
    1938:	bf 92       	push	r11
    193a:	cf 92       	push	r12
    193c:	df 92       	push	r13
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	8c 01       	movw	r16, r24
    194c:	6a 01       	movw	r12, r20
    194e:	7b 01       	movw	r14, r22
    1950:	72 2e       	mov	r7, r18
    1952:	9a 01       	movw	r18, r20
    1954:	ab 01       	movw	r20, r22
    1956:	c7 01       	movw	r24, r14
    1958:	b6 01       	movw	r22, r12
    195a:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <__unordsf2>
    195e:	88 23       	and	r24, r24
    1960:	19 f0       	breq	.+6      	; 0x1968 <_ZN5Print10printFloatEdh+0x38>
    1962:	69 e6       	ldi	r22, 0x69	; 105
    1964:	72 e0       	ldi	r23, 0x02	; 2
    1966:	27 c0       	rjmp	.+78     	; 0x19b6 <_ZN5Print10printFloatEdh+0x86>
    1968:	46 01       	movw	r8, r12
    196a:	57 01       	movw	r10, r14
    196c:	e8 94       	clt
    196e:	b7 f8       	bld	r11, 7
    1970:	2f ef       	ldi	r18, 0xFF	; 255
    1972:	3f ef       	ldi	r19, 0xFF	; 255
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	5f e7       	ldi	r21, 0x7F	; 127
    1978:	c5 01       	movw	r24, r10
    197a:	b4 01       	movw	r22, r8
    197c:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <__unordsf2>
    1980:	81 11       	cpse	r24, r1
    1982:	0d c0       	rjmp	.+26     	; 0x199e <_ZN5Print10printFloatEdh+0x6e>
    1984:	2f ef       	ldi	r18, 0xFF	; 255
    1986:	3f ef       	ldi	r19, 0xFF	; 255
    1988:	4f e7       	ldi	r20, 0x7F	; 127
    198a:	5f e7       	ldi	r21, 0x7F	; 127
    198c:	c5 01       	movw	r24, r10
    198e:	b4 01       	movw	r22, r8
    1990:	0e 94 67 26 	call	0x4cce	; 0x4cce <__cmpsf2>
    1994:	18 16       	cp	r1, r24
    1996:	1c f4       	brge	.+6      	; 0x199e <_ZN5Print10printFloatEdh+0x6e>
    1998:	6d e6       	ldi	r22, 0x6D	; 109
    199a:	72 e0       	ldi	r23, 0x02	; 2
    199c:	0c c0       	rjmp	.+24     	; 0x19b6 <_ZN5Print10printFloatEdh+0x86>
    199e:	2f ef       	ldi	r18, 0xFF	; 255
    19a0:	3f ef       	ldi	r19, 0xFF	; 255
    19a2:	4f e7       	ldi	r20, 0x7F	; 127
    19a4:	5f e4       	ldi	r21, 0x4F	; 79
    19a6:	c7 01       	movw	r24, r14
    19a8:	b6 01       	movw	r22, r12
    19aa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__gesf2>
    19ae:	18 16       	cp	r1, r24
    19b0:	94 f4       	brge	.+36     	; 0x19d6 <_ZN5Print10printFloatEdh+0xa6>
    19b2:	61 e7       	ldi	r22, 0x71	; 113
    19b4:	72 e0       	ldi	r23, 0x02	; 2
    19b6:	c8 01       	movw	r24, r16
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	ef 90       	pop	r14
    19c4:	df 90       	pop	r13
    19c6:	cf 90       	pop	r12
    19c8:	bf 90       	pop	r11
    19ca:	af 90       	pop	r10
    19cc:	9f 90       	pop	r9
    19ce:	8f 90       	pop	r8
    19d0:	7f 90       	pop	r7
    19d2:	0c 94 46 0b 	jmp	0x168c	; 0x168c <_ZN5Print5writeEPKc>
    19d6:	2f ef       	ldi	r18, 0xFF	; 255
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	5f ec       	ldi	r21, 0xCF	; 207
    19de:	c7 01       	movw	r24, r14
    19e0:	b6 01       	movw	r22, r12
    19e2:	0e 94 67 26 	call	0x4cce	; 0x4cce <__cmpsf2>
    19e6:	87 fd       	sbrc	r24, 7
    19e8:	e4 cf       	rjmp	.-56     	; 0x19b2 <_ZN5Print10printFloatEdh+0x82>
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	a9 01       	movw	r20, r18
    19f0:	c7 01       	movw	r24, r14
    19f2:	b6 01       	movw	r22, r12
    19f4:	0e 94 67 26 	call	0x4cce	; 0x4cce <__cmpsf2>
    19f8:	87 ff       	sbrs	r24, 7
    19fa:	0a c0       	rjmp	.+20     	; 0x1a10 <_ZN5Print10printFloatEdh+0xe0>
    19fc:	6d e2       	ldi	r22, 0x2D	; 45
    19fe:	c8 01       	movw	r24, r16
    1a00:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZN5Print5printEc>
    1a04:	ec 01       	movw	r28, r24
    1a06:	f7 fa       	bst	r15, 7
    1a08:	f0 94       	com	r15
    1a0a:	f7 f8       	bld	r15, 7
    1a0c:	f0 94       	com	r15
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <_ZN5Print10printFloatEdh+0xe4>
    1a10:	c0 e0       	ldi	r28, 0x00	; 0
    1a12:	d0 e0       	ldi	r29, 0x00	; 0
    1a14:	b1 2c       	mov	r11, r1
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	9f e3       	ldi	r25, 0x3F	; 63
    1a1e:	7b 14       	cp	r7, r11
    1a20:	41 f0       	breq	.+16     	; 0x1a32 <_ZN5Print10printFloatEdh+0x102>
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 a6 08 	call	0x114c	; 0x114c <__divsf3>
    1a2e:	b3 94       	inc	r11
    1a30:	f6 cf       	rjmp	.-20     	; 0x1a1e <_ZN5Print10printFloatEdh+0xee>
    1a32:	a7 01       	movw	r20, r14
    1a34:	96 01       	movw	r18, r12
    1a36:	0e 94 3a 08 	call	0x1074	; 0x1074 <__addsf3>
    1a3a:	6b 01       	movw	r12, r22
    1a3c:	7c 01       	movw	r14, r24
    1a3e:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixunssfsi>
    1a42:	4b 01       	movw	r8, r22
    1a44:	5c 01       	movw	r10, r24
    1a46:	2a e0       	ldi	r18, 0x0A	; 10
    1a48:	ab 01       	movw	r20, r22
    1a4a:	bc 01       	movw	r22, r24
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN5Print11printNumberEmh>
    1a52:	c8 0f       	add	r28, r24
    1a54:	d9 1f       	adc	r29, r25
    1a56:	77 20       	and	r7, r7
    1a58:	b9 f1       	breq	.+110    	; 0x1ac8 <_ZN5Print10printFloatEdh+0x198>
    1a5a:	c5 01       	movw	r24, r10
    1a5c:	b4 01       	movw	r22, r8
    1a5e:	0e 94 4e 09 	call	0x129c	; 0x129c <__floatunsisf>
    1a62:	9b 01       	movw	r18, r22
    1a64:	ac 01       	movw	r20, r24
    1a66:	c7 01       	movw	r24, r14
    1a68:	b6 01       	movw	r22, r12
    1a6a:	0e 94 39 08 	call	0x1072	; 0x1072 <__subsf3>
    1a6e:	6b 01       	movw	r12, r22
    1a70:	7c 01       	movw	r14, r24
    1a72:	6e e2       	ldi	r22, 0x2E	; 46
    1a74:	c8 01       	movw	r24, r16
    1a76:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZN5Print5printEc>
    1a7a:	c8 0f       	add	r28, r24
    1a7c:	d9 1f       	adc	r29, r25
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	c7 01       	movw	r24, r14
    1a88:	b6 01       	movw	r22, r12
    1a8a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__mulsf3>
    1a8e:	4b 01       	movw	r8, r22
    1a90:	5c 01       	movw	r10, r24
    1a92:	0e 94 1f 09 	call	0x123e	; 0x123e <__fixunssfsi>
    1a96:	6b 01       	movw	r12, r22
    1a98:	7c 01       	movw	r14, r24
    1a9a:	4a e0       	ldi	r20, 0x0A	; 10
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	c8 01       	movw	r24, r16
    1aa0:	0e 94 0d 0c 	call	0x181a	; 0x181a <_ZN5Print5printEji>
    1aa4:	c8 0f       	add	r28, r24
    1aa6:	d9 1f       	adc	r29, r25
    1aa8:	b6 01       	movw	r22, r12
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0e 94 4e 09 	call	0x129c	; 0x129c <__floatunsisf>
    1ab2:	9b 01       	movw	r18, r22
    1ab4:	ac 01       	movw	r20, r24
    1ab6:	c5 01       	movw	r24, r10
    1ab8:	b4 01       	movw	r22, r8
    1aba:	0e 94 39 08 	call	0x1072	; 0x1072 <__subsf3>
    1abe:	6b 01       	movw	r12, r22
    1ac0:	7c 01       	movw	r14, r24
    1ac2:	7a 94       	dec	r7
    1ac4:	71 10       	cpse	r7, r1
    1ac6:	db cf       	rjmp	.-74     	; 0x1a7e <_ZN5Print10printFloatEdh+0x14e>
    1ac8:	ce 01       	movw	r24, r28
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	cf 90       	pop	r12
    1ada:	bf 90       	pop	r11
    1adc:	af 90       	pop	r10
    1ade:	9f 90       	pop	r9
    1ae0:	8f 90       	pop	r8
    1ae2:	7f 90       	pop	r7
    1ae4:	08 95       	ret

00001ae6 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1af0:	0e 94 98 0c 	call	0x1930	; 0x1930 <_ZN5Print10printFloatEdh>
    1af4:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1af6:	ce 01       	movw	r24, r28
    1af8:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN5Print7printlnEv>
  return n;
}
    1afc:	80 0f       	add	r24, r16
    1afe:	91 1f       	adc	r25, r17
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	08 95       	ret

00001b0a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1b0a:	1f 92       	push	r1
    1b0c:	0f 92       	push	r0
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	0f 92       	push	r0
    1b12:	11 24       	eor	r1, r1
    1b14:	2f 93       	push	r18
    1b16:	3f 93       	push	r19
    1b18:	8f 93       	push	r24
    1b1a:	9f 93       	push	r25
    1b1c:	af 93       	push	r26
    1b1e:	bf 93       	push	r27
    1b20:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <timer0_millis>
    1b24:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <timer0_millis+0x1>
    1b28:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <timer0_millis+0x2>
    1b2c:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <timer0_millis+0x3>
    1b30:	30 91 74 05 	lds	r19, 0x0574	; 0x800574 <timer0_fract>
    1b34:	23 e0       	ldi	r18, 0x03	; 3
    1b36:	23 0f       	add	r18, r19
    1b38:	2d 37       	cpi	r18, 0x7D	; 125
    1b3a:	20 f4       	brcc	.+8      	; 0x1b44 <__vector_16+0x3a>
    1b3c:	01 96       	adiw	r24, 0x01	; 1
    1b3e:	a1 1d       	adc	r26, r1
    1b40:	b1 1d       	adc	r27, r1
    1b42:	05 c0       	rjmp	.+10     	; 0x1b4e <__vector_16+0x44>
    1b44:	26 e8       	ldi	r18, 0x86	; 134
    1b46:	23 0f       	add	r18, r19
    1b48:	02 96       	adiw	r24, 0x02	; 2
    1b4a:	a1 1d       	adc	r26, r1
    1b4c:	b1 1d       	adc	r27, r1
    1b4e:	20 93 74 05 	sts	0x0574, r18	; 0x800574 <timer0_fract>
    1b52:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <timer0_millis>
    1b56:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <timer0_millis+0x1>
    1b5a:	a0 93 77 05 	sts	0x0577, r26	; 0x800577 <timer0_millis+0x2>
    1b5e:	b0 93 78 05 	sts	0x0578, r27	; 0x800578 <timer0_millis+0x3>
    1b62:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <timer0_overflow_count>
    1b66:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <timer0_overflow_count+0x1>
    1b6a:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <timer0_overflow_count+0x2>
    1b6e:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <timer0_overflow_count+0x3>
    1b72:	01 96       	adiw	r24, 0x01	; 1
    1b74:	a1 1d       	adc	r26, r1
    1b76:	b1 1d       	adc	r27, r1
    1b78:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <timer0_overflow_count>
    1b7c:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <timer0_overflow_count+0x1>
    1b80:	a0 93 7b 05 	sts	0x057B, r26	; 0x80057b <timer0_overflow_count+0x2>
    1b84:	b0 93 7c 05 	sts	0x057C, r27	; 0x80057c <timer0_overflow_count+0x3>
    1b88:	bf 91       	pop	r27
    1b8a:	af 91       	pop	r26
    1b8c:	9f 91       	pop	r25
    1b8e:	8f 91       	pop	r24
    1b90:	3f 91       	pop	r19
    1b92:	2f 91       	pop	r18
    1b94:	0f 90       	pop	r0
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	0f 90       	pop	r0
    1b9a:	1f 90       	pop	r1
    1b9c:	18 95       	reti

00001b9e <millis>:
    1b9e:	2f b7       	in	r18, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	60 91 75 05 	lds	r22, 0x0575	; 0x800575 <timer0_millis>
    1ba6:	70 91 76 05 	lds	r23, 0x0576	; 0x800576 <timer0_millis+0x1>
    1baa:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <timer0_millis+0x2>
    1bae:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <timer0_millis+0x3>
    1bb2:	2f bf       	out	0x3f, r18	; 63
    1bb4:	08 95       	ret

00001bb6 <micros>:
    1bb6:	3f b7       	in	r19, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <timer0_overflow_count>
    1bbe:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <timer0_overflow_count+0x1>
    1bc2:	a0 91 7b 05 	lds	r26, 0x057B	; 0x80057b <timer0_overflow_count+0x2>
    1bc6:	b0 91 7c 05 	lds	r27, 0x057C	; 0x80057c <timer0_overflow_count+0x3>
    1bca:	26 b5       	in	r18, 0x26	; 38
    1bcc:	a8 9b       	sbis	0x15, 0	; 21
    1bce:	05 c0       	rjmp	.+10     	; 0x1bda <micros+0x24>
    1bd0:	2f 3f       	cpi	r18, 0xFF	; 255
    1bd2:	19 f0       	breq	.+6      	; 0x1bda <micros+0x24>
    1bd4:	01 96       	adiw	r24, 0x01	; 1
    1bd6:	a1 1d       	adc	r26, r1
    1bd8:	b1 1d       	adc	r27, r1
    1bda:	3f bf       	out	0x3f, r19	; 63
    1bdc:	ba 2f       	mov	r27, r26
    1bde:	a9 2f       	mov	r26, r25
    1be0:	98 2f       	mov	r25, r24
    1be2:	88 27       	eor	r24, r24
    1be4:	82 0f       	add	r24, r18
    1be6:	91 1d       	adc	r25, r1
    1be8:	a1 1d       	adc	r26, r1
    1bea:	b1 1d       	adc	r27, r1
    1bec:	bc 01       	movw	r22, r24
    1bee:	cd 01       	movw	r24, r26
    1bf0:	42 e0       	ldi	r20, 0x02	; 2
    1bf2:	66 0f       	add	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	4a 95       	dec	r20
    1bfc:	d1 f7       	brne	.-12     	; 0x1bf2 <micros+0x3c>
    1bfe:	08 95       	ret

00001c00 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1c00:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1c02:	84 b5       	in	r24, 0x24	; 36
    1c04:	82 60       	ori	r24, 0x02	; 2
    1c06:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1c08:	84 b5       	in	r24, 0x24	; 36
    1c0a:	81 60       	ori	r24, 0x01	; 1
    1c0c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1c0e:	85 b5       	in	r24, 0x25	; 37
    1c10:	82 60       	ori	r24, 0x02	; 2
    1c12:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1c14:	85 b5       	in	r24, 0x25	; 37
    1c16:	81 60       	ori	r24, 0x01	; 1
    1c18:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1c1a:	ee e6       	ldi	r30, 0x6E	; 110
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	81 60       	ori	r24, 0x01	; 1
    1c22:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1c24:	e1 e8       	ldi	r30, 0x81	; 129
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1c2a:	80 81       	ld	r24, Z
    1c2c:	82 60       	ori	r24, 0x02	; 2
    1c2e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1c30:	80 81       	ld	r24, Z
    1c32:	81 60       	ori	r24, 0x01	; 1
    1c34:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1c36:	e0 e8       	ldi	r30, 0x80	; 128
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	81 60       	ori	r24, 0x01	; 1
    1c3e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1c40:	e1 eb       	ldi	r30, 0xB1	; 177
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	84 60       	ori	r24, 0x04	; 4
    1c48:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1c4a:	e0 eb       	ldi	r30, 0xB0	; 176
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	81 60       	ori	r24, 0x01	; 1
    1c52:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1c54:	ea e7       	ldi	r30, 0x7A	; 122
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	84 60       	ori	r24, 0x04	; 4
    1c5c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1c5e:	80 81       	ld	r24, Z
    1c60:	82 60       	ori	r24, 0x02	; 2
    1c62:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1c64:	80 81       	ld	r24, Z
    1c66:	81 60       	ori	r24, 0x01	; 1
    1c68:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 68       	ori	r24, 0x80	; 128
    1c6e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1c70:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1c74:	08 95       	ret

00001c76 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1c76:	83 30       	cpi	r24, 0x03	; 3
    1c78:	81 f0       	breq	.+32     	; 0x1c9a <turnOffPWM+0x24>
    1c7a:	28 f4       	brcc	.+10     	; 0x1c86 <turnOffPWM+0x10>
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	99 f0       	breq	.+38     	; 0x1ca6 <turnOffPWM+0x30>
    1c80:	82 30       	cpi	r24, 0x02	; 2
    1c82:	a1 f0       	breq	.+40     	; 0x1cac <turnOffPWM+0x36>
    1c84:	08 95       	ret
    1c86:	87 30       	cpi	r24, 0x07	; 7
    1c88:	a9 f0       	breq	.+42     	; 0x1cb4 <turnOffPWM+0x3e>
    1c8a:	88 30       	cpi	r24, 0x08	; 8
    1c8c:	b9 f0       	breq	.+46     	; 0x1cbc <turnOffPWM+0x46>
    1c8e:	84 30       	cpi	r24, 0x04	; 4
    1c90:	d1 f4       	brne	.+52     	; 0x1cc6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1c92:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1c96:	8f 7d       	andi	r24, 0xDF	; 223
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1c9a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1c9e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1ca0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1ca4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1ca6:	84 b5       	in	r24, 0x24	; 36
    1ca8:	8f 77       	andi	r24, 0x7F	; 127
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1cac:	84 b5       	in	r24, 0x24	; 36
    1cae:	8f 7d       	andi	r24, 0xDF	; 223
    1cb0:	84 bd       	out	0x24, r24	; 36
    1cb2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1cb4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1cb8:	8f 77       	andi	r24, 0x7F	; 127
    1cba:	03 c0       	rjmp	.+6      	; 0x1cc2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1cbc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1cc0:	8f 7d       	andi	r24, 0xDF	; 223
    1cc2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1cc6:	08 95       	ret

00001cc8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	fc 01       	movw	r30, r24
    1cd0:	ed 5e       	subi	r30, 0xED	; 237
    1cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	e9 5d       	subi	r30, 0xD9	; 217
    1cda:	fe 4f       	sbci	r31, 0xFE	; 254
    1cdc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1cde:	88 23       	and	r24, r24
    1ce0:	61 f1       	breq	.+88     	; 0x1d3a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	fc 01       	movw	r30, r24
    1cea:	eb 5b       	subi	r30, 0xBB	; 187
    1cec:	fe 4f       	sbci	r31, 0xFE	; 254
    1cee:	c5 91       	lpm	r28, Z+
    1cf0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	e5 5c       	subi	r30, 0xC5	; 197
    1cf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf8:	a5 91       	lpm	r26, Z+
    1cfa:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1cfc:	61 11       	cpse	r22, r1
    1cfe:	09 c0       	rjmp	.+18     	; 0x1d12 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1d00:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1d02:	f8 94       	cli
		*reg &= ~bit;
    1d04:	88 81       	ld	r24, Y
    1d06:	20 95       	com	r18
    1d08:	82 23       	and	r24, r18
    1d0a:	88 83       	st	Y, r24
		*out &= ~bit;
    1d0c:	ec 91       	ld	r30, X
    1d0e:	2e 23       	and	r18, r30
    1d10:	0b c0       	rjmp	.+22     	; 0x1d28 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1d12:	62 30       	cpi	r22, 0x02	; 2
    1d14:	61 f4       	brne	.+24     	; 0x1d2e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1d16:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1d18:	f8 94       	cli
		*reg &= ~bit;
    1d1a:	88 81       	ld	r24, Y
    1d1c:	32 2f       	mov	r19, r18
    1d1e:	30 95       	com	r19
    1d20:	83 23       	and	r24, r19
    1d22:	88 83       	st	Y, r24
		*out |= bit;
    1d24:	ec 91       	ld	r30, X
    1d26:	2e 2b       	or	r18, r30
    1d28:	2c 93       	st	X, r18
		SREG = oldSREG;
    1d2a:	9f bf       	out	0x3f, r25	; 63
    1d2c:	06 c0       	rjmp	.+12     	; 0x1d3a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1d2e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1d30:	f8 94       	cli
		*reg |= bit;
    1d32:	e8 81       	ld	r30, Y
    1d34:	2e 2b       	or	r18, r30
    1d36:	28 83       	st	Y, r18
		SREG = oldSREG;
    1d38:	8f bf       	out	0x3f, r24	; 63
	}
}
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	f9 01       	movw	r30, r18
    1d4c:	e1 50       	subi	r30, 0x01	; 1
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1d52:	f9 01       	movw	r30, r18
    1d54:	ed 5e       	subi	r30, 0xED	; 237
    1d56:	fe 4f       	sbci	r31, 0xFE	; 254
    1d58:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1d5a:	f9 01       	movw	r30, r18
    1d5c:	e9 5d       	subi	r30, 0xD9	; 217
    1d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d60:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1d62:	cc 23       	and	r28, r28
    1d64:	c1 f0       	breq	.+48     	; 0x1d96 <digitalWrite+0x56>
    1d66:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1d68:	81 11       	cpse	r24, r1
    1d6a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <turnOffPWM>

	out = portOutputRegister(port);
    1d6e:	ec 2f       	mov	r30, r28
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	ee 0f       	add	r30, r30
    1d74:	ff 1f       	adc	r31, r31
    1d76:	e5 5c       	subi	r30, 0xC5	; 197
    1d78:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7a:	a5 91       	lpm	r26, Z+
    1d7c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1d7e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1d80:	f8 94       	cli

	if (val == LOW) {
    1d82:	11 11       	cpse	r17, r1
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <digitalWrite+0x4e>
		*out &= ~bit;
    1d86:	8c 91       	ld	r24, X
    1d88:	d0 95       	com	r29
    1d8a:	d8 23       	and	r29, r24
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1d8e:	ec 91       	ld	r30, X
    1d90:	de 2b       	or	r29, r30
    1d92:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1d94:	9f bf       	out	0x3f, r25	; 63
}
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	1f 91       	pop	r17
    1d9c:	08 95       	ret

00001d9e <_ZL23enterU32InBufferAtIndexmPhh>:
        wait = false ;
      }
    }
  }
  return recoveryDone ;
}
    1d9e:	fa 01       	movw	r30, r20
    1da0:	e2 0f       	add	r30, r18
    1da2:	f1 1d       	adc	r31, r1
    1da4:	60 83       	st	Z, r22
    1da6:	71 83       	std	Z+1, r23	; 0x01
    1da8:	82 83       	std	Z+2, r24	; 0x02
    1daa:	93 83       	std	Z+3, r25	; 0x03
    1dac:	08 95       	ret

00001dae <_ZL20u32FromBufferAtIndexPhh>:
    1dae:	fc 01       	movw	r30, r24
    1db0:	e6 0f       	add	r30, r22
    1db2:	f1 1d       	adc	r31, r1
    1db4:	20 81       	ld	r18, Z
    1db6:	31 81       	ldd	r19, Z+1	; 0x01
    1db8:	62 81       	ldd	r22, Z+2	; 0x02
    1dba:	86 2f       	mov	r24, r22
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a0 e0       	ldi	r26, 0x00	; 0
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	99 27       	eor	r25, r25
    1dc6:	88 27       	eor	r24, r24
    1dc8:	93 2b       	or	r25, r19
    1dca:	82 2b       	or	r24, r18
    1dcc:	23 81       	ldd	r18, Z+3	; 0x03
    1dce:	bc 01       	movw	r22, r24
    1dd0:	cd 01       	movw	r24, r26
    1dd2:	92 2b       	or	r25, r18
    1dd4:	08 95       	ret

00001dd6 <_ZL19lengthCodeForLengthh>:
    1dd6:	88 31       	cpi	r24, 0x18	; 24
    1dd8:	e9 f0       	breq	.+58     	; 0x1e14 <_ZL19lengthCodeForLengthh+0x3e>
    1dda:	58 f4       	brcc	.+22     	; 0x1df2 <_ZL19lengthCodeForLengthh+0x1c>
    1ddc:	80 31       	cpi	r24, 0x10	; 16
    1dde:	71 f1       	breq	.+92     	; 0x1e3c <_ZL19lengthCodeForLengthh+0x66>
    1de0:	84 31       	cpi	r24, 0x14	; 20
    1de2:	99 f0       	breq	.+38     	; 0x1e0a <_ZL19lengthCodeForLengthh+0x34>
    1de4:	8c 30       	cpi	r24, 0x0C	; 12
    1de6:	59 f4       	brne	.+22     	; 0x1dfe <_ZL19lengthCodeForLengthh+0x28>
    1de8:	69 e0       	ldi	r22, 0x09	; 9
    1dea:	70 e0       	ldi	r23, 0x00	; 0
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	08 95       	ret
    1df2:	80 33       	cpi	r24, 0x30	; 48
    1df4:	c9 f0       	breq	.+50     	; 0x1e28 <_ZL19lengthCodeForLengthh+0x52>
    1df6:	80 34       	cpi	r24, 0x40	; 64
    1df8:	e1 f0       	breq	.+56     	; 0x1e32 <_ZL19lengthCodeForLengthh+0x5c>
    1dfa:	80 32       	cpi	r24, 0x20	; 32
    1dfc:	81 f0       	breq	.+32     	; 0x1e1e <_ZL19lengthCodeForLengthh+0x48>
    1dfe:	68 2f       	mov	r22, r24
    1e00:	6f 70       	andi	r22, 0x0F	; 15
    1e02:	70 e0       	ldi	r23, 0x00	; 0
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	08 95       	ret
    1e0a:	6b e0       	ldi	r22, 0x0B	; 11
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	08 95       	ret
    1e14:	6c e0       	ldi	r22, 0x0C	; 12
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	08 95       	ret
    1e1e:	6d e0       	ldi	r22, 0x0D	; 13
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	08 95       	ret
    1e28:	6e e0       	ldi	r22, 0x0E	; 14
    1e2a:	70 e0       	ldi	r23, 0x00	; 0
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	08 95       	ret
    1e32:	6f e0       	ldi	r22, 0x0F	; 15
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	08 95       	ret
    1e3c:	6a e0       	ldi	r22, 0x0A	; 10
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	08 95       	ret

00001e46 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2>:
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	ec 01       	movw	r28, r24
    1e4c:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e4e:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e50:	88 e4       	ldi	r24, 0x48	; 72
    1e52:	84 9f       	mul	r24, r20
    1e54:	90 01       	movw	r18, r0
    1e56:	85 9f       	mul	r24, r21
    1e58:	30 0d       	add	r19, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	a8 81       	ld	r26, Y
    1e5e:	b9 81       	ldd	r27, Y+1	; 0x01
    1e60:	a2 0f       	add	r26, r18
    1e62:	b3 1f       	adc	r27, r19
    1e64:	fb 01       	movw	r30, r22
    1e66:	01 90       	ld	r0, Z+
    1e68:	0d 92       	st	X+, r0
    1e6a:	8a 95       	dec	r24
    1e6c:	e1 f7       	brne	.-8      	; 0x1e66 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2+0x20>
    1e6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e70:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e72:	ac 85       	ldd	r26, Y+12	; 0x0c
    1e74:	bd 85       	ldd	r27, Y+13	; 0x0d
    1e76:	01 96       	adiw	r24, 0x01	; 1
    1e78:	a1 1d       	adc	r26, r1
    1e7a:	b1 1d       	adc	r27, r1
    1e7c:	8a 87       	std	Y+10, r24	; 0x0a
    1e7e:	9b 87       	std	Y+11, r25	; 0x0b
    1e80:	ac 87       	std	Y+12, r26	; 0x0c
    1e82:	bd 87       	std	Y+13, r27	; 0x0d
    1e84:	4a 81       	ldd	r20, Y+2	; 0x02
    1e86:	5b 81       	ldd	r21, Y+3	; 0x03
    1e88:	6c 81       	ldd	r22, Y+4	; 0x04
    1e8a:	7d 81       	ldd	r23, Y+5	; 0x05
    1e8c:	84 17       	cp	r24, r20
    1e8e:	95 07       	cpc	r25, r21
    1e90:	a6 07       	cpc	r26, r22
    1e92:	b7 07       	cpc	r27, r23
    1e94:	21 f4       	brne	.+8      	; 0x1e9e <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2+0x58>
    1e96:	1a 86       	std	Y+10, r1	; 0x0a
    1e98:	1b 86       	std	Y+11, r1	; 0x0b
    1e9a:	1c 86       	std	Y+12, r1	; 0x0c
    1e9c:	1d 86       	std	Y+13, r1	; 0x0d
    1e9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ea0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ea2:	a8 89       	ldd	r26, Y+16	; 0x10
    1ea4:	b9 89       	ldd	r27, Y+17	; 0x11
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	a1 1d       	adc	r26, r1
    1eaa:	b1 1d       	adc	r27, r1
    1eac:	8e 87       	std	Y+14, r24	; 0x0e
    1eae:	9f 87       	std	Y+15, r25	; 0x0f
    1eb0:	a8 8b       	std	Y+16, r26	; 0x10
    1eb2:	b9 8b       	std	Y+17, r27	; 0x11
    1eb4:	4a 89       	ldd	r20, Y+18	; 0x12
    1eb6:	5b 89       	ldd	r21, Y+19	; 0x13
    1eb8:	6c 89       	ldd	r22, Y+20	; 0x14
    1eba:	7d 89       	ldd	r23, Y+21	; 0x15
    1ebc:	48 17       	cp	r20, r24
    1ebe:	59 07       	cpc	r21, r25
    1ec0:	6a 07       	cpc	r22, r26
    1ec2:	7b 07       	cpc	r23, r27
    1ec4:	20 f4       	brcc	.+8      	; 0x1ece <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2+0x88>
    1ec6:	8a 8b       	std	Y+18, r24	; 0x12
    1ec8:	9b 8b       	std	Y+19, r25	; 0x13
    1eca:	ac 8b       	std	Y+20, r26	; 0x14
    1ecc:	bd 8b       	std	Y+21, r27	; 0x15
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	08 95       	ret

00001ed4 <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3>:
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	ec 01       	movw	r28, r24
    1eda:	4e 81       	ldd	r20, Y+6	; 0x06
    1edc:	5f 81       	ldd	r21, Y+7	; 0x07
    1ede:	88 e4       	ldi	r24, 0x48	; 72
    1ee0:	84 9f       	mul	r24, r20
    1ee2:	90 01       	movw	r18, r0
    1ee4:	85 9f       	mul	r24, r21
    1ee6:	30 0d       	add	r19, r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	e8 81       	ld	r30, Y
    1eec:	f9 81       	ldd	r31, Y+1	; 0x01
    1eee:	e2 0f       	add	r30, r18
    1ef0:	f3 1f       	adc	r31, r19
    1ef2:	db 01       	movw	r26, r22
    1ef4:	01 90       	ld	r0, Z+
    1ef6:	0d 92       	st	X+, r0
    1ef8:	8a 95       	dec	r24
    1efa:	e1 f7       	brne	.-8      	; 0x1ef4 <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3+0x20>
    1efc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1efe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f00:	a8 89       	ldd	r26, Y+16	; 0x10
    1f02:	b9 89       	ldd	r27, Y+17	; 0x11
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	a1 09       	sbc	r26, r1
    1f08:	b1 09       	sbc	r27, r1
    1f0a:	8e 87       	std	Y+14, r24	; 0x0e
    1f0c:	9f 87       	std	Y+15, r25	; 0x0f
    1f0e:	a8 8b       	std	Y+16, r26	; 0x10
    1f10:	b9 8b       	std	Y+17, r27	; 0x11
    1f12:	8e 81       	ldd	r24, Y+6	; 0x06
    1f14:	9f 81       	ldd	r25, Y+7	; 0x07
    1f16:	a8 85       	ldd	r26, Y+8	; 0x08
    1f18:	b9 85       	ldd	r27, Y+9	; 0x09
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	a1 1d       	adc	r26, r1
    1f1e:	b1 1d       	adc	r27, r1
    1f20:	8e 83       	std	Y+6, r24	; 0x06
    1f22:	9f 83       	std	Y+7, r25	; 0x07
    1f24:	a8 87       	std	Y+8, r26	; 0x08
    1f26:	b9 87       	std	Y+9, r27	; 0x09
    1f28:	4a 81       	ldd	r20, Y+2	; 0x02
    1f2a:	5b 81       	ldd	r21, Y+3	; 0x03
    1f2c:	6c 81       	ldd	r22, Y+4	; 0x04
    1f2e:	7d 81       	ldd	r23, Y+5	; 0x05
    1f30:	84 17       	cp	r24, r20
    1f32:	95 07       	cpc	r25, r21
    1f34:	a6 07       	cpc	r26, r22
    1f36:	b7 07       	cpc	r27, r23
    1f38:	21 f4       	brne	.+8      	; 0x1f42 <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3+0x6e>
    1f3a:	1e 82       	std	Y+6, r1	; 0x06
    1f3c:	1f 82       	std	Y+7, r1	; 0x07
    1f3e:	18 86       	std	Y+8, r1	; 0x08
    1f40:	19 86       	std	Y+9, r1	; 0x09
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <_ZN8SPIClass8transferEPvj.part.6>:
    1f48:	fc 01       	movw	r30, r24
    1f4a:	20 81       	ld	r18, Z
    1f4c:	2e bd       	out	0x2e, r18	; 46
    1f4e:	9b 01       	movw	r18, r22
    1f50:	21 50       	subi	r18, 0x01	; 1
    1f52:	31 09       	sbc	r19, r1
    1f54:	41 f0       	breq	.+16     	; 0x1f66 <_ZN8SPIClass8transferEPvj.part.6+0x1e>
    1f56:	51 81       	ldd	r21, Z+1	; 0x01
    1f58:	0d b4       	in	r0, 0x2d	; 45
    1f5a:	07 fe       	sbrs	r0, 7
    1f5c:	fd cf       	rjmp	.-6      	; 0x1f58 <_ZN8SPIClass8transferEPvj.part.6+0x10>
    1f5e:	4e b5       	in	r20, 0x2e	; 46
    1f60:	5e bd       	out	0x2e, r21	; 46
    1f62:	41 93       	st	Z+, r20
    1f64:	f5 cf       	rjmp	.-22     	; 0x1f50 <_ZN8SPIClass8transferEPvj.part.6+0x8>
    1f66:	61 50       	subi	r22, 0x01	; 1
    1f68:	71 09       	sbc	r23, r1
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	e6 0f       	add	r30, r22
    1f6e:	f7 1f       	adc	r31, r23
    1f70:	0d b4       	in	r0, 0x2d	; 45
    1f72:	07 fe       	sbrs	r0, 7
    1f74:	fd cf       	rjmp	.-6      	; 0x1f70 <_ZN8SPIClass8transferEPvj.part.6+0x28>
    1f76:	8e b5       	in	r24, 0x2e	; 46
    1f78:	80 83       	st	Z, r24
    1f7a:	08 95       	ret

00001f7c <_ZN12ACANFDBuffer12initWithSizeEm>:
    1f7c:	8f 92       	push	r8
    1f7e:	9f 92       	push	r9
    1f80:	af 92       	push	r10
    1f82:	bf 92       	push	r11
    1f84:	cf 92       	push	r12
    1f86:	df 92       	push	r13
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	ec 01       	movw	r28, r24
    1f96:	6a 01       	movw	r12, r20
    1f98:	7b 01       	movw	r14, r22
    1f9a:	45 3c       	cpi	r20, 0xC5	; 197
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	58 07       	cpc	r21, r24
    1fa0:	38 f4       	brcc	.+14     	; 0x1fb0 <_ZN12ACANFDBuffer12initWithSizeEm+0x34>
    1fa2:	28 e4       	ldi	r18, 0x48	; 72
    1fa4:	24 9f       	mul	r18, r20
    1fa6:	c0 01       	movw	r24, r0
    1fa8:	25 9f       	mul	r18, r21
    1faa:	90 0d       	add	r25, r0
    1fac:	11 24       	eor	r1, r1
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <_ZN12ACANFDBuffer12initWithSizeEm+0x38>
    1fb0:	8f ef       	ldi	r24, 0xFF	; 255
    1fb2:	9f ef       	ldi	r25, 0xFF	; 255
    1fb4:	0e 94 16 0b 	call	0x162c	; 0x162c <_Znaj>
    1fb8:	4c 01       	movw	r8, r24
    1fba:	56 01       	movw	r10, r12
    1fbc:	8c 01       	movw	r16, r24
    1fbe:	a1 14       	cp	r10, r1
    1fc0:	b1 04       	cpc	r11, r1
    1fc2:	49 f0       	breq	.+18     	; 0x1fd6 <_ZN12ACANFDBuffer12initWithSizeEm+0x5a>
    1fc4:	c8 01       	movw	r24, r16
    1fc6:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN12CANFDMessageC1Ev>
    1fca:	08 5b       	subi	r16, 0xB8	; 184
    1fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	a8 1a       	sub	r10, r24
    1fd2:	b1 08       	sbc	r11, r1
    1fd4:	f4 cf       	rjmp	.-24     	; 0x1fbe <_ZN12ACANFDBuffer12initWithSizeEm+0x42>
    1fd6:	88 82       	st	Y, r8
    1fd8:	99 82       	std	Y+1, r9	; 0x01
    1fda:	ca 82       	std	Y+2, r12	; 0x02
    1fdc:	db 82       	std	Y+3, r13	; 0x03
    1fde:	ec 82       	std	Y+4, r14	; 0x04
    1fe0:	fd 82       	std	Y+5, r15	; 0x05
    1fe2:	1e 82       	std	Y+6, r1	; 0x06
    1fe4:	1f 82       	std	Y+7, r1	; 0x07
    1fe6:	18 86       	std	Y+8, r1	; 0x08
    1fe8:	19 86       	std	Y+9, r1	; 0x09
    1fea:	1a 86       	std	Y+10, r1	; 0x0a
    1fec:	1b 86       	std	Y+11, r1	; 0x0b
    1fee:	1c 86       	std	Y+12, r1	; 0x0c
    1ff0:	1d 86       	std	Y+13, r1	; 0x0d
    1ff2:	1e 86       	std	Y+14, r1	; 0x0e
    1ff4:	1f 86       	std	Y+15, r1	; 0x0f
    1ff6:	18 8a       	std	Y+16, r1	; 0x10
    1ff8:	19 8a       	std	Y+17, r1	; 0x11
    1ffa:	1a 8a       	std	Y+18, r1	; 0x12
    1ffc:	1b 8a       	std	Y+19, r1	; 0x13
    1ffe:	1c 8a       	std	Y+20, r1	; 0x14
    2000:	1d 8a       	std	Y+21, r1	; 0x15
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	df 90       	pop	r13
    2010:	cf 90       	pop	r12
    2012:	bf 90       	pop	r11
    2014:	af 90       	pop	r10
    2016:	9f 90       	pop	r9
    2018:	8f 90       	pop	r8
    201a:	08 95       	ret

0000201c <_ZN8SPIClass16beginTransactionE11SPISettings>:
    201c:	20 91 7f 05 	lds	r18, 0x057F	; 0x80057f <_ZN8SPIClass13interruptModeE>
    2020:	22 23       	and	r18, r18
    2022:	99 f0       	breq	.+38     	; 0x204a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2024:	4f b7       	in	r20, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	20 91 7f 05 	lds	r18, 0x057F	; 0x80057f <_ZN8SPIClass13interruptModeE>
    202c:	21 30       	cpi	r18, 0x01	; 1
    202e:	59 f4       	brne	.+22     	; 0x2046 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    2030:	2d b3       	in	r18, 0x1d	; 29
    2032:	20 93 7d 05 	sts	0x057D, r18	; 0x80057d <_ZN8SPIClass13interruptSaveE>
    2036:	3d b3       	in	r19, 0x1d	; 29
    2038:	20 91 7e 05 	lds	r18, 0x057E	; 0x80057e <_ZN8SPIClass13interruptMaskE>
    203c:	20 95       	com	r18
    203e:	23 23       	and	r18, r19
    2040:	2d bb       	out	0x1d, r18	; 29
    2042:	4f bf       	out	0x3f, r20	; 63
    2044:	02 c0       	rjmp	.+4      	; 0x204a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    2046:	40 93 7d 05 	sts	0x057D, r20	; 0x80057d <_ZN8SPIClass13interruptSaveE>
    204a:	8c bd       	out	0x2c, r24	; 44
    204c:	9d bd       	out	0x2d, r25	; 45
    204e:	08 95       	ret

00002050 <_ZN8SPIClass10transfer16Ej>:
    2050:	0c b4       	in	r0, 0x2c	; 44
    2052:	05 fc       	sbrc	r0, 5
    2054:	0d c0       	rjmp	.+26     	; 0x2070 <_ZN8SPIClass10transfer16Ej+0x20>
    2056:	9e bd       	out	0x2e, r25	; 46
    2058:	00 00       	nop
    205a:	0d b4       	in	r0, 0x2d	; 45
    205c:	07 fe       	sbrs	r0, 7
    205e:	fd cf       	rjmp	.-6      	; 0x205a <_ZN8SPIClass10transfer16Ej+0xa>
    2060:	9e b5       	in	r25, 0x2e	; 46
    2062:	8e bd       	out	0x2e, r24	; 46
    2064:	00 00       	nop
    2066:	0d b4       	in	r0, 0x2d	; 45
    2068:	07 fe       	sbrs	r0, 7
    206a:	fd cf       	rjmp	.-6      	; 0x2066 <_ZN8SPIClass10transfer16Ej+0x16>
    206c:	8e b5       	in	r24, 0x2e	; 46
    206e:	08 95       	ret
    2070:	8e bd       	out	0x2e, r24	; 46
    2072:	00 00       	nop
    2074:	0d b4       	in	r0, 0x2d	; 45
    2076:	07 fe       	sbrs	r0, 7
    2078:	fd cf       	rjmp	.-6      	; 0x2074 <_ZN8SPIClass10transfer16Ej+0x24>
    207a:	8e b5       	in	r24, 0x2e	; 46
    207c:	9e bd       	out	0x2e, r25	; 46
    207e:	00 00       	nop
    2080:	0d b4       	in	r0, 0x2d	; 45
    2082:	07 fe       	sbrs	r0, 7
    2084:	fd cf       	rjmp	.-6      	; 0x2080 <_ZN8SPIClass10transfer16Ej+0x30>
    2086:	9e b5       	in	r25, 0x2e	; 46
    2088:	08 95       	ret

0000208a <_ZN8SPIClass14endTransactionEv>:
    208a:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <_ZN8SPIClass13interruptModeE>
    208e:	88 23       	and	r24, r24
    2090:	61 f0       	breq	.+24     	; 0x20aa <_ZN8SPIClass14endTransactionEv+0x20>
    2092:	9f b7       	in	r25, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	20 91 7f 05 	lds	r18, 0x057F	; 0x80057f <_ZN8SPIClass13interruptModeE>
    209a:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <_ZN8SPIClass13interruptSaveE>
    209e:	21 30       	cpi	r18, 0x01	; 1
    20a0:	19 f4       	brne	.+6      	; 0x20a8 <_ZN8SPIClass14endTransactionEv+0x1e>
    20a2:	8d bb       	out	0x1d, r24	; 29
    20a4:	9f bf       	out	0x3f, r25	; 63
    20a6:	08 95       	ret
    20a8:	8f bf       	out	0x3f, r24	; 63
    20aa:	08 95       	ret

000020ac <_ZN10ACAN2517FDC1EhR8SPIClassh>:
    20ac:	fc 01       	movw	r30, r24
    20ae:	11 82       	std	Z+1, r1	; 0x01
    20b0:	10 82       	st	Z, r1
    20b2:	80 e5       	ldi	r24, 0x50	; 80
    20b4:	82 83       	std	Z+2, r24	; 0x02
    20b6:	13 82       	std	Z+3, r1	; 0x03
    20b8:	55 83       	std	Z+5, r21	; 0x05
    20ba:	44 83       	std	Z+4, r20	; 0x04
    20bc:	66 83       	std	Z+6, r22	; 0x06
    20be:	27 83       	std	Z+7, r18	; 0x07
    20c0:	10 86       	std	Z+8, r1	; 0x08
    20c2:	11 86       	std	Z+9, r1	; 0x09
    20c4:	12 86       	std	Z+10, r1	; 0x0a
    20c6:	13 86       	std	Z+11, r1	; 0x0b
    20c8:	14 86       	std	Z+12, r1	; 0x0c
    20ca:	15 86       	std	Z+13, r1	; 0x0d
    20cc:	16 86       	std	Z+14, r1	; 0x0e
    20ce:	17 86       	std	Z+15, r1	; 0x0f
    20d0:	11 8a       	std	Z+17, r1	; 0x11
    20d2:	10 8a       	std	Z+16, r1	; 0x10
    20d4:	12 8a       	std	Z+18, r1	; 0x12
    20d6:	13 8a       	std	Z+19, r1	; 0x13
    20d8:	14 8a       	std	Z+20, r1	; 0x14
    20da:	15 8a       	std	Z+21, r1	; 0x15
    20dc:	16 8a       	std	Z+22, r1	; 0x16
    20de:	17 8a       	std	Z+23, r1	; 0x17
    20e0:	10 8e       	std	Z+24, r1	; 0x18
    20e2:	11 8e       	std	Z+25, r1	; 0x19
    20e4:	12 8e       	std	Z+26, r1	; 0x1a
    20e6:	13 8e       	std	Z+27, r1	; 0x1b
    20e8:	14 8e       	std	Z+28, r1	; 0x1c
    20ea:	15 8e       	std	Z+29, r1	; 0x1d
    20ec:	16 8e       	std	Z+30, r1	; 0x1e
    20ee:	17 8e       	std	Z+31, r1	; 0x1f
    20f0:	10 a2       	std	Z+32, r1	; 0x20
    20f2:	11 a2       	std	Z+33, r1	; 0x21
    20f4:	12 a2       	std	Z+34, r1	; 0x22
    20f6:	13 a2       	std	Z+35, r1	; 0x23
    20f8:	14 a2       	std	Z+36, r1	; 0x24
    20fa:	15 a2       	std	Z+37, r1	; 0x25
    20fc:	17 a2       	std	Z+39, r1	; 0x27
    20fe:	16 a2       	std	Z+38, r1	; 0x26
    2100:	10 a6       	std	Z+40, r1	; 0x28
    2102:	11 a6       	std	Z+41, r1	; 0x29
    2104:	12 a6       	std	Z+42, r1	; 0x2a
    2106:	13 a6       	std	Z+43, r1	; 0x2b
    2108:	14 a6       	std	Z+44, r1	; 0x2c
    210a:	15 a6       	std	Z+45, r1	; 0x2d
    210c:	16 a6       	std	Z+46, r1	; 0x2e
    210e:	17 a6       	std	Z+47, r1	; 0x2f
    2110:	10 aa       	std	Z+48, r1	; 0x30
    2112:	11 aa       	std	Z+49, r1	; 0x31
    2114:	12 aa       	std	Z+50, r1	; 0x32
    2116:	13 aa       	std	Z+51, r1	; 0x33
    2118:	14 aa       	std	Z+52, r1	; 0x34
    211a:	15 aa       	std	Z+53, r1	; 0x35
    211c:	16 aa       	std	Z+54, r1	; 0x36
    211e:	17 aa       	std	Z+55, r1	; 0x37
    2120:	10 ae       	std	Z+56, r1	; 0x38
    2122:	11 ae       	std	Z+57, r1	; 0x39
    2124:	12 ae       	std	Z+58, r1	; 0x3a
    2126:	13 ae       	std	Z+59, r1	; 0x3b
    2128:	08 95       	ret

0000212a <_ZN10ACAN2517FD9availableEv>:
    212a:	0f 93       	push	r16
    212c:	1f 93       	push	r17
    212e:	cf 93       	push	r28
    2130:	8c 01       	movw	r16, r24
    2132:	fc 01       	movw	r30, r24
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN8SPIClass16beginTransactionE11SPISettings>
    213c:	f8 94       	cli
    213e:	c1 e0       	ldi	r28, 0x01	; 1
    2140:	f8 01       	movw	r30, r16
    2142:	86 8d       	ldd	r24, Z+30	; 0x1e
    2144:	97 8d       	ldd	r25, Z+31	; 0x1f
    2146:	a0 a1       	ldd	r26, Z+32	; 0x20
    2148:	b1 a1       	ldd	r27, Z+33	; 0x21
    214a:	89 2b       	or	r24, r25
    214c:	8a 2b       	or	r24, r26
    214e:	8b 2b       	or	r24, r27
    2150:	09 f4       	brne	.+2      	; 0x2154 <_ZN10ACAN2517FD9availableEv+0x2a>
    2152:	c0 e0       	ldi	r28, 0x00	; 0
    2154:	78 94       	sei
    2156:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN8SPIClass14endTransactionEv>
    215a:	8c 2f       	mov	r24, r28
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	08 95       	ret

00002164 <_ZN10ACAN2517FD7receiveER12CANFDMessage>:
    2164:	ef 92       	push	r14
    2166:	ff 92       	push	r15
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	ec 01       	movw	r28, r24
    2170:	7b 01       	movw	r14, r22
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	9b 81       	ldd	r25, Y+3	; 0x03
    2176:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN8SPIClass16beginTransactionE11SPISettings>
    217a:	f8 94       	cli
    217c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    217e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2180:	a8 a1       	ldd	r26, Y+32	; 0x20
    2182:	b9 a1       	ldd	r27, Y+33	; 0x21
    2184:	11 e0       	ldi	r17, 0x01	; 1
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	a1 05       	cpc	r26, r1
    218a:	b1 05       	cpc	r27, r1
    218c:	09 f4       	brne	.+2      	; 0x2190 <_ZN10ACAN2517FD7receiveER12CANFDMessage+0x2c>
    218e:	10 e0       	ldi	r17, 0x00	; 0
    2190:	89 2b       	or	r24, r25
    2192:	8a 2b       	or	r24, r26
    2194:	8b 2b       	or	r24, r27
    2196:	29 f0       	breq	.+10     	; 0x21a2 <_ZN10ACAN2517FD7receiveER12CANFDMessage+0x3e>
    2198:	b7 01       	movw	r22, r14
    219a:	ce 01       	movw	r24, r28
    219c:	40 96       	adiw	r24, 0x10	; 16
    219e:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3>
    21a2:	78 94       	sei
    21a4:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN8SPIClass14endTransactionEv>
    21a8:	81 2f       	mov	r24, r17
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	ff 90       	pop	r15
    21b2:	ef 90       	pop	r14
    21b4:	08 95       	ret

000021b6 <_ZN10ACAN2517FD8assertCSEv>:
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	fc 01       	movw	r30, r24
    21ba:	86 81       	ldd	r24, Z+6	; 0x06
    21bc:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <digitalWrite>

000021c0 <_ZN10ACAN2517FD10deassertCSEv>:
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	fc 01       	movw	r30, r24
    21c4:	86 81       	ldd	r24, Z+6	; 0x06
    21c6:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <digitalWrite>

000021ca <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm>:
    21ca:	ef 92       	push	r14
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0xe>
    21d8:	00 d0       	rcall	.+0      	; 0x21da <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0x10>
    21da:	00 d0       	rcall	.+0      	; 0x21dc <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0x12>
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	7c 01       	movw	r14, r24
    21e2:	fb 01       	movw	r30, r22
    21e4:	ca 01       	movw	r24, r20
    21e6:	b9 01       	movw	r22, r18
    21e8:	8e 01       	movw	r16, r28
    21ea:	0f 5f       	subi	r16, 0xFF	; 255
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	26 e0       	ldi	r18, 0x06	; 6
    21f0:	d8 01       	movw	r26, r16
    21f2:	1d 92       	st	X+, r1
    21f4:	2a 95       	dec	r18
    21f6:	e9 f7       	brne	.-6      	; 0x21f2 <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm+0x28>
    21f8:	9f 01       	movw	r18, r30
    21fa:	3f 70       	andi	r19, 0x0F	; 15
    21fc:	30 62       	ori	r19, 0x20	; 32
    21fe:	39 83       	std	Y+1, r19	; 0x01
    2200:	2a 83       	std	Y+2, r18	; 0x02
    2202:	22 e0       	ldi	r18, 0x02	; 2
    2204:	a8 01       	movw	r20, r16
    2206:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZL23enterU32InBufferAtIndexmPhh>
    220a:	c7 01       	movw	r24, r14
    220c:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN10ACAN2517FD8assertCSEv>
    2210:	66 e0       	ldi	r22, 0x06	; 6
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	c8 01       	movw	r24, r16
    2216:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN8SPIClass8transferEPvj.part.6>
    221a:	c7 01       	movw	r24, r14
    221c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN10ACAN2517FD10deassertCSEv>
    2220:	26 96       	adiw	r28, 0x06	; 6
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	ff 90       	pop	r15
    2236:	ef 90       	pop	r14
    2238:	08 95       	ret

0000223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>:
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	00 d0       	rcall	.+0      	; 0x2244 <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh+0xa>
    2244:	1f 92       	push	r1
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	8c 01       	movw	r16, r24
    224c:	7f 70       	andi	r23, 0x0F	; 15
    224e:	70 62       	ori	r23, 0x20	; 32
    2250:	79 83       	std	Y+1, r23	; 0x01
    2252:	6a 83       	std	Y+2, r22	; 0x02
    2254:	4b 83       	std	Y+3, r20	; 0x03
    2256:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN10ACAN2517FD8assertCSEv>
    225a:	63 e0       	ldi	r22, 0x03	; 3
    225c:	70 e0       	ldi	r23, 0x00	; 0
    225e:	ce 01       	movw	r24, r28
    2260:	01 96       	adiw	r24, 0x01	; 1
    2262:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN8SPIClass8transferEPvj.part.6>
    2266:	c8 01       	movw	r24, r16
    2268:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN10ACAN2517FD10deassertCSEv>
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	08 95       	ret

0000227c <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>:
    227c:	ef 92       	push	r14
    227e:	ff 92       	push	r15
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	00 d0       	rcall	.+0      	; 0x228a <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0xe>
    228a:	00 d0       	rcall	.+0      	; 0x228c <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0x10>
    228c:	00 d0       	rcall	.+0      	; 0x228e <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0x12>
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	7c 01       	movw	r14, r24
    2294:	8e 01       	movw	r16, r28
    2296:	0f 5f       	subi	r16, 0xFF	; 255
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	86 e0       	ldi	r24, 0x06	; 6
    229c:	f8 01       	movw	r30, r16
    229e:	11 92       	st	Z+, r1
    22a0:	8a 95       	dec	r24
    22a2:	e9 f7       	brne	.-6      	; 0x229e <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj+0x22>
    22a4:	7f 70       	andi	r23, 0x0F	; 15
    22a6:	70 63       	ori	r23, 0x30	; 48
    22a8:	79 83       	std	Y+1, r23	; 0x01
    22aa:	6a 83       	std	Y+2, r22	; 0x02
    22ac:	c7 01       	movw	r24, r14
    22ae:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN10ACAN2517FD8assertCSEv>
    22b2:	66 e0       	ldi	r22, 0x06	; 6
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	c8 01       	movw	r24, r16
    22b8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN8SPIClass8transferEPvj.part.6>
    22bc:	c7 01       	movw	r24, r14
    22be:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN10ACAN2517FD10deassertCSEv>
    22c2:	62 e0       	ldi	r22, 0x02	; 2
    22c4:	c8 01       	movw	r24, r16
    22c6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZL20u32FromBufferAtIndexPhh>
    22ca:	26 96       	adiw	r28, 0x06	; 6
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	ff 90       	pop	r15
    22e0:	ef 90       	pop	r14
    22e2:	08 95       	ret

000022e4 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage>:
    22e4:	2f 92       	push	r2
    22e6:	3f 92       	push	r3
    22e8:	4f 92       	push	r4
    22ea:	5f 92       	push	r5
    22ec:	6f 92       	push	r6
    22ee:	7f 92       	push	r7
    22f0:	8f 92       	push	r8
    22f2:	9f 92       	push	r9
    22f4:	af 92       	push	r10
    22f6:	bf 92       	push	r11
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	c0 55       	subi	r28, 0x50	; 80
    230e:	d1 09       	sbc	r29, r1
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	5c 01       	movw	r10, r24
    231c:	8b 01       	movw	r16, r22
    231e:	60 e7       	ldi	r22, 0x70	; 112
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    2326:	9b 01       	movw	r18, r22
    2328:	3c 5f       	subi	r19, 0xFC	; 252
    232a:	2d 96       	adiw	r28, 0x0d	; 13
    232c:	3f af       	std	Y+63, r19	; 0x3f
    232e:	2e af       	std	Y+62, r18	; 0x3e
    2330:	2d 97       	sbiw	r28, 0x0d	; 13
    2332:	d8 01       	movw	r26, r16
    2334:	4d 90       	ld	r4, X+
    2336:	5d 90       	ld	r5, X+
    2338:	6d 90       	ld	r6, X+
    233a:	7c 90       	ld	r7, X
    233c:	13 97       	sbiw	r26, 0x03	; 3
    233e:	14 96       	adiw	r26, 0x04	; 4
    2340:	9c 90       	ld	r9, X
    2342:	99 20       	and	r9, r9
    2344:	d1 f0       	breq	.+52     	; 0x237a <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x96>
    2346:	d3 01       	movw	r26, r6
    2348:	c2 01       	movw	r24, r4
    234a:	32 e1       	ldi	r19, 0x12	; 18
    234c:	b6 95       	lsr	r27
    234e:	a7 95       	ror	r26
    2350:	97 95       	ror	r25
    2352:	87 95       	ror	r24
    2354:	3a 95       	dec	r19
    2356:	d1 f7       	brne	.-12     	; 0x234c <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x68>
    2358:	97 70       	andi	r25, 0x07	; 7
    235a:	aa 27       	eor	r26, r26
    235c:	bb 27       	eor	r27, r27
    235e:	e3 e0       	ldi	r30, 0x03	; 3
    2360:	6e 22       	and	r6, r30
    2362:	77 24       	eor	r7, r7
    2364:	4b e0       	ldi	r20, 0x0B	; 11
    2366:	44 0c       	add	r4, r4
    2368:	55 1c       	adc	r5, r5
    236a:	66 1c       	adc	r6, r6
    236c:	77 1c       	adc	r7, r7
    236e:	4a 95       	dec	r20
    2370:	d1 f7       	brne	.-12     	; 0x2366 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x82>
    2372:	48 2a       	or	r4, r24
    2374:	59 2a       	or	r5, r25
    2376:	6a 2a       	or	r6, r26
    2378:	7b 2a       	or	r7, r27
    237a:	d8 01       	movw	r26, r16
    237c:	17 96       	adiw	r26, 0x07	; 7
    237e:	2c 90       	ld	r2, X
    2380:	82 2d       	mov	r24, r2
    2382:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZL19lengthCodeForLengthh>
    2386:	6b 01       	movw	r12, r22
    2388:	7c 01       	movw	r14, r24
    238a:	99 20       	and	r9, r9
    238c:	11 f0       	breq	.+4      	; 0x2392 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xae>
    238e:	68 94       	set
    2390:	c4 f8       	bld	r12, 4
    2392:	f8 01       	movw	r30, r16
    2394:	85 81       	ldd	r24, Z+5	; 0x05
    2396:	82 30       	cpi	r24, 0x02	; 2
    2398:	61 f0       	breq	.+24     	; 0x23b2 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xce>
    239a:	83 30       	cpi	r24, 0x03	; 3
    239c:	29 f0       	breq	.+10     	; 0x23a8 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xc4>
    239e:	81 11       	cpse	r24, r1
    23a0:	0d c0       	rjmp	.+26     	; 0x23bc <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd8>
    23a2:	68 94       	set
    23a4:	c5 f8       	bld	r12, 5
    23a6:	0a c0       	rjmp	.+20     	; 0x23bc <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd8>
    23a8:	d5 01       	movw	r26, r10
    23aa:	1a 96       	adiw	r26, 0x0a	; 10
    23ac:	8c 91       	ld	r24, X
    23ae:	81 11       	cpse	r24, r1
    23b0:	03 c0       	rjmp	.+6      	; 0x23b8 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd4>
    23b2:	68 94       	set
    23b4:	c7 f8       	bld	r12, 7
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0xd8>
    23b8:	b0 ec       	ldi	r27, 0xC0	; 192
    23ba:	cb 2a       	or	r12, r27
    23bc:	31 2c       	mov	r3, r1
    23be:	e3 e0       	ldi	r30, 0x03	; 3
    23c0:	2e 0e       	add	r2, r30
    23c2:	31 1c       	adc	r3, r1
    23c4:	35 94       	asr	r3
    23c6:	27 94       	ror	r2
    23c8:	35 94       	asr	r3
    23ca:	27 94       	ror	r2
    23cc:	c1 01       	movw	r24, r2
    23ce:	03 2c       	mov	r0, r3
    23d0:	00 0c       	add	r0, r0
    23d2:	aa 0b       	sbc	r26, r26
    23d4:	bb 0b       	sbc	r27, r27
    23d6:	61 96       	adiw	r28, 0x11	; 17
    23d8:	8c af       	std	Y+60, r24	; 0x3c
    23da:	9d af       	std	Y+61, r25	; 0x3d
    23dc:	ae af       	std	Y+62, r26	; 0x3e
    23de:	bf af       	std	Y+63, r27	; 0x3f
    23e0:	61 97       	sbiw	r28, 0x11	; 17
    23e2:	de 01       	movw	r26, r28
    23e4:	11 96       	adiw	r26, 0x01	; 1
    23e6:	4d 01       	movw	r8, r26
    23e8:	8a e4       	ldi	r24, 0x4A	; 74
    23ea:	fd 01       	movw	r30, r26
    23ec:	11 92       	st	Z+, r1
    23ee:	8a 95       	dec	r24
    23f0:	e9 f7       	brne	.-6      	; 0x23ec <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x108>
    23f2:	2d 96       	adiw	r28, 0x0d	; 13
    23f4:	6e ad       	ldd	r22, Y+62	; 0x3e
    23f6:	7f ad       	ldd	r23, Y+63	; 0x3f
    23f8:	2d 97       	sbiw	r28, 0x0d	; 13
    23fa:	7f 70       	andi	r23, 0x0F	; 15
    23fc:	70 62       	ori	r23, 0x20	; 32
    23fe:	79 83       	std	Y+1, r23	; 0x01
    2400:	6a 83       	std	Y+2, r22	; 0x02
    2402:	22 e0       	ldi	r18, 0x02	; 2
    2404:	ad 01       	movw	r20, r26
    2406:	c3 01       	movw	r24, r6
    2408:	b2 01       	movw	r22, r4
    240a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZL23enterU32InBufferAtIndexmPhh>
    240e:	26 e0       	ldi	r18, 0x06	; 6
    2410:	a4 01       	movw	r20, r8
    2412:	c7 01       	movw	r24, r14
    2414:	b6 01       	movw	r22, r12
    2416:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZL23enterU32InBufferAtIndexmPhh>
    241a:	08 5f       	subi	r16, 0xF8	; 248
    241c:	1f 4f       	sbci	r17, 0xFF	; 255
    241e:	2a e0       	ldi	r18, 0x0A	; 10
    2420:	f2 2e       	mov	r15, r18
    2422:	41 2c       	mov	r4, r1
    2424:	51 2c       	mov	r5, r1
    2426:	32 01       	movw	r6, r4
    2428:	61 96       	adiw	r28, 0x11	; 17
    242a:	8c ad       	ldd	r24, Y+60	; 0x3c
    242c:	9d ad       	ldd	r25, Y+61	; 0x3d
    242e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2430:	bf ad       	ldd	r27, Y+63	; 0x3f
    2432:	61 97       	sbiw	r28, 0x11	; 17
    2434:	48 16       	cp	r4, r24
    2436:	59 06       	cpc	r5, r25
    2438:	6a 06       	cpc	r6, r26
    243a:	7b 06       	cpc	r7, r27
    243c:	90 f4       	brcc	.+36     	; 0x2462 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x17e>
    243e:	d8 01       	movw	r26, r16
    2440:	6d 91       	ld	r22, X+
    2442:	7d 91       	ld	r23, X+
    2444:	8d 91       	ld	r24, X+
    2446:	9d 91       	ld	r25, X+
    2448:	8d 01       	movw	r16, r26
    244a:	2f 2d       	mov	r18, r15
    244c:	a4 01       	movw	r20, r8
    244e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZL23enterU32InBufferAtIndexmPhh>
    2452:	bf ef       	ldi	r27, 0xFF	; 255
    2454:	4b 1a       	sub	r4, r27
    2456:	5b 0a       	sbc	r5, r27
    2458:	6b 0a       	sbc	r6, r27
    245a:	7b 0a       	sbc	r7, r27
    245c:	e4 e0       	ldi	r30, 0x04	; 4
    245e:	fe 0e       	add	r15, r30
    2460:	e3 cf       	rjmp	.-58     	; 0x2428 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage+0x144>
    2462:	c5 01       	movw	r24, r10
    2464:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN10ACAN2517FD8assertCSEv>
    2468:	b1 01       	movw	r22, r2
    246a:	66 0f       	add	r22, r22
    246c:	77 1f       	adc	r23, r23
    246e:	66 0f       	add	r22, r22
    2470:	77 1f       	adc	r23, r23
    2472:	66 5f       	subi	r22, 0xF6	; 246
    2474:	7f 4f       	sbci	r23, 0xFF	; 255
    2476:	c4 01       	movw	r24, r8
    2478:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN8SPIClass8transferEPvj.part.6>
    247c:	c5 01       	movw	r24, r10
    247e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN10ACAN2517FD10deassertCSEv>
    2482:	43 e0       	ldi	r20, 0x03	; 3
    2484:	69 e6       	ldi	r22, 0x69	; 105
    2486:	70 e0       	ldi	r23, 0x00	; 0
    2488:	c5 01       	movw	r24, r10
    248a:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    248e:	c0 5b       	subi	r28, 0xB0	; 176
    2490:	df 4f       	sbci	r29, 0xFF	; 255
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	1f 91       	pop	r17
    24a2:	0f 91       	pop	r16
    24a4:	ff 90       	pop	r15
    24a6:	ef 90       	pop	r14
    24a8:	df 90       	pop	r13
    24aa:	cf 90       	pop	r12
    24ac:	bf 90       	pop	r11
    24ae:	af 90       	pop	r10
    24b0:	9f 90       	pop	r9
    24b2:	8f 90       	pop	r8
    24b4:	7f 90       	pop	r7
    24b6:	6f 90       	pop	r6
    24b8:	5f 90       	pop	r5
    24ba:	4f 90       	pop	r4
    24bc:	3f 90       	pop	r3
    24be:	2f 90       	pop	r2
    24c0:	08 95       	ret

000024c2 <_ZN10ACAN2517FD17transmitInterruptEv>:
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	c8 54       	subi	r28, 0x48	; 72
    24d0:	d1 09       	sbc	r29, r1
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	8c 01       	movw	r16, r24
    24de:	ce 01       	movw	r24, r28
    24e0:	01 96       	adiw	r24, 0x01	; 1
    24e2:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN12CANFDMessageC1Ev>
    24e6:	f8 01       	movw	r30, r16
    24e8:	84 a9       	ldd	r24, Z+52	; 0x34
    24ea:	95 a9       	ldd	r25, Z+53	; 0x35
    24ec:	a6 a9       	ldd	r26, Z+54	; 0x36
    24ee:	b7 a9       	ldd	r27, Z+55	; 0x37
    24f0:	89 2b       	or	r24, r25
    24f2:	8a 2b       	or	r24, r26
    24f4:	8b 2b       	or	r24, r27
    24f6:	71 f0       	breq	.+28     	; 0x2514 <_ZN10ACAN2517FD17transmitInterruptEv+0x52>
    24f8:	be 01       	movw	r22, r28
    24fa:	6f 5f       	subi	r22, 0xFF	; 255
    24fc:	7f 4f       	sbci	r23, 0xFF	; 255
    24fe:	c8 01       	movw	r24, r16
    2500:	86 96       	adiw	r24, 0x26	; 38
    2502:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN12ACANFDBuffer6removeER12CANFDMessage.part.3>
    2506:	be 01       	movw	r22, r28
    2508:	6f 5f       	subi	r22, 0xFF	; 255
    250a:	7f 4f       	sbci	r23, 0xFF	; 255
    250c:	c8 01       	movw	r24, r16
    250e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage>
    2512:	08 c0       	rjmp	.+16     	; 0x2524 <_ZN10ACAN2517FD17transmitInterruptEv+0x62>
    2514:	40 e9       	ldi	r20, 0x90	; 144
    2516:	68 e6       	ldi	r22, 0x68	; 104
    2518:	70 e0       	ldi	r23, 0x00	; 0
    251a:	c8 01       	movw	r24, r16
    251c:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2520:	f8 01       	movw	r30, r16
    2522:	11 86       	std	Z+9, r1	; 0x09
    2524:	c8 5b       	subi	r28, 0xB8	; 184
    2526:	df 4f       	sbci	r29, 0xFF	; 255
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	df 91       	pop	r29
    2534:	cf 91       	pop	r28
    2536:	1f 91       	pop	r17
    2538:	0f 91       	pop	r16
    253a:	08 95       	ret

0000253c <_ZN10ACAN2517FD16receiveInterruptEv>:
    253c:	2f 92       	push	r2
    253e:	3f 92       	push	r3
    2540:	4f 92       	push	r4
    2542:	5f 92       	push	r5
    2544:	6f 92       	push	r6
    2546:	7f 92       	push	r7
    2548:	8f 92       	push	r8
    254a:	9f 92       	push	r9
    254c:	af 92       	push	r10
    254e:	bf 92       	push	r11
    2550:	cf 92       	push	r12
    2552:	df 92       	push	r13
    2554:	ef 92       	push	r14
    2556:	ff 92       	push	r15
    2558:	0f 93       	push	r16
    255a:	1f 93       	push	r17
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	c5 59       	subi	r28, 0x95	; 149
    2566:	d1 09       	sbc	r29, r1
    2568:	0f b6       	in	r0, 0x3f	; 63
    256a:	f8 94       	cli
    256c:	de bf       	out	0x3e, r29	; 62
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	cd bf       	out	0x3d, r28	; 61
    2572:	3c 01       	movw	r6, r24
    2574:	64 e6       	ldi	r22, 0x64	; 100
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    257c:	6b 01       	movw	r12, r22
    257e:	7c 01       	movw	r14, r24
    2580:	ce 01       	movw	r24, r28
    2582:	85 5b       	subi	r24, 0xB5	; 181
    2584:	9f 4f       	sbci	r25, 0xFF	; 255
    2586:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN12CANFDMessageC1Ev>
    258a:	8e 01       	movw	r16, r28
    258c:	0f 5f       	subi	r16, 0xFF	; 255
    258e:	1f 4f       	sbci	r17, 0xFF	; 255
    2590:	8a e4       	ldi	r24, 0x4A	; 74
    2592:	f8 01       	movw	r30, r16
    2594:	11 92       	st	Z+, r1
    2596:	8a 95       	dec	r24
    2598:	e9 f7       	brne	.-6      	; 0x2594 <_ZN10ACAN2517FD16receiveInterruptEv+0x58>
    259a:	fc ef       	ldi	r31, 0xFC	; 252
    259c:	df 1a       	sub	r13, r31
    259e:	8f e0       	ldi	r24, 0x0F	; 15
    25a0:	d8 22       	and	r13, r24
    25a2:	90 e3       	ldi	r25, 0x30	; 48
    25a4:	d9 2a       	or	r13, r25
    25a6:	d9 82       	std	Y+1, r13	; 0x01
    25a8:	ca 82       	std	Y+2, r12	; 0x02
    25aa:	c3 01       	movw	r24, r6
    25ac:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN10ACAN2517FD8assertCSEv>
    25b0:	6a e4       	ldi	r22, 0x4A	; 74
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	c8 01       	movw	r24, r16
    25b6:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN8SPIClass8transferEPvj.part.6>
    25ba:	62 e0       	ldi	r22, 0x02	; 2
    25bc:	c8 01       	movw	r24, r16
    25be:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZL20u32FromBufferAtIndexPhh>
    25c2:	2f 96       	adiw	r28, 0x0f	; 15
    25c4:	6c af       	std	Y+60, r22	; 0x3c
    25c6:	7d af       	std	Y+61, r23	; 0x3d
    25c8:	8e af       	std	Y+62, r24	; 0x3e
    25ca:	9f af       	std	Y+63, r25	; 0x3f
    25cc:	2f 97       	sbiw	r28, 0x0f	; 15
    25ce:	66 e0       	ldi	r22, 0x06	; 6
    25d0:	c8 01       	movw	r24, r16
    25d2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZL20u32FromBufferAtIndexPhh>
    25d6:	4b 01       	movw	r8, r22
    25d8:	5c 01       	movw	r10, r24
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	8f 70       	andi	r24, 0x0F	; 15
    25e0:	99 27       	eor	r25, r25
    25e2:	aa 27       	eor	r26, r26
    25e4:	bb 27       	eor	r27, r27
    25e6:	fc 01       	movw	r30, r24
    25e8:	ed 57       	subi	r30, 0x7D	; 125
    25ea:	fd 4f       	sbci	r31, 0xFD	; 253
    25ec:	c0 80       	ld	r12, Z
    25ee:	63 96       	adiw	r28, 0x13	; 19
    25f0:	cf ae       	std	Y+63, r12	; 0x3f
    25f2:	63 97       	sbiw	r28, 0x13	; 19
    25f4:	d1 2c       	mov	r13, r1
    25f6:	e3 e0       	ldi	r30, 0x03	; 3
    25f8:	ce 0e       	add	r12, r30
    25fa:	d1 1c       	adc	r13, r1
    25fc:	d5 94       	asr	r13
    25fe:	c7 94       	ror	r12
    2600:	d5 94       	asr	r13
    2602:	c7 94       	ror	r12
    2604:	0d 2c       	mov	r0, r13
    2606:	00 0c       	add	r0, r0
    2608:	ee 08       	sbc	r14, r14
    260a:	ff 08       	sbc	r15, r15
    260c:	8b e4       	ldi	r24, 0x4B	; 75
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	8c 0f       	add	r24, r28
    2612:	9d 1f       	adc	r25, r29
    2614:	08 96       	adiw	r24, 0x08	; 8
    2616:	cc 56       	subi	r28, 0x6C	; 108
    2618:	df 4f       	sbci	r29, 0xFF	; 255
    261a:	99 83       	std	Y+1, r25	; 0x01
    261c:	88 83       	st	Y, r24
    261e:	c4 59       	subi	r28, 0x94	; 148
    2620:	d0 40       	sbci	r29, 0x00	; 0
    2622:	9a e0       	ldi	r25, 0x0A	; 10
    2624:	cd 56       	subi	r28, 0x6D	; 109
    2626:	df 4f       	sbci	r29, 0xFF	; 255
    2628:	98 83       	st	Y, r25
    262a:	c3 59       	subi	r28, 0x93	; 147
    262c:	d0 40       	sbci	r29, 0x00	; 0
    262e:	21 2c       	mov	r2, r1
    2630:	31 2c       	mov	r3, r1
    2632:	21 01       	movw	r4, r2
    2634:	2c 14       	cp	r2, r12
    2636:	3d 04       	cpc	r3, r13
    2638:	4e 04       	cpc	r4, r14
    263a:	5f 04       	cpc	r5, r15
    263c:	48 f5       	brcc	.+82     	; 0x2690 <_ZN10ACAN2517FD16receiveInterruptEv+0x154>
    263e:	cd 56       	subi	r28, 0x6D	; 109
    2640:	df 4f       	sbci	r29, 0xFF	; 255
    2642:	68 81       	ld	r22, Y
    2644:	c3 59       	subi	r28, 0x93	; 147
    2646:	d0 40       	sbci	r29, 0x00	; 0
    2648:	c8 01       	movw	r24, r16
    264a:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZL20u32FromBufferAtIndexPhh>
    264e:	cc 56       	subi	r28, 0x6C	; 108
    2650:	df 4f       	sbci	r29, 0xFF	; 255
    2652:	e8 81       	ld	r30, Y
    2654:	f9 81       	ldd	r31, Y+1	; 0x01
    2656:	c4 59       	subi	r28, 0x94	; 148
    2658:	d0 40       	sbci	r29, 0x00	; 0
    265a:	61 93       	st	Z+, r22
    265c:	71 93       	st	Z+, r23
    265e:	81 93       	st	Z+, r24
    2660:	91 93       	st	Z+, r25
    2662:	cc 56       	subi	r28, 0x6C	; 108
    2664:	df 4f       	sbci	r29, 0xFF	; 255
    2666:	f9 83       	std	Y+1, r31	; 0x01
    2668:	e8 83       	st	Y, r30
    266a:	c4 59       	subi	r28, 0x94	; 148
    266c:	d0 40       	sbci	r29, 0x00	; 0
    266e:	ff ef       	ldi	r31, 0xFF	; 255
    2670:	2f 1a       	sub	r2, r31
    2672:	3f 0a       	sbc	r3, r31
    2674:	4f 0a       	sbc	r4, r31
    2676:	5f 0a       	sbc	r5, r31
    2678:	cd 56       	subi	r28, 0x6D	; 109
    267a:	df 4f       	sbci	r29, 0xFF	; 255
    267c:	88 81       	ld	r24, Y
    267e:	c3 59       	subi	r28, 0x93	; 147
    2680:	d0 40       	sbci	r29, 0x00	; 0
    2682:	8c 5f       	subi	r24, 0xFC	; 252
    2684:	cd 56       	subi	r28, 0x6D	; 109
    2686:	df 4f       	sbci	r29, 0xFF	; 255
    2688:	88 83       	st	Y, r24
    268a:	c3 59       	subi	r28, 0x93	; 147
    268c:	d0 40       	sbci	r29, 0x00	; 0
    268e:	d2 cf       	rjmp	.-92     	; 0x2634 <_ZN10ACAN2517FD16receiveInterruptEv+0xf8>
    2690:	c3 01       	movw	r24, r6
    2692:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN10ACAN2517FD10deassertCSEv>
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	6d e5       	ldi	r22, 0x5D	; 93
    269a:	70 e0       	ldi	r23, 0x00	; 0
    269c:	c3 01       	movw	r24, r6
    269e:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    26a2:	d5 01       	movw	r26, r10
    26a4:	c4 01       	movw	r24, r8
    26a6:	4b e0       	ldi	r20, 0x0B	; 11
    26a8:	b6 95       	lsr	r27
    26aa:	a7 95       	ror	r26
    26ac:	97 95       	ror	r25
    26ae:	87 95       	ror	r24
    26b0:	4a 95       	dec	r20
    26b2:	d1 f7       	brne	.-12     	; 0x26a8 <_ZN10ACAN2517FD16receiveInterruptEv+0x16c>
    26b4:	8f 71       	andi	r24, 0x1F	; 31
    26b6:	62 96       	adiw	r28, 0x12	; 18
    26b8:	8f af       	std	Y+63, r24	; 0x3f
    26ba:	62 97       	sbiw	r28, 0x12	; 18
    26bc:	85 fe       	sbrs	r8, 5
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <_ZN10ACAN2517FD16receiveInterruptEv+0x18c>
    26c0:	61 96       	adiw	r28, 0x11	; 17
    26c2:	1f ae       	std	Y+63, r1	; 0x3f
    26c4:	61 97       	sbiw	r28, 0x11	; 17
    26c6:	0c c0       	rjmp	.+24     	; 0x26e0 <_ZN10ACAN2517FD16receiveInterruptEv+0x1a4>
    26c8:	87 fc       	sbrc	r8, 7
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <_ZN10ACAN2517FD16receiveInterruptEv+0x194>
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	05 c0       	rjmp	.+10     	; 0x26da <_ZN10ACAN2517FD16receiveInterruptEv+0x19e>
    26d0:	86 fc       	sbrc	r8, 6
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <_ZN10ACAN2517FD16receiveInterruptEv+0x19c>
    26d4:	82 e0       	ldi	r24, 0x02	; 2
    26d6:	01 c0       	rjmp	.+2      	; 0x26da <_ZN10ACAN2517FD16receiveInterruptEv+0x19e>
    26d8:	83 e0       	ldi	r24, 0x03	; 3
    26da:	61 96       	adiw	r28, 0x11	; 17
    26dc:	8f af       	std	Y+63, r24	; 0x3f
    26de:	61 97       	sbiw	r28, 0x11	; 17
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	b5 01       	movw	r22, r10
    26e4:	a4 01       	movw	r20, r8
    26e6:	40 71       	andi	r20, 0x10	; 16
    26e8:	55 27       	eor	r21, r21
    26ea:	66 27       	eor	r22, r22
    26ec:	77 27       	eor	r23, r23
    26ee:	84 fe       	sbrs	r8, 4
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	60 96       	adiw	r28, 0x10	; 16
    26f4:	8f af       	std	Y+63, r24	; 0x3f
    26f6:	60 97       	sbiw	r28, 0x10	; 16
    26f8:	45 2b       	or	r20, r21
    26fa:	46 2b       	or	r20, r22
    26fc:	47 2b       	or	r20, r23
    26fe:	29 f1       	breq	.+74     	; 0x274a <_ZN10ACAN2517FD16receiveInterruptEv+0x20e>
    2700:	2f 96       	adiw	r28, 0x0f	; 15
    2702:	8c ad       	ldd	r24, Y+60	; 0x3c
    2704:	9d ad       	ldd	r25, Y+61	; 0x3d
    2706:	ae ad       	ldd	r26, Y+62	; 0x3e
    2708:	bf ad       	ldd	r27, Y+63	; 0x3f
    270a:	2f 97       	sbiw	r28, 0x0f	; 15
    270c:	ac 01       	movw	r20, r24
    270e:	bd 01       	movw	r22, r26
    2710:	2b e0       	ldi	r18, 0x0B	; 11
    2712:	76 95       	lsr	r23
    2714:	67 95       	ror	r22
    2716:	57 95       	ror	r21
    2718:	47 95       	ror	r20
    271a:	2a 95       	dec	r18
    271c:	d1 f7       	brne	.-12     	; 0x2712 <_ZN10ACAN2517FD16receiveInterruptEv+0x1d6>
    271e:	63 70       	andi	r22, 0x03	; 3
    2720:	77 27       	eor	r23, r23
    2722:	97 70       	andi	r25, 0x07	; 7
    2724:	aa 27       	eor	r26, r26
    2726:	bb 27       	eor	r27, r27
    2728:	32 e1       	ldi	r19, 0x12	; 18
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	aa 1f       	adc	r26, r26
    2730:	bb 1f       	adc	r27, r27
    2732:	3a 95       	dec	r19
    2734:	d1 f7       	brne	.-12     	; 0x272a <_ZN10ACAN2517FD16receiveInterruptEv+0x1ee>
    2736:	84 2b       	or	r24, r20
    2738:	95 2b       	or	r25, r21
    273a:	a6 2b       	or	r26, r22
    273c:	b7 2b       	or	r27, r23
    273e:	2f 96       	adiw	r28, 0x0f	; 15
    2740:	8c af       	std	Y+60, r24	; 0x3c
    2742:	9d af       	std	Y+61, r25	; 0x3d
    2744:	ae af       	std	Y+62, r26	; 0x3e
    2746:	bf af       	std	Y+63, r27	; 0x3f
    2748:	2f 97       	sbiw	r28, 0x0f	; 15
    274a:	f3 01       	movw	r30, r6
    274c:	82 89       	ldd	r24, Z+18	; 0x12
    274e:	93 89       	ldd	r25, Z+19	; 0x13
    2750:	a4 89       	ldd	r26, Z+20	; 0x14
    2752:	b5 89       	ldd	r27, Z+21	; 0x15
    2754:	46 8d       	ldd	r20, Z+30	; 0x1e
    2756:	57 8d       	ldd	r21, Z+31	; 0x1f
    2758:	60 a1       	ldd	r22, Z+32	; 0x20
    275a:	71 a1       	ldd	r23, Z+33	; 0x21
    275c:	48 17       	cp	r20, r24
    275e:	59 07       	cpc	r21, r25
    2760:	6a 07       	cpc	r22, r26
    2762:	7b 07       	cpc	r23, r27
    2764:	40 f4       	brcc	.+16     	; 0x2776 <_ZN10ACAN2517FD16receiveInterruptEv+0x23a>
    2766:	be 01       	movw	r22, r28
    2768:	65 5b       	subi	r22, 0xB5	; 181
    276a:	7f 4f       	sbci	r23, 0xFF	; 255
    276c:	c3 01       	movw	r24, r6
    276e:	40 96       	adiw	r24, 0x10	; 16
    2770:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2>
    2774:	08 c0       	rjmp	.+16     	; 0x2786 <_ZN10ACAN2517FD16receiveInterruptEv+0x24a>
    2776:	01 96       	adiw	r24, 0x01	; 1
    2778:	a1 1d       	adc	r26, r1
    277a:	b1 1d       	adc	r27, r1
    277c:	f3 01       	movw	r30, r6
    277e:	82 a3       	std	Z+34, r24	; 0x22
    2780:	93 a3       	std	Z+35, r25	; 0x23
    2782:	a4 a3       	std	Z+36, r26	; 0x24
    2784:	b5 a3       	std	Z+37, r27	; 0x25
    2786:	cb 56       	subi	r28, 0x6B	; 107
    2788:	df 4f       	sbci	r29, 0xFF	; 255
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	1f 91       	pop	r17
    279a:	0f 91       	pop	r16
    279c:	ff 90       	pop	r15
    279e:	ef 90       	pop	r14
    27a0:	df 90       	pop	r13
    27a2:	cf 90       	pop	r12
    27a4:	bf 90       	pop	r11
    27a6:	af 90       	pop	r10
    27a8:	9f 90       	pop	r9
    27aa:	8f 90       	pop	r8
    27ac:	7f 90       	pop	r7
    27ae:	6f 90       	pop	r6
    27b0:	5f 90       	pop	r5
    27b2:	4f 90       	pop	r4
    27b4:	3f 90       	pop	r3
    27b6:	2f 90       	pop	r2
    27b8:	08 95       	ret

000027ba <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj>:
    27ba:	0f 93       	push	r16
    27bc:	1f 93       	push	r17
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj+0xa>
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj+0xc>
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	8c 01       	movw	r16, r24
    27cc:	19 82       	std	Y+1, r1	; 0x01
    27ce:	1a 82       	std	Y+2, r1	; 0x02
    27d0:	1b 82       	std	Y+3, r1	; 0x03
    27d2:	1c 82       	std	Y+4, r1	; 0x04
    27d4:	7f 70       	andi	r23, 0x0F	; 15
    27d6:	70 63       	ori	r23, 0x30	; 48
    27d8:	79 83       	std	Y+1, r23	; 0x01
    27da:	6a 83       	std	Y+2, r22	; 0x02
    27dc:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN10ACAN2517FD8assertCSEv>
    27e0:	64 e0       	ldi	r22, 0x04	; 4
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	ce 01       	movw	r24, r28
    27e6:	01 96       	adiw	r24, 0x01	; 1
    27e8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN8SPIClass8transferEPvj.part.6>
    27ec:	c8 01       	movw	r24, r16
    27ee:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN10ACAN2517FD10deassertCSEv>
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	9c 81       	ldd	r25, Y+4	; 0x04
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	1f 91       	pop	r17
    2804:	0f 91       	pop	r16
    2806:	08 95       	ret

00002808 <_ZN10ACAN2517FD8isr_coreEv>:
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	1f 93       	push	r17
    280e:	cf 93       	push	r28
    2810:	df 93       	push	r29
    2812:	ec 01       	movw	r28, r24
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	9b 81       	ldd	r25, Y+3	; 0x03
    2818:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN8SPIClass16beginTransactionE11SPISettings>
    281c:	6c e1       	ldi	r22, 0x1C	; 28
    281e:	70 e0       	ldi	r23, 0x00	; 0
    2820:	ce 01       	movw	r24, r28
    2822:	0e 94 dd 13 	call	0x27ba	; 0x27ba <_ZN10ACAN2517FD36readRegister16Assume_SPI_transactionEj>
    2826:	7c 01       	movw	r14, r24
    2828:	81 ff       	sbrs	r24, 1
    282a:	05 c0       	rjmp	.+10     	; 0x2836 <_ZN10ACAN2517FD8isr_coreEv+0x2e>
    282c:	ce 01       	movw	r24, r28
    282e:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN10ACAN2517FD16receiveInterruptEv>
    2832:	11 e0       	ldi	r17, 0x01	; 1
    2834:	01 c0       	rjmp	.+2      	; 0x2838 <_ZN10ACAN2517FD8isr_coreEv+0x30>
    2836:	10 e0       	ldi	r17, 0x00	; 0
    2838:	f2 fe       	sbrs	r15, 2
    283a:	07 c0       	rjmp	.+14     	; 0x284a <_ZN10ACAN2517FD8isr_coreEv+0x42>
    283c:	4f ee       	ldi	r20, 0xEF	; 239
    283e:	6c e6       	ldi	r22, 0x6C	; 108
    2840:	70 e0       	ldi	r23, 0x00	; 0
    2842:	ce 01       	movw	r24, r28
    2844:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2848:	02 c0       	rjmp	.+4      	; 0x284e <_ZN10ACAN2517FD8isr_coreEv+0x46>
    284a:	e0 fe       	sbrs	r14, 0
    284c:	04 c0       	rjmp	.+8      	; 0x2856 <_ZN10ACAN2517FD8isr_coreEv+0x4e>
    284e:	ce 01       	movw	r24, r28
    2850:	0e 94 61 12 	call	0x24c2	; 0x24c2 <_ZN10ACAN2517FD17transmitInterruptEv>
    2854:	11 e0       	ldi	r17, 0x01	; 1
    2856:	e2 fe       	sbrs	r14, 2
    2858:	07 c0       	rjmp	.+14     	; 0x2868 <_ZN10ACAN2517FD8isr_coreEv+0x60>
    285a:	4b ef       	ldi	r20, 0xFB	; 251
    285c:	6c e1       	ldi	r22, 0x1C	; 28
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	ce 01       	movw	r24, r28
    2862:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2866:	11 e0       	ldi	r17, 0x01	; 1
    2868:	e3 fe       	sbrs	r14, 3
    286a:	07 c0       	rjmp	.+14     	; 0x287a <_ZN10ACAN2517FD8isr_coreEv+0x72>
    286c:	47 ef       	ldi	r20, 0xF7	; 247
    286e:	6c e1       	ldi	r22, 0x1C	; 28
    2870:	70 e0       	ldi	r23, 0x00	; 0
    2872:	ce 01       	movw	r24, r28
    2874:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2878:	11 e0       	ldi	r17, 0x01	; 1
    287a:	f4 fe       	sbrs	r15, 4
    287c:	07 c0       	rjmp	.+14     	; 0x288c <_ZN10ACAN2517FD8isr_coreEv+0x84>
    287e:	4f ee       	ldi	r20, 0xEF	; 239
    2880:	6d e1       	ldi	r22, 0x1D	; 29
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	ce 01       	movw	r24, r28
    2886:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    288a:	11 e0       	ldi	r17, 0x01	; 1
    288c:	f3 fe       	sbrs	r15, 3
    288e:	0c c0       	rjmp	.+24     	; 0x28a8 <_ZN10ACAN2517FD8isr_coreEv+0xa0>
    2890:	8f 85       	ldd	r24, Y+15	; 0x0f
    2892:	8f 3f       	cpi	r24, 0xFF	; 255
    2894:	11 f0       	breq	.+4      	; 0x289a <_ZN10ACAN2517FD8isr_coreEv+0x92>
    2896:	8f 5f       	subi	r24, 0xFF	; 255
    2898:	8f 87       	std	Y+15, r24	; 0x0f
    289a:	47 ef       	ldi	r20, 0xF7	; 247
    289c:	60 e6       	ldi	r22, 0x60	; 96
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	ce 01       	movw	r24, r28
    28a2:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    28a6:	11 e0       	ldi	r17, 0x01	; 1
    28a8:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN8SPIClass14endTransactionEv>
    28ac:	81 2f       	mov	r24, r17
    28ae:	df 91       	pop	r29
    28b0:	cf 91       	pop	r28
    28b2:	1f 91       	pop	r17
    28b4:	ff 90       	pop	r15
    28b6:	ef 90       	pop	r14
    28b8:	08 95       	ret

000028ba <_ZN10ACAN2517FD3isrEv>:
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
    28be:	ec 01       	movw	r28, r24
    28c0:	ce 01       	movw	r24, r28
    28c2:	0e 94 04 14 	call	0x2808	; 0x2808 <_ZN10ACAN2517FD8isr_coreEv>
    28c6:	81 11       	cpse	r24, r1
    28c8:	fb cf       	rjmp	.-10     	; 0x28c0 <_ZN10ACAN2517FD3isrEv+0x6>
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	08 95       	ret

000028d0 <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj>:
    28d0:	0f 93       	push	r16
    28d2:	1f 93       	push	r17
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
    28d8:	00 d0       	rcall	.+0      	; 0x28da <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj+0xa>
    28da:	1f 92       	push	r1
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	8c 01       	movw	r16, r24
    28e2:	19 82       	std	Y+1, r1	; 0x01
    28e4:	1a 82       	std	Y+2, r1	; 0x02
    28e6:	1b 82       	std	Y+3, r1	; 0x03
    28e8:	7f 70       	andi	r23, 0x0F	; 15
    28ea:	70 63       	ori	r23, 0x30	; 48
    28ec:	79 83       	std	Y+1, r23	; 0x01
    28ee:	6a 83       	std	Y+2, r22	; 0x02
    28f0:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN10ACAN2517FD8assertCSEv>
    28f4:	63 e0       	ldi	r22, 0x03	; 3
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	ce 01       	movw	r24, r28
    28fa:	01 96       	adiw	r24, 0x01	; 1
    28fc:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN8SPIClass8transferEPvj.part.6>
    2900:	c8 01       	movw	r24, r16
    2902:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN10ACAN2517FD10deassertCSEv>
    2906:	8b 81       	ldd	r24, Y+3	; 0x03
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	1f 91       	pop	r17
    2914:	0f 91       	pop	r16
    2916:	08 95       	ret

00002918 <_ZN10ACAN2517FD21enterInTransmitBufferERK12CANFDMessage>:
    2918:	0f 93       	push	r16
    291a:	1f 93       	push	r17
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	ec 01       	movw	r28, r24
    2922:	89 85       	ldd	r24, Y+9	; 0x09
    2924:	88 23       	and	r24, r24
    2926:	d9 f0       	breq	.+54     	; 0x295e <_ZN10ACAN2517FD21enterInTransmitBufferERK12CANFDMessage+0x46>
    2928:	88 a5       	ldd	r24, Y+40	; 0x28
    292a:	99 a5       	ldd	r25, Y+41	; 0x29
    292c:	aa a5       	ldd	r26, Y+42	; 0x2a
    292e:	bb a5       	ldd	r27, Y+43	; 0x2b
    2930:	0c a9       	ldd	r16, Y+52	; 0x34
    2932:	1d a9       	ldd	r17, Y+53	; 0x35
    2934:	2e a9       	ldd	r18, Y+54	; 0x36
    2936:	3f a9       	ldd	r19, Y+55	; 0x37
    2938:	08 17       	cp	r16, r24
    293a:	19 07       	cpc	r17, r25
    293c:	2a 07       	cpc	r18, r26
    293e:	3b 07       	cpc	r19, r27
    2940:	28 f4       	brcc	.+10     	; 0x294c <_ZN10ACAN2517FD21enterInTransmitBufferERK12CANFDMessage+0x34>
    2942:	ce 01       	movw	r24, r28
    2944:	86 96       	adiw	r24, 0x26	; 38
    2946:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_ZN12ACANFDBuffer6appendERK12CANFDMessage.part.2>
    294a:	1c c0       	rjmp	.+56     	; 0x2984 <_ZN10ACAN2517FD21enterInTransmitBufferERK12CANFDMessage+0x6c>
    294c:	01 96       	adiw	r24, 0x01	; 1
    294e:	a1 1d       	adc	r26, r1
    2950:	b1 1d       	adc	r27, r1
    2952:	88 af       	std	Y+56, r24	; 0x38
    2954:	99 af       	std	Y+57, r25	; 0x39
    2956:	aa af       	std	Y+58, r26	; 0x3a
    2958:	bb af       	std	Y+59, r27	; 0x3b
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	14 c0       	rjmp	.+40     	; 0x2986 <_ZN10ACAN2517FD21enterInTransmitBufferERK12CANFDMessage+0x6e>
    295e:	ce 01       	movw	r24, r28
    2960:	0e 94 72 11 	call	0x22e4	; 0x22e4 <_ZN10ACAN2517FD24appendInControllerTxFIFOERK12CANFDMessage>
    2964:	6c e6       	ldi	r22, 0x6C	; 108
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	ce 01       	movw	r24, r28
    296a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj>
    296e:	80 fd       	sbrc	r24, 0
    2970:	09 c0       	rjmp	.+18     	; 0x2984 <_ZN10ACAN2517FD21enterInTransmitBufferERK12CANFDMessage+0x6c>
    2972:	41 e9       	ldi	r20, 0x91	; 145
    2974:	68 e6       	ldi	r22, 0x68	; 104
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	ce 01       	movw	r24, r28
    297a:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	89 87       	std	Y+9, r24	; 0x09
    2982:	01 c0       	rjmp	.+2      	; 0x2986 <_ZN10ACAN2517FD21enterInTransmitBufferERK12CANFDMessage+0x6e>
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	08 95       	ret

00002990 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage>:
    2990:	2f 92       	push	r2
    2992:	3f 92       	push	r3
    2994:	4f 92       	push	r4
    2996:	5f 92       	push	r5
    2998:	6f 92       	push	r6
    299a:	7f 92       	push	r7
    299c:	8f 92       	push	r8
    299e:	9f 92       	push	r9
    29a0:	af 92       	push	r10
    29a2:	bf 92       	push	r11
    29a4:	cf 92       	push	r12
    29a6:	df 92       	push	r13
    29a8:	ef 92       	push	r14
    29aa:	ff 92       	push	r15
    29ac:	0f 93       	push	r16
    29ae:	1f 93       	push	r17
    29b0:	cf 93       	push	r28
    29b2:	df 93       	push	r29
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	c1 55       	subi	r28, 0x51	; 81
    29ba:	d1 09       	sbc	r29, r1
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	dc 01       	movw	r26, r24
    29c8:	18 96       	adiw	r26, 0x08	; 8
    29ca:	bc 91       	ld	r27, X
    29cc:	2c 96       	adiw	r28, 0x0c	; 12
    29ce:	bf af       	std	Y+63, r27	; 0x3f
    29d0:	2c 97       	sbiw	r28, 0x0c	; 12
    29d2:	b1 11       	cpse	r27, r1
    29d4:	04 c0       	rjmp	.+8      	; 0x29de <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x4e>
    29d6:	2c 96       	adiw	r28, 0x0c	; 12
    29d8:	1f ae       	std	Y+63, r1	; 0x3f
    29da:	2c 97       	sbiw	r28, 0x0c	; 12
    29dc:	cb c0       	rjmp	.+406    	; 0x2b74 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x1e4>
    29de:	5b 01       	movw	r10, r22
    29e0:	8c 01       	movw	r16, r24
    29e2:	64 e5       	ldi	r22, 0x54	; 84
    29e4:	70 e0       	ldi	r23, 0x00	; 0
    29e6:	0e 94 68 14 	call	0x28d0	; 0x28d0 <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj>
    29ea:	84 ff       	sbrs	r24, 4
    29ec:	07 c0       	rjmp	.+14     	; 0x29fc <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x6c>
    29ee:	4f ee       	ldi	r20, 0xEF	; 239
    29f0:	64 e5       	ldi	r22, 0x54	; 84
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	c8 01       	movw	r24, r16
    29f6:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    29fa:	02 c0       	rjmp	.+4      	; 0x2a00 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x70>
    29fc:	80 ff       	sbrs	r24, 0
    29fe:	eb cf       	rjmp	.-42     	; 0x29d6 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x46>
    2a00:	68 e5       	ldi	r22, 0x58	; 88
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	c8 01       	movw	r24, r16
    2a06:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    2a0a:	fb 01       	movw	r30, r22
    2a0c:	fc 5f       	subi	r31, 0xFC	; 252
    2a0e:	2e 96       	adiw	r28, 0x0e	; 14
    2a10:	ff af       	std	Y+63, r31	; 0x3f
    2a12:	ee af       	std	Y+62, r30	; 0x3e
    2a14:	2e 97       	sbiw	r28, 0x0e	; 14
    2a16:	d5 01       	movw	r26, r10
    2a18:	4d 90       	ld	r4, X+
    2a1a:	5d 90       	ld	r5, X+
    2a1c:	6d 90       	ld	r6, X+
    2a1e:	7c 90       	ld	r7, X
    2a20:	13 97       	sbiw	r26, 0x03	; 3
    2a22:	14 96       	adiw	r26, 0x04	; 4
    2a24:	9c 90       	ld	r9, X
    2a26:	99 20       	and	r9, r9
    2a28:	d1 f0       	breq	.+52     	; 0x2a5e <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0xce>
    2a2a:	d3 01       	movw	r26, r6
    2a2c:	c2 01       	movw	r24, r4
    2a2e:	32 e1       	ldi	r19, 0x12	; 18
    2a30:	b6 95       	lsr	r27
    2a32:	a7 95       	ror	r26
    2a34:	97 95       	ror	r25
    2a36:	87 95       	ror	r24
    2a38:	3a 95       	dec	r19
    2a3a:	d1 f7       	brne	.-12     	; 0x2a30 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0xa0>
    2a3c:	97 70       	andi	r25, 0x07	; 7
    2a3e:	aa 27       	eor	r26, r26
    2a40:	bb 27       	eor	r27, r27
    2a42:	e3 e0       	ldi	r30, 0x03	; 3
    2a44:	6e 22       	and	r6, r30
    2a46:	77 24       	eor	r7, r7
    2a48:	4b e0       	ldi	r20, 0x0B	; 11
    2a4a:	44 0c       	add	r4, r4
    2a4c:	55 1c       	adc	r5, r5
    2a4e:	66 1c       	adc	r6, r6
    2a50:	77 1c       	adc	r7, r7
    2a52:	4a 95       	dec	r20
    2a54:	d1 f7       	brne	.-12     	; 0x2a4a <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0xba>
    2a56:	48 2a       	or	r4, r24
    2a58:	59 2a       	or	r5, r25
    2a5a:	6a 2a       	or	r6, r26
    2a5c:	7b 2a       	or	r7, r27
    2a5e:	d5 01       	movw	r26, r10
    2a60:	17 96       	adiw	r26, 0x07	; 7
    2a62:	2c 90       	ld	r2, X
    2a64:	82 2d       	mov	r24, r2
    2a66:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZL19lengthCodeForLengthh>
    2a6a:	6b 01       	movw	r12, r22
    2a6c:	7c 01       	movw	r14, r24
    2a6e:	99 20       	and	r9, r9
    2a70:	11 f0       	breq	.+4      	; 0x2a76 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0xe6>
    2a72:	68 94       	set
    2a74:	c4 f8       	bld	r12, 4
    2a76:	f5 01       	movw	r30, r10
    2a78:	85 81       	ldd	r24, Z+5	; 0x05
    2a7a:	82 30       	cpi	r24, 0x02	; 2
    2a7c:	61 f0       	breq	.+24     	; 0x2a96 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x106>
    2a7e:	83 30       	cpi	r24, 0x03	; 3
    2a80:	29 f0       	breq	.+10     	; 0x2a8c <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0xfc>
    2a82:	81 11       	cpse	r24, r1
    2a84:	0d c0       	rjmp	.+26     	; 0x2aa0 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x110>
    2a86:	68 94       	set
    2a88:	c5 f8       	bld	r12, 5
    2a8a:	0a c0       	rjmp	.+20     	; 0x2aa0 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x110>
    2a8c:	d8 01       	movw	r26, r16
    2a8e:	1a 96       	adiw	r26, 0x0a	; 10
    2a90:	8c 91       	ld	r24, X
    2a92:	81 11       	cpse	r24, r1
    2a94:	03 c0       	rjmp	.+6      	; 0x2a9c <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x10c>
    2a96:	68 94       	set
    2a98:	c7 f8       	bld	r12, 7
    2a9a:	02 c0       	rjmp	.+4      	; 0x2aa0 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x110>
    2a9c:	b0 ec       	ldi	r27, 0xC0	; 192
    2a9e:	cb 2a       	or	r12, r27
    2aa0:	31 2c       	mov	r3, r1
    2aa2:	e3 e0       	ldi	r30, 0x03	; 3
    2aa4:	2e 0e       	add	r2, r30
    2aa6:	31 1c       	adc	r3, r1
    2aa8:	35 94       	asr	r3
    2aaa:	27 94       	ror	r2
    2aac:	35 94       	asr	r3
    2aae:	27 94       	ror	r2
    2ab0:	c1 01       	movw	r24, r2
    2ab2:	03 2c       	mov	r0, r3
    2ab4:	00 0c       	add	r0, r0
    2ab6:	aa 0b       	sbc	r26, r26
    2ab8:	bb 0b       	sbc	r27, r27
    2aba:	62 96       	adiw	r28, 0x12	; 18
    2abc:	8c af       	std	Y+60, r24	; 0x3c
    2abe:	9d af       	std	Y+61, r25	; 0x3d
    2ac0:	ae af       	std	Y+62, r26	; 0x3e
    2ac2:	bf af       	std	Y+63, r27	; 0x3f
    2ac4:	62 97       	sbiw	r28, 0x12	; 18
    2ac6:	de 01       	movw	r26, r28
    2ac8:	11 96       	adiw	r26, 0x01	; 1
    2aca:	4d 01       	movw	r8, r26
    2acc:	8a e4       	ldi	r24, 0x4A	; 74
    2ace:	fd 01       	movw	r30, r26
    2ad0:	11 92       	st	Z+, r1
    2ad2:	8a 95       	dec	r24
    2ad4:	e9 f7       	brne	.-6      	; 0x2ad0 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x140>
    2ad6:	2e 96       	adiw	r28, 0x0e	; 14
    2ad8:	6e ad       	ldd	r22, Y+62	; 0x3e
    2ada:	7f ad       	ldd	r23, Y+63	; 0x3f
    2adc:	2e 97       	sbiw	r28, 0x0e	; 14
    2ade:	7f 70       	andi	r23, 0x0F	; 15
    2ae0:	70 62       	ori	r23, 0x20	; 32
    2ae2:	79 83       	std	Y+1, r23	; 0x01
    2ae4:	6a 83       	std	Y+2, r22	; 0x02
    2ae6:	22 e0       	ldi	r18, 0x02	; 2
    2ae8:	ad 01       	movw	r20, r26
    2aea:	c3 01       	movw	r24, r6
    2aec:	b2 01       	movw	r22, r4
    2aee:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZL23enterU32InBufferAtIndexmPhh>
    2af2:	26 e0       	ldi	r18, 0x06	; 6
    2af4:	a4 01       	movw	r20, r8
    2af6:	c7 01       	movw	r24, r14
    2af8:	b6 01       	movw	r22, r12
    2afa:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZL23enterU32InBufferAtIndexmPhh>
    2afe:	f8 e0       	ldi	r31, 0x08	; 8
    2b00:	af 0e       	add	r10, r31
    2b02:	b1 1c       	adc	r11, r1
    2b04:	2a e0       	ldi	r18, 0x0A	; 10
    2b06:	f2 2e       	mov	r15, r18
    2b08:	41 2c       	mov	r4, r1
    2b0a:	51 2c       	mov	r5, r1
    2b0c:	32 01       	movw	r6, r4
    2b0e:	62 96       	adiw	r28, 0x12	; 18
    2b10:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b12:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b14:	ae ad       	ldd	r26, Y+62	; 0x3e
    2b16:	bf ad       	ldd	r27, Y+63	; 0x3f
    2b18:	62 97       	sbiw	r28, 0x12	; 18
    2b1a:	48 16       	cp	r4, r24
    2b1c:	59 06       	cpc	r5, r25
    2b1e:	6a 06       	cpc	r6, r26
    2b20:	7b 06       	cpc	r7, r27
    2b22:	90 f4       	brcc	.+36     	; 0x2b48 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x1b8>
    2b24:	d5 01       	movw	r26, r10
    2b26:	6d 91       	ld	r22, X+
    2b28:	7d 91       	ld	r23, X+
    2b2a:	8d 91       	ld	r24, X+
    2b2c:	9d 91       	ld	r25, X+
    2b2e:	5d 01       	movw	r10, r26
    2b30:	2f 2d       	mov	r18, r15
    2b32:	a4 01       	movw	r20, r8
    2b34:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZL23enterU32InBufferAtIndexmPhh>
    2b38:	bf ef       	ldi	r27, 0xFF	; 255
    2b3a:	4b 1a       	sub	r4, r27
    2b3c:	5b 0a       	sbc	r5, r27
    2b3e:	6b 0a       	sbc	r6, r27
    2b40:	7b 0a       	sbc	r7, r27
    2b42:	e4 e0       	ldi	r30, 0x04	; 4
    2b44:	fe 0e       	add	r15, r30
    2b46:	e3 cf       	rjmp	.-58     	; 0x2b0e <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage+0x17e>
    2b48:	c8 01       	movw	r24, r16
    2b4a:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN10ACAN2517FD8assertCSEv>
    2b4e:	b1 01       	movw	r22, r2
    2b50:	66 0f       	add	r22, r22
    2b52:	77 1f       	adc	r23, r23
    2b54:	66 0f       	add	r22, r22
    2b56:	77 1f       	adc	r23, r23
    2b58:	66 5f       	subi	r22, 0xF6	; 246
    2b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5c:	c4 01       	movw	r24, r8
    2b5e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN8SPIClass8transferEPvj.part.6>
    2b62:	c8 01       	movw	r24, r16
    2b64:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN10ACAN2517FD10deassertCSEv>
    2b68:	43 e0       	ldi	r20, 0x03	; 3
    2b6a:	61 e5       	ldi	r22, 0x51	; 81
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	c8 01       	movw	r24, r16
    2b70:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2b74:	2c 96       	adiw	r28, 0x0c	; 12
    2b76:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b78:	2c 97       	sbiw	r28, 0x0c	; 12
    2b7a:	cf 5a       	subi	r28, 0xAF	; 175
    2b7c:	df 4f       	sbci	r29, 0xFF	; 255
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	df 91       	pop	r29
    2b8a:	cf 91       	pop	r28
    2b8c:	1f 91       	pop	r17
    2b8e:	0f 91       	pop	r16
    2b90:	ff 90       	pop	r15
    2b92:	ef 90       	pop	r14
    2b94:	df 90       	pop	r13
    2b96:	cf 90       	pop	r12
    2b98:	bf 90       	pop	r11
    2b9a:	af 90       	pop	r10
    2b9c:	9f 90       	pop	r9
    2b9e:	8f 90       	pop	r8
    2ba0:	7f 90       	pop	r7
    2ba2:	6f 90       	pop	r6
    2ba4:	5f 90       	pop	r5
    2ba6:	4f 90       	pop	r4
    2ba8:	3f 90       	pop	r3
    2baa:	2f 90       	pop	r2
    2bac:	08 95       	ret

00002bae <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage>:
    2bae:	0f 93       	push	r16
    2bb0:	1f 93       	push	r17
    2bb2:	cf 93       	push	r28
    2bb4:	df 93       	push	r29
    2bb6:	eb 01       	movw	r28, r22
    2bb8:	2f 81       	ldd	r18, Y+7	; 0x07
    2bba:	3d 81       	ldd	r19, Y+5	; 0x05
    2bbc:	32 30       	cpi	r19, 0x02	; 2
    2bbe:	18 f4       	brcc	.+6      	; 0x2bc6 <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x18>
    2bc0:	29 30       	cpi	r18, 0x09	; 9
    2bc2:	c8 f5       	brcc	.+114    	; 0x2c36 <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x88>
    2bc4:	10 c0       	rjmp	.+32     	; 0x2be6 <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x38>
    2bc6:	29 30       	cpi	r18, 0x09	; 9
    2bc8:	70 f0       	brcs	.+28     	; 0x2be6 <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x38>
    2bca:	2c 30       	cpi	r18, 0x0C	; 12
    2bcc:	61 f0       	breq	.+24     	; 0x2be6 <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x38>
    2bce:	32 2f       	mov	r19, r18
    2bd0:	3b 7f       	andi	r19, 0xFB	; 251
    2bd2:	30 31       	cpi	r19, 0x10	; 16
    2bd4:	41 f0       	breq	.+16     	; 0x2be6 <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x38>
    2bd6:	28 31       	cpi	r18, 0x18	; 24
    2bd8:	31 f0       	breq	.+12     	; 0x2be6 <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x38>
    2bda:	32 2f       	mov	r19, r18
    2bdc:	3f 7e       	andi	r19, 0xEF	; 239
    2bde:	30 32       	cpi	r19, 0x20	; 32
    2be0:	11 f0       	breq	.+4      	; 0x2be6 <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x38>
    2be2:	20 34       	cpi	r18, 0x40	; 64
    2be4:	41 f5       	brne	.+80     	; 0x2c36 <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x88>
    2be6:	8c 01       	movw	r16, r24
    2be8:	fc 01       	movw	r30, r24
    2bea:	82 81       	ldd	r24, Z+2	; 0x02
    2bec:	93 81       	ldd	r25, Z+3	; 0x03
    2bee:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN8SPIClass16beginTransactionE11SPISettings>
    2bf2:	f8 94       	cli
    2bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf6:	81 11       	cpse	r24, r1
    2bf8:	0a c0       	rjmp	.+20     	; 0x2c0e <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x60>
    2bfa:	9f 81       	ldd	r25, Y+7	; 0x07
    2bfc:	f8 01       	movw	r30, r16
    2bfe:	83 85       	ldd	r24, Z+11	; 0x0b
    2c00:	89 17       	cp	r24, r25
    2c02:	a0 f0       	brcs	.+40     	; 0x2c2c <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x7e>
    2c04:	be 01       	movw	r22, r28
    2c06:	c8 01       	movw	r24, r16
    2c08:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN10ACAN2517FD21enterInTransmitBufferERK12CANFDMessage>
    2c0c:	0b c0       	rjmp	.+22     	; 0x2c24 <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x76>
    2c0e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c10:	59 f4       	brne	.+22     	; 0x2c28 <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x7a>
    2c12:	9f 81       	ldd	r25, Y+7	; 0x07
    2c14:	f8 01       	movw	r30, r16
    2c16:	84 85       	ldd	r24, Z+12	; 0x0c
    2c18:	89 17       	cp	r24, r25
    2c1a:	40 f0       	brcs	.+16     	; 0x2c2c <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x7e>
    2c1c:	be 01       	movw	r22, r28
    2c1e:	c8 01       	movw	r24, r16
    2c20:	0e 94 c8 14 	call	0x2990	; 0x2990 <_ZN10ACAN2517FD10sendViaTXQERK12CANFDMessage>
    2c24:	c8 2f       	mov	r28, r24
    2c26:	03 c0       	rjmp	.+6      	; 0x2c2e <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x80>
    2c28:	c1 e0       	ldi	r28, 0x01	; 1
    2c2a:	01 c0       	rjmp	.+2      	; 0x2c2e <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x80>
    2c2c:	c0 e0       	ldi	r28, 0x00	; 0
    2c2e:	78 94       	sei
    2c30:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN8SPIClass14endTransactionEv>
    2c34:	01 c0       	rjmp	.+2      	; 0x2c38 <_ZN10ACAN2517FD9tryToSendERK12CANFDMessage+0x8a>
    2c36:	c0 e0       	ldi	r28, 0x00	; 0
    2c38:	8c 2f       	mov	r24, r28
    2c3a:	df 91       	pop	r29
    2c3c:	cf 91       	pop	r28
    2c3e:	1f 91       	pop	r17
    2c40:	0f 91       	pop	r16
    2c42:	08 95       	ret

00002c44 <_ZN10ACAN2517FD14writeRegister8Ejh>:
    2c44:	ff 92       	push	r15
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	ec 01       	movw	r28, r24
    2c50:	8b 01       	movw	r16, r22
    2c52:	f4 2e       	mov	r15, r20
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	9b 81       	ldd	r25, Y+3	; 0x03
    2c58:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN8SPIClass16beginTransactionE11SPISettings>
    2c5c:	f8 94       	cli
    2c5e:	4f 2d       	mov	r20, r15
    2c60:	b8 01       	movw	r22, r16
    2c62:	ce 01       	movw	r24, r28
    2c64:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN10ACAN2517FD36writeRegister8Assume_SPI_transactionEjh>
    2c68:	78 94       	sei
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	ff 90       	pop	r15
    2c74:	0c 94 45 10 	jmp	0x208a	; 0x208a <_ZN8SPIClass14endTransactionEv>

00002c78 <_ZN10ACAN2517FD13readRegister8Ej>:
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
    2c80:	ec 01       	movw	r28, r24
    2c82:	8b 01       	movw	r16, r22
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	9b 81       	ldd	r25, Y+3	; 0x03
    2c88:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN8SPIClass16beginTransactionE11SPISettings>
    2c8c:	f8 94       	cli
    2c8e:	b8 01       	movw	r22, r16
    2c90:	ce 01       	movw	r24, r28
    2c92:	0e 94 68 14 	call	0x28d0	; 0x28d0 <_ZN10ACAN2517FD35readRegister8Assume_SPI_transactionEj>
    2c96:	c8 2f       	mov	r28, r24
    2c98:	78 94       	sei
    2c9a:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN8SPIClass14endTransactionEv>
    2c9e:	8c 2f       	mov	r24, r28
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	08 95       	ret

00002caa <_ZN10ACAN2517FD15writeRegister32Ejm>:
    2caa:	cf 92       	push	r12
    2cac:	df 92       	push	r13
    2cae:	ef 92       	push	r14
    2cb0:	ff 92       	push	r15
    2cb2:	0f 93       	push	r16
    2cb4:	1f 93       	push	r17
    2cb6:	cf 93       	push	r28
    2cb8:	df 93       	push	r29
    2cba:	ec 01       	movw	r28, r24
    2cbc:	8b 01       	movw	r16, r22
    2cbe:	69 01       	movw	r12, r18
    2cc0:	7a 01       	movw	r14, r20
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc6:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN8SPIClass16beginTransactionE11SPISettings>
    2cca:	f8 94       	cli
    2ccc:	a7 01       	movw	r20, r14
    2cce:	96 01       	movw	r18, r12
    2cd0:	b8 01       	movw	r22, r16
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	0e 94 e5 10 	call	0x21ca	; 0x21ca <_ZN10ACAN2517FD37writeRegister32Assume_SPI_transactionEjm>
    2cd8:	78 94       	sei
    2cda:	df 91       	pop	r29
    2cdc:	cf 91       	pop	r28
    2cde:	1f 91       	pop	r17
    2ce0:	0f 91       	pop	r16
    2ce2:	ff 90       	pop	r15
    2ce4:	ef 90       	pop	r14
    2ce6:	df 90       	pop	r13
    2ce8:	cf 90       	pop	r12
    2cea:	0c 94 45 10 	jmp	0x208a	; 0x208a <_ZN8SPIClass14endTransactionEv>

00002cee <_ZN10ACAN2517FD14readRegister32Ej>:
    2cee:	cf 92       	push	r12
    2cf0:	df 92       	push	r13
    2cf2:	ef 92       	push	r14
    2cf4:	ff 92       	push	r15
    2cf6:	cf 93       	push	r28
    2cf8:	df 93       	push	r29
    2cfa:	ec 01       	movw	r28, r24
    2cfc:	7b 01       	movw	r14, r22
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	9b 81       	ldd	r25, Y+3	; 0x03
    2d02:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN8SPIClass16beginTransactionE11SPISettings>
    2d06:	f8 94       	cli
    2d08:	b7 01       	movw	r22, r14
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN10ACAN2517FD36readRegister32Assume_SPI_transactionEj>
    2d10:	6b 01       	movw	r12, r22
    2d12:	7c 01       	movw	r14, r24
    2d14:	78 94       	sei
    2d16:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN8SPIClass14endTransactionEv>
    2d1a:	c7 01       	movw	r24, r14
    2d1c:	b6 01       	movw	r22, r12
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	ff 90       	pop	r15
    2d24:	ef 90       	pop	r14
    2d26:	df 90       	pop	r13
    2d28:	cf 90       	pop	r12
    2d2a:	08 95       	ret

00002d2c <_ZN10ACAN2517FD11reset2517FDEv>:

//----------------------------------------------------------------------------------------------------------------------

void ACAN2517FD::reset2517FD (void) {
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	ec 01       	movw	r28, r24
  mSPI.beginTransaction (mSPISettings) ; // Check RESET is performed with 1 MHz clock
    2d32:	8a 81       	ldd	r24, Y+2	; 0x02
    2d34:	9b 81       	ldd	r25, Y+3	; 0x03
    2d36:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN8SPIClass16beginTransactionE11SPISettings>
    #ifdef ARDUINO_ARCH_ESP32
      taskDISABLE_INTERRUPTS () ;
    #else
      noInterrupts () ;
    2d3a:	f8 94       	cli
    #endif
      assertCS () ;
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_ZN10ACAN2517FD8assertCSEv>
        mSPI.transfer16 (0x00) ; // Reset instruction: 0x0000
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	0e 94 28 10 	call	0x2050	; 0x2050 <_ZN8SPIClass10transfer16Ej>
      deassertCS () ;
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN10ACAN2517FD10deassertCSEv>
    #ifdef ARDUINO_ARCH_ESP32
      taskENABLE_INTERRUPTS () ;
    #else
      interrupts () ;
    2d50:	78 94       	sei
    #endif
  mSPI.endTransaction () ;
}
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    #ifdef ARDUINO_ARCH_ESP32
      taskENABLE_INTERRUPTS () ;
    #else
      interrupts () ;
    #endif
  mSPI.endTransaction () ;
    2d56:	0c 94 45 10 	jmp	0x208a	; 0x208a <_ZN8SPIClass14endTransactionEv>

00002d5a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters>:

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FD::begin (const ACAN2517FDSettings & inSettings,
                            void (* inInterruptServiceRoutine) (void),
                            const ACAN2517FDFilters & inFilters) {
    2d5a:	2f 92       	push	r2
    2d5c:	3f 92       	push	r3
    2d5e:	4f 92       	push	r4
    2d60:	5f 92       	push	r5
    2d62:	6f 92       	push	r6
    2d64:	7f 92       	push	r7
    2d66:	8f 92       	push	r8
    2d68:	9f 92       	push	r9
    2d6a:	af 92       	push	r10
    2d6c:	bf 92       	push	r11
    2d6e:	cf 92       	push	r12
    2d70:	df 92       	push	r13
    2d72:	ef 92       	push	r14
    2d74:	ff 92       	push	r15
    2d76:	0f 93       	push	r16
    2d78:	1f 93       	push	r17
    2d7a:	cf 93       	push	r28
    2d7c:	df 93       	push	r29
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x26>
    2d80:	1f 92       	push	r1
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	9b 83       	std	Y+3, r25	; 0x03
    2d88:	8a 83       	std	Y+2, r24	; 0x02
    2d8a:	8b 01       	movw	r16, r22
    2d8c:	1a 01       	movw	r2, r20
    2d8e:	69 01       	movw	r12, r18
  uint32_t errorCode = 0 ; // Means no error
//----------------------------------- If ok, check if settings are correct
  if (!inSettings.mArbitrationBitRateClosedToDesiredRate) {
    2d90:	fb 01       	movw	r30, r22
    2d92:	83 89       	ldd	r24, Z+19	; 0x13
    2d94:	81 11       	cpse	r24, r1
    2d96:	06 c0       	rjmp	.+12     	; 0x2da4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x4a>
    errorCode |= kTooFarFromDesiredBitRate ;
    2d98:	44 e0       	ldi	r20, 0x04	; 4
    2d9a:	84 2e       	mov	r8, r20
    2d9c:	91 2c       	mov	r9, r1
    2d9e:	a1 2c       	mov	r10, r1
    2da0:	b1 2c       	mov	r11, r1
    2da2:	03 c0       	rjmp	.+6      	; 0x2daa <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x50>
//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FD::begin (const ACAN2517FDSettings & inSettings,
                            void (* inInterruptServiceRoutine) (void),
                            const ACAN2517FDFilters & inFilters) {
  uint32_t errorCode = 0 ; // Means no error
    2da4:	81 2c       	mov	r8, r1
    2da6:	91 2c       	mov	r9, r1
    2da8:	54 01       	movw	r10, r8
//----------------------------------- If ok, check if settings are correct
  if (!inSettings.mArbitrationBitRateClosedToDesiredRate) {
    errorCode |= kTooFarFromDesiredBitRate ;
  }
  if (inSettings.CANBitSettingConsistency () != 0) {
    2daa:	c8 01       	movw	r24, r16
    2dac:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv>
    2db0:	67 2b       	or	r22, r23
    2db2:	68 2b       	or	r22, r24
    2db4:	69 2b       	or	r22, r25
    2db6:	11 f0       	breq	.+4      	; 0x2dbc <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x62>
    errorCode |= kInconsistentBitRateSettings ;
    2db8:	68 94       	set
    2dba:	83 f8       	bld	r8, 3
  }
//----------------------------------- Check mINT has interrupt capability
  const int8_t itPin = digitalPinToInterrupt (mINT) ;
    2dbc:	ea 81       	ldd	r30, Y+2	; 0x02
    2dbe:	fb 81       	ldd	r31, Y+3	; 0x03
    2dc0:	87 81       	ldd	r24, Z+7	; 0x07
    2dc2:	82 30       	cpi	r24, 0x02	; 2
    2dc4:	29 f0       	breq	.+10     	; 0x2dd0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x76>
    2dc6:	83 30       	cpi	r24, 0x03	; 3
    2dc8:	29 f4       	brne	.+10     	; 0x2dd4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x7a>
    2dca:	f1 e0       	ldi	r31, 0x01	; 1
    2dcc:	f9 83       	std	Y+1, r31	; 0x01
    2dce:	74 c3       	rjmp	.+1768   	; 0x34b8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x75e>
    2dd0:	19 82       	std	Y+1, r1	; 0x01
    2dd2:	72 c3       	rjmp	.+1764   	; 0x34b8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x75e>
  if ((mINT != 255) && (itPin == NOT_AN_INTERRUPT)) {
    2dd4:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd6:	09 f0       	breq	.+2      	; 0x2dda <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x80>
    2dd8:	68 c3       	rjmp	.+1744   	; 0x34aa <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x750>
//----------------------------------- Check interrupt service routine is not null
  if ((mINT != 255) && (inInterruptServiceRoutine == NULL)) {
    errorCode |= kISRIsNull ;
  }
//----------------------------------- Check consistency between ISR and INT pin
  if ((mINT == 255) && (inInterruptServiceRoutine != NULL)) {
    2dda:	21 14       	cp	r2, r1
    2ddc:	31 04       	cpc	r3, r1
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x88>
    2de0:	61 c3       	rjmp	.+1730   	; 0x34a4 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x74a>
    errorCode |= kISRNotNullAndNoIntPin ;
    2de2:	68 94       	set
    2de4:	a3 f8       	bld	r10, 3
    2de6:	2f ef       	ldi	r18, 0xFF	; 255
    2de8:	29 83       	std	Y+1, r18	; 0x01
  }
//----------------------------------- Check TXQ size is <= 32
  if (inSettings.mControllerTXQSize > 32) {
    2dea:	f8 01       	movw	r30, r16
    2dec:	80 a1       	ldd	r24, Z+32	; 0x20
    2dee:	81 32       	cpi	r24, 0x21	; 33
    2df0:	10 f0       	brcs	.+4      	; 0x2df6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x9c>
    errorCode |= kControllerTXQSizeGreaterThan32 ;
    2df2:	68 94       	set
    2df4:	97 f8       	bld	r9, 7
  }
//----------------------------------- Check TXQ priority is <= 31
  if (inSettings.mControllerTXQBufferPriority > 31) {
    2df6:	f8 01       	movw	r30, r16
    2df8:	82 a1       	ldd	r24, Z+34	; 0x22
    2dfa:	80 32       	cpi	r24, 0x20	; 32
    2dfc:	10 f0       	brcs	.+4      	; 0x2e02 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xa8>
    errorCode |= kControllerTXQPriorityGreaterThan31 ;
    2dfe:	68 94       	set
    2e00:	95 f8       	bld	r9, 5
  }
//----------------------------------- Check controller receive FIFO size is 1 ... 32
  if (inSettings.mControllerReceiveFIFOSize == 0) {
    2e02:	f8 01       	movw	r30, r16
    2e04:	87 a1       	ldd	r24, Z+39	; 0x27
    2e06:	81 11       	cpse	r24, r1
    2e08:	03 c0       	rjmp	.+6      	; 0x2e10 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xb6>
    errorCode |= kControllerReceiveFIFOSizeIsZero ;
    2e0a:	68 94       	set
    2e0c:	90 f8       	bld	r9, 0
    2e0e:	04 c0       	rjmp	.+8      	; 0x2e18 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xbe>
  }else if (inSettings.mControllerReceiveFIFOSize > 32) {
    2e10:	81 32       	cpi	r24, 0x21	; 33
    2e12:	10 f0       	brcs	.+4      	; 0x2e18 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xbe>
    errorCode |= kControllerReceiveFIFOSizeGreaterThan32 ;
    2e14:	68 94       	set
    2e16:	91 f8       	bld	r9, 1
  }
//----------------------------------- Check controller transmit FIFO size is 1 ... 32
  if (inSettings.mControllerTransmitFIFOSize == 0) {
    2e18:	f8 01       	movw	r30, r16
    2e1a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e1c:	81 11       	cpse	r24, r1
    2e1e:	03 c0       	rjmp	.+6      	; 0x2e26 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xcc>
    errorCode |= kControllerTransmitFIFOSizeIsZero ;
    2e20:	68 94       	set
    2e22:	92 f8       	bld	r9, 2
    2e24:	04 c0       	rjmp	.+8      	; 0x2e2e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xd4>
  }else if (inSettings.mControllerTransmitFIFOSize > 32) {
    2e26:	81 32       	cpi	r24, 0x21	; 33
    2e28:	10 f0       	brcs	.+4      	; 0x2e2e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xd4>
    errorCode |= kControllerTransmitFIFOSizeGreaterThan32 ;
    2e2a:	68 94       	set
    2e2c:	93 f8       	bld	r9, 3
  }
//----------------------------------- Check Transmit FIFO priority is <= 31
  if (inSettings.mControllerTransmitFIFOPriority > 31) {
    2e2e:	f8 01       	movw	r30, r16
    2e30:	86 8d       	ldd	r24, Z+30	; 0x1e
    2e32:	80 32       	cpi	r24, 0x20	; 32
    2e34:	10 f0       	brcs	.+4      	; 0x2e3a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xe0>
    errorCode |= kControllerTransmitFIFOPriorityGreaterThan31 ;
    2e36:	68 94       	set
    2e38:	96 f8       	bld	r9, 6
  }
//----------------------------------- Check MCP2517FD controller RAM usage is <= 2048 bytes
  if (inSettings.ramUsage () > 2048) {
    2e3a:	c8 01       	movw	r24, r16
    2e3c:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZNK18ACAN2517FDSettings8ramUsageEv>
    2e40:	61 30       	cpi	r22, 0x01	; 1
    2e42:	78 40       	sbci	r23, 0x08	; 8
    2e44:	81 05       	cpc	r24, r1
    2e46:	91 05       	cpc	r25, r1
    2e48:	10 f0       	brcs	.+4      	; 0x2e4e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0xf4>
    errorCode |= kControllerRamUsageGreaterThan2048 ;
    2e4a:	68 94       	set
    2e4c:	94 f8       	bld	r9, 4
  }
//----------------------------------- Check Filter definition
  if (inFilters.filterCount () > 32) {
    2e4e:	f6 01       	movw	r30, r12
    2e50:	80 81       	ld	r24, Z
    2e52:	81 32       	cpi	r24, 0x21	; 33
    2e54:	10 f0       	brcs	.+4      	; 0x2e5a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x100>
    errorCode |= kMoreThan32Filters ;
    2e56:	68 94       	set
    2e58:	87 f8       	bld	r8, 7
  }
  if (inFilters.filterStatus () != ACAN2517FDFilters::kFiltersOk) {
    2e5a:	f6 01       	movw	r30, r12
    2e5c:	85 81       	ldd	r24, Z+5	; 0x05
    2e5e:	88 23       	and	r24, r24
    2e60:	11 f0       	breq	.+4      	; 0x2e66 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x10c>
    errorCode |= kFilterDefinitionError ;
    2e62:	68 94       	set
    2e64:	86 f8       	bld	r8, 6
  }
//----------------------------------- Check TDCO value
  if ((inSettings.mTDCO > 63) || (inSettings.mTDCO < -64)) {
    2e66:	f8 01       	movw	r30, r16
    2e68:	84 89       	ldd	r24, Z+20	; 0x14
    2e6a:	80 5c       	subi	r24, 0xC0	; 192
    2e6c:	87 ff       	sbrs	r24, 7
    2e6e:	03 c0       	rjmp	.+6      	; 0x2e76 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x11c>
    errorCode |= kInvalidTDCO ;
    2e70:	68 94       	set
    2e72:	a4 f8       	bld	r10, 4
    2e74:	bc c0       	rjmp	.+376    	; 0x2fee <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
  }
//----------------------------------- INT, CS pins, reset MCP2517FD
  if (errorCode == 0) {
    2e76:	81 14       	cp	r8, r1
    2e78:	91 04       	cpc	r9, r1
    2e7a:	a1 04       	cpc	r10, r1
    2e7c:	b1 04       	cpc	r11, r1
    2e7e:	09 f0       	breq	.+2      	; 0x2e82 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x128>
    2e80:	b6 c0       	rjmp	.+364    	; 0x2fee <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    if (mINT != 255) { // 255 means interrupt is not used (thanks to Tyler Lewis)
    2e82:	ea 81       	ldd	r30, Y+2	; 0x02
    2e84:	fb 81       	ldd	r31, Y+3	; 0x03
    2e86:	87 81       	ldd	r24, Z+7	; 0x07
    2e88:	8f 3f       	cpi	r24, 0xFF	; 255
    2e8a:	19 f0       	breq	.+6      	; 0x2e92 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x138>
      pinMode (mINT, INPUT_PULLUP) ;
    2e8c:	62 e0       	ldi	r22, 0x02	; 2
    2e8e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <pinMode>
    }
    deassertCS () ;
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	9b 81       	ldd	r25, Y+3	; 0x03
    2e96:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN10ACAN2517FD10deassertCSEv>
    pinMode (mCS, OUTPUT) ;
    2e9a:	61 e0       	ldi	r22, 0x01	; 1
    2e9c:	ea 81       	ldd	r30, Y+2	; 0x02
    2e9e:	fb 81       	ldd	r31, Y+3	; 0x03
    2ea0:	86 81       	ldd	r24, Z+6	; 0x06
    2ea2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <pinMode>
  //----------------------------------- Set SPI clock to 1 MHz
    mSPISettings = SPISettings (1000UL * 1000, MSBFIRST, SPI_MODE0) ;
    2ea6:	81 e5       	ldi	r24, 0x51	; 81
    2ea8:	ea 81       	ldd	r30, Y+2	; 0x02
    2eaa:	fb 81       	ldd	r31, Y+3	; 0x03
    2eac:	82 83       	std	Z+2, r24	; 0x02
    2eae:	13 82       	std	Z+3, r1	; 0x03
  //----------------------------------- Request configuration mode
    bool wait = true ;
    const uint32_t deadline = millis () + 2 ; // Wait (2 ms max) until the configuration mode is reached
    2eb0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <millis>
    2eb4:	2b 01       	movw	r4, r22
    2eb6:	3c 01       	movw	r6, r24
    2eb8:	f2 e0       	ldi	r31, 0x02	; 2
    2eba:	4f 0e       	add	r4, r31
    2ebc:	51 1c       	adc	r5, r1
    2ebe:	61 1c       	adc	r6, r1
    2ec0:	71 1c       	adc	r7, r1
    while (wait) {
      writeRegister8 (CON_REGISTER + 3, 0x04 | (1 << 3)) ; // Request configuration mode, abort all transmissions
    2ec2:	4c e0       	ldi	r20, 0x0C	; 12
    2ec4:	63 e0       	ldi	r22, 0x03	; 3
    2ec6:	70 e0       	ldi	r23, 0x00	; 0
    2ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eca:	9b 81       	ldd	r25, Y+3	; 0x03
    2ecc:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
      const uint8_t actualMode = (readRegister8 (CON_REGISTER + 2) >> 5) & 0x07 ;
    2ed0:	62 e0       	ldi	r22, 0x02	; 2
    2ed2:	70 e0       	ldi	r23, 0x00	; 0
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed8:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <_ZN10ACAN2517FD13readRegister8Ej>
      wait = actualMode != 0x04 ;
      if (wait && (millis () >= deadline)) {
    2edc:	82 95       	swap	r24
    2ede:	86 95       	lsr	r24
    2ee0:	87 70       	andi	r24, 0x07	; 7
    2ee2:	84 30       	cpi	r24, 0x04	; 4
    2ee4:	59 f0       	breq	.+22     	; 0x2efc <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1a2>
    2ee6:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <millis>
    2eea:	64 15       	cp	r22, r4
    2eec:	75 05       	cpc	r23, r5
    2eee:	86 05       	cpc	r24, r6
    2ef0:	97 05       	cpc	r25, r7
    2ef2:	38 f3       	brcs	.-50     	; 0x2ec2 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x168>
        errorCode |= kRequestedConfigurationModeTimeOut ;
    2ef4:	81 2c       	mov	r8, r1
    2ef6:	91 2c       	mov	r9, r1
    2ef8:	54 01       	movw	r10, r8
    2efa:	83 94       	inc	r8
        wait = false ;
      }
    }
  //----------------------------------- Reset MCP2517FD (always use a 1 MHz clock)
    reset2517FD () ;
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	9b 81       	ldd	r25, Y+3	; 0x03
    2f00:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <_ZN10ACAN2517FD11reset2517FDEv>
    2f04:	90 e2       	ldi	r25, 0x20	; 32
    2f06:	e9 2e       	mov	r14, r25
    2f08:	f1 2c       	mov	r15, r1
    2f0a:	41 2c       	mov	r4, r1
    2f0c:	51 2c       	mov	r5, r1
    2f0e:	32 01       	movw	r6, r4
    2f10:	43 94       	inc	r4
  }
//----------------------------------- Check SPI connection is on (with a 1 MHz clock)
// We write and the read back MCP2517FD RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2f12:	81 14       	cp	r8, r1
    2f14:	91 04       	cpc	r9, r1
    2f16:	a1 04       	cpc	r10, r1
    2f18:	b1 04       	cpc	r11, r1
    2f1a:	09 f0       	breq	.+2      	; 0x2f1e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1c4>
    2f1c:	68 c0       	rjmp	.+208    	; 0x2fee <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    const uint16_t RAM_WORD_ADDRESS = 0x400 ;
    writeRegister32 (RAM_WORD_ADDRESS, i) ;
    2f1e:	a3 01       	movw	r20, r6
    2f20:	92 01       	movw	r18, r4
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	74 e0       	ldi	r23, 0x04	; 4
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2a:	0e 94 55 16 	call	0x2caa	; 0x2caa <_ZN10ACAN2517FD15writeRegister32Ejm>
    const uint32_t readBackValue = readRegister32 (RAM_WORD_ADDRESS) ;
    2f2e:	60 e0       	ldi	r22, 0x00	; 0
    2f30:	74 e0       	ldi	r23, 0x04	; 4
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	9b 81       	ldd	r25, Y+3	; 0x03
    2f36:	0e 94 77 16 	call	0x2cee	; 0x2cee <_ZN10ACAN2517FD14readRegister32Ej>
    if (readBackValue != i) {
    2f3a:	64 15       	cp	r22, r4
    2f3c:	75 05       	cpc	r23, r5
    2f3e:	86 05       	cpc	r24, r6
    2f40:	97 05       	cpc	r25, r7
    2f42:	29 f0       	breq	.+10     	; 0x2f4e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1f4>
      errorCode = kReadBackErrorWith1MHzSPIClock ;
    2f44:	82 e0       	ldi	r24, 0x02	; 2
    2f46:	88 2e       	mov	r8, r24
    2f48:	91 2c       	mov	r9, r1
    2f4a:	a1 2c       	mov	r10, r1
    2f4c:	b1 2c       	mov	r11, r1
  //----------------------------------- Reset MCP2517FD (always use a 1 MHz clock)
    reset2517FD () ;
  }
//----------------------------------- Check SPI connection is on (with a 1 MHz clock)
// We write and the read back MCP2517FD RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    2f4e:	44 0c       	add	r4, r4
    2f50:	55 1c       	adc	r5, r5
    2f52:	66 1c       	adc	r6, r6
    2f54:	77 1c       	adc	r7, r7
    2f56:	21 e0       	ldi	r18, 0x01	; 1
    2f58:	e2 1a       	sub	r14, r18
    2f5a:	f1 08       	sbc	r15, r1
    2f5c:	d1 f6       	brne	.-76     	; 0x2f12 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x1b8>
  }
//----------------------------------- Now, set internal clock with OSC register
//     Bit 0: (rw) 1 --> 10xPLL
//     Bit 4: (rw) 0 --> SCLK is divided by 1, 1 --> SCLK is divided by 2
//     Bits 5-6: Clock Output Divisor
  if (errorCode == 0) {
    2f5e:	81 14       	cp	r8, r1
    2f60:	91 04       	cpc	r9, r1
    2f62:	a1 04       	cpc	r10, r1
    2f64:	b1 04       	cpc	r11, r1
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x210>
    2f68:	42 c0       	rjmp	.+132    	; 0x2fee <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    2f6a:	f8 01       	movw	r30, r16
    2f6c:	80 81       	ld	r24, Z
    2f6e:	81 50       	subi	r24, 0x01	; 1
    2f70:	87 30       	cpi	r24, 0x07	; 7
    2f72:	50 f4       	brcc	.+20     	; 0x2f88 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x22e>
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	fc 01       	movw	r30, r24
    2f78:	e4 58       	subi	r30, 0x84	; 132
    2f7a:	fd 4f       	sbci	r31, 0xFD	; 253
    2f7c:	f0 80       	ld	r15, Z
    2f7e:	fc 01       	movw	r30, r24
    2f80:	eb 58       	subi	r30, 0x8B	; 139
    2f82:	fd 4f       	sbci	r31, 0xFD	; 253
    2f84:	40 81       	ld	r20, Z
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x232>
    2f88:	40 e0       	ldi	r20, 0x00	; 0
    2f8a:	f1 2c       	mov	r15, r1
      break ;
    case ACAN2517FDSettings::OSC_4MHz10xPLL :
      pll = 1 ; // Enable 10x PLL
      break ;
    }
    osc |= pll ;
    2f8c:	4f 29       	or	r20, r15
    if (inSettings.mCLKOPin != ACAN2517FDSettings::SOF) {
    2f8e:	f8 01       	movw	r30, r16
    2f90:	80 8d       	ldd	r24, Z+24	; 0x18
    2f92:	84 30       	cpi	r24, 0x04	; 4
    2f94:	29 f0       	breq	.+10     	; 0x2fa0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x246>
      osc |= ((uint8_t) inSettings.mCLKOPin) << 5 ;
    2f96:	f0 e2       	ldi	r31, 0x20	; 32
    2f98:	8f 9f       	mul	r24, r31
    2f9a:	c0 01       	movw	r24, r0
    2f9c:	11 24       	eor	r1, r1
    2f9e:	48 2b       	or	r20, r24
    }
    writeRegister8 (OSC_REGISTER, osc) ; // DS20005688B, page 16
    2fa0:	60 e0       	ldi	r22, 0x00	; 0
    2fa2:	7e e0       	ldi	r23, 0x0E	; 14
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //--- Wait for PLL is ready (wait max 2 ms)
    if (pll != 0) {
    2fac:	ff 20       	and	r15, r15
    2fae:	f9 f0       	breq	.+62     	; 0x2fee <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
      bool wait = true ;
      const uint32_t deadline = millis () + 2 ;
    2fb0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <millis>
    2fb4:	2b 01       	movw	r4, r22
    2fb6:	3c 01       	movw	r6, r24
    2fb8:	22 e0       	ldi	r18, 0x02	; 2
    2fba:	42 0e       	add	r4, r18
    2fbc:	51 1c       	adc	r5, r1
    2fbe:	61 1c       	adc	r6, r1
    2fc0:	71 1c       	adc	r7, r1
      while (wait) {
        wait = (readRegister8 (OSC_REGISTER + 1) & 0x1) == 0 ;  // DS20005688B, page 16
    2fc2:	61 e0       	ldi	r22, 0x01	; 1
    2fc4:	7e e0       	ldi	r23, 0x0E	; 14
    2fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fca:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <_ZN10ACAN2517FD13readRegister8Ej>
        if (wait && (millis () >= deadline)) {
    2fce:	98 2f       	mov	r25, r24
    2fd0:	91 70       	andi	r25, 0x01	; 1
    2fd2:	80 fd       	sbrc	r24, 0
    2fd4:	78 c2       	rjmp	.+1264   	; 0x34c6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x76c>
    2fd6:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <millis>
    2fda:	64 15       	cp	r22, r4
    2fdc:	75 05       	cpc	r23, r5
    2fde:	86 05       	cpc	r24, r6
    2fe0:	97 05       	cpc	r25, r7
    2fe2:	78 f3       	brcs	.-34     	; 0x2fc2 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x268>
          errorCode = kX10PLLNotReadyWithin1MS ;
    2fe4:	81 2c       	mov	r8, r1
    2fe6:	91 2c       	mov	r9, r1
    2fe8:	a2 e0       	ldi	r26, 0x02	; 2
    2fea:	aa 2e       	mov	r10, r26
    2fec:	b1 2c       	mov	r11, r1
        }
      }
    }
  }
//----------------------------------- Set full speed clock
  mSPISettings = SPISettings (inSettings.sysClock () / 2, MSBFIRST, SPI_MODE0) ;
    2fee:	f8 01       	movw	r30, r16
    2ff0:	41 80       	ldd	r4, Z+1	; 0x01
    2ff2:	52 80       	ldd	r5, Z+2	; 0x02
    2ff4:	63 80       	ldd	r6, Z+3	; 0x03
    2ff6:	74 80       	ldd	r7, Z+4	; 0x04
    2ff8:	76 94       	lsr	r7
    2ffa:	67 94       	ror	r6
    2ffc:	57 94       	ror	r5
    2ffe:	47 94       	ror	r4
    3000:	40 e0       	ldi	r20, 0x00	; 0
    3002:	52 e1       	ldi	r21, 0x12	; 18
    3004:	6a e7       	ldi	r22, 0x7A	; 122
    3006:	70 e0       	ldi	r23, 0x00	; 0
    3008:	90 e0       	ldi	r25, 0x00	; 0
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    300a:	44 16       	cp	r4, r20
    300c:	55 06       	cpc	r5, r21
    300e:	66 06       	cpc	r6, r22
    3010:	77 06       	cpc	r7, r23
    3012:	40 f4       	brcc	.+16     	; 0x3024 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2ca>
        clockSetting /= 2;
    3014:	76 95       	lsr	r23
    3016:	67 95       	ror	r22
    3018:	57 95       	ror	r21
    301a:	47 95       	ror	r20
        clockDiv++;
    301c:	9f 5f       	subi	r25, 0xFF	; 255
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    301e:	96 30       	cpi	r25, 0x06	; 6
    3020:	a1 f7       	brne	.-24     	; 0x300a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2b0>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    3022:	97 e0       	ldi	r25, 0x07	; 7

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	89 27       	eor	r24, r25
    3028:	98 2f       	mov	r25, r24
    302a:	90 6a       	ori	r25, 0xA0	; 160
    302c:	96 95       	lsr	r25
    302e:	ea 81       	ldd	r30, Y+2	; 0x02
    3030:	fb 81       	ldd	r31, Y+3	; 0x03
    3032:	92 83       	std	Z+2, r25	; 0x02
    3034:	81 70       	andi	r24, 0x01	; 1
    3036:	83 83       	std	Z+3, r24	; 0x03
    3038:	60 e2       	ldi	r22, 0x20	; 32
    303a:	e6 2e       	mov	r14, r22
    303c:	f1 2c       	mov	r15, r1
//----------------------------------- Checking SPI connection is on (with a full speed clock)
//    We write and read back 2517 RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    303e:	41 2c       	mov	r4, r1
    3040:	51 2c       	mov	r5, r1
    3042:	32 01       	movw	r6, r4
    3044:	43 94       	inc	r4
    3046:	81 14       	cp	r8, r1
    3048:	91 04       	cpc	r9, r1
    304a:	a1 04       	cpc	r10, r1
    304c:	b1 04       	cpc	r11, r1
    304e:	09 f0       	breq	.+2      	; 0x3052 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2f8>
    3050:	3e c2       	rjmp	.+1148   	; 0x34ce <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x774>
    writeRegister32 (0x400, i) ;
    3052:	a3 01       	movw	r20, r6
    3054:	92 01       	movw	r18, r4
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	74 e0       	ldi	r23, 0x04	; 4
    305a:	8a 81       	ldd	r24, Y+2	; 0x02
    305c:	9b 81       	ldd	r25, Y+3	; 0x03
    305e:	0e 94 55 16 	call	0x2caa	; 0x2caa <_ZN10ACAN2517FD15writeRegister32Ejm>
    const uint32_t readBackValue = readRegister32 (0x400) ;
    3062:	60 e0       	ldi	r22, 0x00	; 0
    3064:	74 e0       	ldi	r23, 0x04	; 4
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	9b 81       	ldd	r25, Y+3	; 0x03
    306a:	0e 94 77 16 	call	0x2cee	; 0x2cee <_ZN10ACAN2517FD14readRegister32Ej>
    if (readBackValue != i) {
    306e:	64 15       	cp	r22, r4
    3070:	75 05       	cpc	r23, r5
    3072:	86 05       	cpc	r24, r6
    3074:	97 05       	cpc	r25, r7
    3076:	29 f0       	breq	.+10     	; 0x3082 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x328>
      errorCode = kReadBackErrorWithFullSpeedSPIClock ;
    3078:	81 2c       	mov	r8, r1
    307a:	91 2c       	mov	r9, r1
    307c:	54 e0       	ldi	r21, 0x04	; 4
    307e:	a5 2e       	mov	r10, r21
    3080:	b1 2c       	mov	r11, r1
  }
//----------------------------------- Set full speed clock
  mSPISettings = SPISettings (inSettings.sysClock () / 2, MSBFIRST, SPI_MODE0) ;
//----------------------------------- Checking SPI connection is on (with a full speed clock)
//    We write and read back 2517 RAM at address 0x400
  for (uint32_t i=1 ; (i != 0) && (errorCode == 0) ; i <<= 1) {
    3082:	44 0c       	add	r4, r4
    3084:	55 1c       	adc	r5, r5
    3086:	66 1c       	adc	r6, r6
    3088:	77 1c       	adc	r7, r7
    308a:	f1 e0       	ldi	r31, 0x01	; 1
    308c:	ef 1a       	sub	r14, r31
    308e:	f1 08       	sbc	r15, r1
    3090:	d1 f6       	brne	.-76     	; 0x3046 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x2ec>
    if (readBackValue != i) {
      errorCode = kReadBackErrorWithFullSpeedSPIClock ;
    }
  }
//----------------------------------- Install interrupt, configure external interrupt
  if (errorCode == 0) {
    3092:	81 14       	cp	r8, r1
    3094:	91 04       	cpc	r9, r1
    3096:	a1 04       	cpc	r10, r1
    3098:	b1 04       	cpc	r11, r1
    309a:	09 f0       	breq	.+2      	; 0x309e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x344>
    309c:	18 c2       	rjmp	.+1072   	; 0x34ce <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x774>
  //----------------------------------- Configure transmit and receive buffers
    mDriverTransmitBuffer.initWithSize (inSettings.mDriverTransmitFIFOSize) ;
    309e:	f8 01       	movw	r30, r16
    30a0:	42 8d       	ldd	r20, Z+26	; 0x1a
    30a2:	53 8d       	ldd	r21, Z+27	; 0x1b
    30a4:	60 e0       	ldi	r22, 0x00	; 0
    30a6:	70 e0       	ldi	r23, 0x00	; 0
    30a8:	8a 81       	ldd	r24, Y+2	; 0x02
    30aa:	9b 81       	ldd	r25, Y+3	; 0x03
    30ac:	86 96       	adiw	r24, 0x26	; 38
    30ae:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_ZN12ACANFDBuffer12initWithSizeEm>
    mDriverReceiveBuffer.initWithSize (inSettings.mDriverReceiveFIFOSize) ;
    30b2:	f8 01       	movw	r30, r16
    30b4:	44 a1       	ldd	r20, Z+36	; 0x24
    30b6:	55 a1       	ldd	r21, Z+37	; 0x25
    30b8:	60 e0       	ldi	r22, 0x00	; 0
    30ba:	70 e0       	ldi	r23, 0x00	; 0
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	9b 81       	ldd	r25, Y+3	; 0x03
    30c0:	40 96       	adiw	r24, 0x10	; 16
    30c2:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_ZN12ACANFDBuffer12initWithSizeEm>
  //----------------------------------- Reset RAM
    for (uint16_t address = 0x400 ; address < 0xC00 ; address += 4) {
    30c6:	e1 2c       	mov	r14, r1
    30c8:	34 e0       	ldi	r19, 0x04	; 4
    30ca:	f3 2e       	mov	r15, r19
      writeRegister32 (address, 0) ;
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	a9 01       	movw	r20, r18
    30d2:	b7 01       	movw	r22, r14
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	9b 81       	ldd	r25, Y+3	; 0x03
    30d8:	0e 94 55 16 	call	0x2caa	; 0x2caa <_ZN10ACAN2517FD15writeRegister32Ejm>
  if (errorCode == 0) {
  //----------------------------------- Configure transmit and receive buffers
    mDriverTransmitBuffer.initWithSize (inSettings.mDriverTransmitFIFOSize) ;
    mDriverReceiveBuffer.initWithSize (inSettings.mDriverReceiveFIFOSize) ;
  //----------------------------------- Reset RAM
    for (uint16_t address = 0x400 ; address < 0xC00 ; address += 4) {
    30dc:	f4 e0       	ldi	r31, 0x04	; 4
    30de:	ef 0e       	add	r14, r31
    30e0:	f1 1c       	adc	r15, r1
    30e2:	e1 14       	cp	r14, r1
    30e4:	2c e0       	ldi	r18, 0x0C	; 12
    30e6:	f2 06       	cpc	r15, r18
    30e8:	89 f7       	brne	.-30     	; 0x30cc <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x372>
      writeRegister32 (address, 0) ;
    }
  //----------------------------------- Configure CLKO pin
    uint8_t data8 = 0x03 ; // Respect PM1-PM0 default values
    if (inSettings.mCLKOPin == ACAN2517FDSettings::SOF) {
    30ea:	f8 01       	movw	r30, r16
    30ec:	80 8d       	ldd	r24, Z+24	; 0x18
    30ee:	84 30       	cpi	r24, 0x04	; 4
    30f0:	11 f4       	brne	.+4      	; 0x30f6 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x39c>
      data8 |= 1 << 5 ; // SOF
    30f2:	43 e2       	ldi	r20, 0x23	; 35
    30f4:	01 c0       	rjmp	.+2      	; 0x30f8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x39e>
  //----------------------------------- Reset RAM
    for (uint16_t address = 0x400 ; address < 0xC00 ; address += 4) {
      writeRegister32 (address, 0) ;
    }
  //----------------------------------- Configure CLKO pin
    uint8_t data8 = 0x03 ; // Respect PM1-PM0 default values
    30f6:	43 e0       	ldi	r20, 0x03	; 3
    if (inSettings.mCLKOPin == ACAN2517FDSettings::SOF) {
      data8 |= 1 << 5 ; // SOF
    }
    if (inSettings.mTXCANIsOpenDrain) {
    30f8:	f8 01       	movw	r30, r16
    30fa:	85 89       	ldd	r24, Z+21	; 0x15
    30fc:	81 11       	cpse	r24, r1
      data8 |= 1 << 4 ; // TXCANOD
    30fe:	40 61       	ori	r20, 0x10	; 16
    }
    if (inSettings.mINTIsOpenDrain) {
    3100:	f8 01       	movw	r30, r16
    3102:	86 89       	ldd	r24, Z+22	; 0x16
    3104:	81 11       	cpse	r24, r1
      data8 |= 1 << 6 ; // INTOD
    3106:	40 64       	ori	r20, 0x40	; 64
    }
    writeRegister8 (IOCON_REGISTER + 3, data8) ; // DS20005688B, page 24
    3108:	67 e0       	ldi	r22, 0x07	; 7
    310a:	7e e0       	ldi	r23, 0x0E	; 14
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	9b 81       	ldd	r25, Y+3	; 0x03
    3110:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Configure ISO CRC Enable bit
    data8 = 1 << 6 ; // PXEDIS <-- 1
    if (inSettings.mISOCRCEnabled) {
    3114:	f8 01       	movw	r30, r16
    3116:	87 89       	ldd	r24, Z+23	; 0x17
    3118:	88 23       	and	r24, r24
    311a:	11 f0       	breq	.+4      	; 0x3120 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x3c6>
      data8 |= 1 << 5 ; //  Enable ISO CRC in CAN FD Frames bit
    311c:	40 e6       	ldi	r20, 0x60	; 96
    311e:	01 c0       	rjmp	.+2      	; 0x3122 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x3c8>
    if (inSettings.mINTIsOpenDrain) {
      data8 |= 1 << 6 ; // INTOD
    }
    writeRegister8 (IOCON_REGISTER + 3, data8) ; // DS20005688B, page 24
  //----------------------------------- Configure ISO CRC Enable bit
    data8 = 1 << 6 ; // PXEDIS <-- 1
    3120:	40 e4       	ldi	r20, 0x40	; 64
    if (inSettings.mISOCRCEnabled) {
      data8 |= 1 << 5 ; //  Enable ISO CRC in CAN FD Frames bit
    }
    writeRegister8 (CON_REGISTER, data8) ; // DS20005688B, page 24
    3122:	60 e0       	ldi	r22, 0x00	; 0
    3124:	70 e0       	ldi	r23, 0x00	; 0
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	9b 81       	ldd	r25, Y+3	; 0x03
    312a:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Configure DTC (DS20005688B, page 29)
    uint32_t data32 = 1UL << 25 ; // Enable Edge Filtering during Bus Integration state bit (added in 1.1.4)
    data32 |= 1UL << 17 ; // Auto TDC
    const uint32_t TCDO = uint32_t (inSettings.mTDCO) & 0x7F ;
    data32 |= TCDO << 8 ;
    writeRegister32 (TDC_REGISTER, data32) ;
    312e:	f8 01       	movw	r30, r16
    3130:	24 89       	ldd	r18, Z+20	; 0x14
    3132:	2f 77       	andi	r18, 0x7F	; 127
    3134:	82 2f       	mov	r24, r18
    3136:	22 0f       	add	r18, r18
    3138:	99 0b       	sbc	r25, r25
    313a:	aa 0b       	sbc	r26, r26
    313c:	bb 0b       	sbc	r27, r27
    313e:	ba 2f       	mov	r27, r26
    3140:	a9 2f       	mov	r26, r25
    3142:	98 2f       	mov	r25, r24
    3144:	88 27       	eor	r24, r24
    3146:	9c 01       	movw	r18, r24
    3148:	ad 01       	movw	r20, r26
    314a:	42 60       	ori	r20, 0x02	; 2
    314c:	52 60       	ori	r21, 0x02	; 2
    314e:	6c e0       	ldi	r22, 0x0C	; 12
    3150:	70 e0       	ldi	r23, 0x00	; 0
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	9b 81       	ldd	r25, Y+3	; 0x03
    3156:	0e 94 55 16 	call	0x2caa	; 0x2caa <_ZN10ACAN2517FD15writeRegister32Ejm>
  //----------------------------------- Configure TXQ
    data8 = inSettings.mControllerTXQBufferRetransmissionAttempts ;
    315a:	f8 01       	movw	r30, r16
    315c:	43 a1       	ldd	r20, Z+35	; 0x23
    data8 <<= 5 ;
    315e:	42 95       	swap	r20
    3160:	44 0f       	add	r20, r20
    3162:	40 7e       	andi	r20, 0xE0	; 224
    data8 |= inSettings.mControllerTXQBufferPriority ;
    writeRegister8 (TXQCON_REGISTER + 2, data8) ; // DS20005688B, page 48
    3164:	82 a1       	ldd	r24, Z+34	; 0x22
    3166:	48 2b       	or	r20, r24
    3168:	62 e5       	ldi	r22, 0x52	; 82
    316a:	70 e0       	ldi	r23, 0x00	; 0
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	9b 81       	ldd	r25, Y+3	; 0x03
    3170:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
  // Bit 5-7: Payload Size bits
  // Bit 4-0: TXQ size
    mUsesTXQ = inSettings.mControllerTXQSize > 0 ;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	f8 01       	movw	r30, r16
    3178:	90 a1       	ldd	r25, Z+32	; 0x20
    317a:	91 11       	cpse	r25, r1
    317c:	01 c0       	rjmp	.+2      	; 0x3180 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x426>
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	ea 81       	ldd	r30, Y+2	; 0x02
    3182:	fb 81       	ldd	r31, Y+3	; 0x03
    3184:	80 87       	std	Z+8, r24	; 0x08
    data8 = inSettings.mControllerTXQSize - 1 ;
    data8 |= inSettings.mControllerTXQBufferPayload << 5 ; // Payload
    3186:	f8 01       	movw	r30, r16
    3188:	81 a1       	ldd	r24, Z+33	; 0x21
    318a:	f0 e2       	ldi	r31, 0x20	; 32
    318c:	8f 9f       	mul	r24, r31
    318e:	c0 01       	movw	r24, r0
    3190:	11 24       	eor	r1, r1
    3192:	f8 01       	movw	r30, r16
    3194:	40 a1       	ldd	r20, Z+32	; 0x20
    3196:	41 50       	subi	r20, 0x01	; 1
    3198:	48 2b       	or	r20, r24
    writeRegister8 (TXQCON_REGISTER + 3, data8) ; // DS20005688B, page 48
    319a:	63 e5       	ldi	r22, 0x53	; 83
    319c:	70 e0       	ldi	r23, 0x00	; 0
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	9b 81       	ldd	r25, Y+3	; 0x03
    31a2:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
    mTXQBufferPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTXQBufferPayload) ;
    31a6:	f8 01       	movw	r30, r16
    31a8:	81 a1       	ldd	r24, Z+33	; 0x21
    31aa:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>
    31ae:	ea 81       	ldd	r30, Y+2	; 0x02
    31b0:	fb 81       	ldd	r31, Y+3	; 0x03
    31b2:	64 87       	std	Z+12, r22	; 0x0c
  //----------------------------------- Configure TXQ and TEF
  // Bit 4: Enable Transmit Queue bit ---> 1: Enable TXQ and reserves space in RAM
  // Bit 3: Store in Transmit Event FIFO bit ---> 0: Don’t save transmitted messages in TEF
  // Bit 0: RTXAT ---> 1: Enable CiFIFOCONm.TXAT to control retransmission attempts
    data8 = 0x01 ; // Enable RTXAT to limit retransmissions (Flole)
    data8 |= mUsesTXQ ? (1 << 4) : 0x00 ; // Bug fix in 1.1.4 (thanks to danielhenz)
    31b4:	80 85       	ldd	r24, Z+8	; 0x08
    31b6:	81 11       	cpse	r24, r1
    31b8:	02 c0       	rjmp	.+4      	; 0x31be <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x464>
    31ba:	40 e0       	ldi	r20, 0x00	; 0
    31bc:	01 c0       	rjmp	.+2      	; 0x31c0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x466>
    31be:	40 e1       	ldi	r20, 0x10	; 16
    writeRegister8 (CON_REGISTER + 2, data8) ; // DS20005688B, page 24
    31c0:	41 60       	ori	r20, 0x01	; 1
    31c2:	62 e0       	ldi	r22, 0x02	; 2
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	8a 81       	ldd	r24, Y+2	; 0x02
    31c8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ca:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Configure RX FIFO (FIFOCON, DS20005688B, page 52)
    data8 = inSettings.mControllerReceiveFIFOSize - 1 ; // Set receive FIFO size
    data8 |= inSettings.mControllerReceiveFIFOPayload << 5 ; // Payload
    31ce:	f8 01       	movw	r30, r16
    31d0:	86 a1       	ldd	r24, Z+38	; 0x26
    31d2:	f0 e2       	ldi	r31, 0x20	; 32
    31d4:	8f 9f       	mul	r24, r31
    31d6:	c0 01       	movw	r24, r0
    31d8:	11 24       	eor	r1, r1
    31da:	f8 01       	movw	r30, r16
    31dc:	47 a1       	ldd	r20, Z+39	; 0x27
    31de:	41 50       	subi	r20, 0x01	; 1
    31e0:	48 2b       	or	r20, r24
    writeRegister8 (FIFOCON_REGISTER (RECEIVE_FIFO_INDEX) + 3, data8) ;
    31e2:	6f e5       	ldi	r22, 0x5F	; 95
    31e4:	70 e0       	ldi	r23, 0x00	; 0
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ea:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8  = 1 << 0 ; // Interrupt Enabled for FIFO not Empty (TFNRFNIE)
    data8 |= 1 << 3 ; // Interrupt Enabled for FIFO Overflow (RXOVIE)
    writeRegister8 (FIFOCON_REGISTER (RECEIVE_FIFO_INDEX), data8) ;
    31ee:	49 e0       	ldi	r20, 0x09	; 9
    31f0:	6c e5       	ldi	r22, 0x5C	; 92
    31f2:	70 e0       	ldi	r23, 0x00	; 0
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	9b 81       	ldd	r25, Y+3	; 0x03
    31f8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
    mReceiveFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerReceiveFIFOPayload) ;
    31fc:	f8 01       	movw	r30, r16
    31fe:	86 a1       	ldd	r24, Z+38	; 0x26
    3200:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>
    3204:	ea 81       	ldd	r30, Y+2	; 0x02
    3206:	fb 81       	ldd	r31, Y+3	; 0x03
    3208:	65 87       	std	Z+13, r22	; 0x0d
  //----------------------------------- Configure TX FIFO (FIFOCON, DS20005688B, page 52)
    data8 = inSettings.mControllerTransmitFIFORetransmissionAttempts ;
    320a:	f8 01       	movw	r30, r16
    320c:	47 8d       	ldd	r20, Z+31	; 0x1f
    data8 <<= 5 ;
    320e:	42 95       	swap	r20
    3210:	44 0f       	add	r20, r20
    3212:	40 7e       	andi	r20, 0xE0	; 224
    data8 |= inSettings.mControllerTransmitFIFOPriority ;
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX) + 2, data8) ;
    3214:	86 8d       	ldd	r24, Z+30	; 0x1e
    3216:	48 2b       	or	r20, r24
    3218:	6a e6       	ldi	r22, 0x6A	; 106
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	8a 81       	ldd	r24, Y+2	; 0x02
    321e:	9b 81       	ldd	r25, Y+3	; 0x03
    3220:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8 = inSettings.mControllerTransmitFIFOSize - 1 ; // Set transmit FIFO size
    data8 |= inSettings.mControllerTransmitFIFOPayload << 5 ; // Payload
    3224:	f8 01       	movw	r30, r16
    3226:	85 8d       	ldd	r24, Z+29	; 0x1d
    3228:	f0 e2       	ldi	r31, 0x20	; 32
    322a:	8f 9f       	mul	r24, r31
    322c:	c0 01       	movw	r24, r0
    322e:	11 24       	eor	r1, r1
    3230:	f8 01       	movw	r30, r16
    3232:	44 8d       	ldd	r20, Z+28	; 0x1c
    3234:	41 50       	subi	r20, 0x01	; 1
    3236:	48 2b       	or	r20, r24
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX) + 3, data8) ;
    3238:	6b e6       	ldi	r22, 0x6B	; 107
    323a:	70 e0       	ldi	r23, 0x00	; 0
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	9b 81       	ldd	r25, Y+3	; 0x03
    3240:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8 = 1 << 7 ; // FIFO is a Tx FIFO
    data8 |= 1 << 4 ; // TXATIE ---> 1: Enable Transmit Attempts Exhausted Interrupt
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX), data8) ;
    3244:	40 e9       	ldi	r20, 0x90	; 144
    3246:	68 e6       	ldi	r22, 0x68	; 104
    3248:	70 e0       	ldi	r23, 0x00	; 0
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	9b 81       	ldd	r25, Y+3	; 0x03
    324e:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
    mTransmitFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTransmitFIFOPayload) ;
    3252:	f8 01       	movw	r30, r16
    3254:	85 8d       	ldd	r24, Z+29	; 0x1d
    3256:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>
    325a:	ea 81       	ldd	r30, Y+2	; 0x02
    325c:	fb 81       	ldd	r31, Y+3	; 0x03
    325e:	63 87       	std	Z+11, r22	; 0x0b
  //----------------------------------- Configure receive filters
    uint8_t filterIndex = 0 ;
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    3260:	f6 01       	movw	r30, r12
    3262:	e1 80       	ldd	r14, Z+1	; 0x01
    3264:	f2 80       	ldd	r15, Z+2	; 0x02
    3266:	80 81       	ld	r24, Z
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	88 0f       	add	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	0e 94 16 0b 	call	0x162c	; 0x162c <_Znaj>
    3272:	ea 81       	ldd	r30, Y+2	; 0x02
    3274:	fb 81       	ldd	r31, Y+3	; 0x03
    3276:	91 83       	std	Z+1, r25	; 0x01
    3278:	80 83       	st	Z, r24
    data8 = 1 << 7 ; // FIFO is a Tx FIFO
    data8 |= 1 << 4 ; // TXATIE ---> 1: Enable Transmit Attempts Exhausted Interrupt
    writeRegister8 (FIFOCON_REGISTER (TRANSMIT_FIFO_INDEX), data8) ;
    mTransmitFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTransmitFIFOPayload) ;
  //----------------------------------- Configure receive filters
    uint8_t filterIndex = 0 ;
    327a:	51 2c       	mov	r5, r1
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    while (NULL != filter) {
    327c:	e1 14       	cp	r14, r1
    327e:	f1 04       	cpc	r15, r1
    3280:	e1 f1       	breq	.+120    	; 0x32fa <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x5a0>
      mCallBackFunctionArray [filterIndex] = filter->mCallBackRoutine ;
    3282:	f7 01       	movw	r30, r14
    3284:	42 85       	ldd	r20, Z+10	; 0x0a
    3286:	53 85       	ldd	r21, Z+11	; 0x0b
    3288:	c5 2c       	mov	r12, r5
    328a:	d1 2c       	mov	r13, r1
    328c:	c6 01       	movw	r24, r12
    328e:	88 0f       	add	r24, r24
    3290:	99 1f       	adc	r25, r25
    3292:	ea 81       	ldd	r30, Y+2	; 0x02
    3294:	fb 81       	ldd	r31, Y+3	; 0x03
    3296:	20 81       	ld	r18, Z
    3298:	31 81       	ldd	r19, Z+1	; 0x01
    329a:	f9 01       	movw	r30, r18
    329c:	e8 0f       	add	r30, r24
    329e:	f9 1f       	adc	r31, r25
    32a0:	51 83       	std	Z+1, r21	; 0x01
    32a2:	40 83       	st	Z, r20
}

//······················································································································

static uint16_t MASK_REGISTER (const uint16_t inFilterIndex) { // 0 ... 31 (DS20005688B, page 61)
  return 0x1F4 + 8 * inFilterIndex ;
    32a4:	36 01       	movw	r6, r12
    32a6:	f3 e0       	ldi	r31, 0x03	; 3
    32a8:	66 0c       	add	r6, r6
    32aa:	77 1c       	adc	r7, r7
    32ac:	fa 95       	dec	r31
    32ae:	e1 f7       	brne	.-8      	; 0x32a8 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x54e>
    uint8_t filterIndex = 0 ;
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    while (NULL != filter) {
      mCallBackFunctionArray [filterIndex] = filter->mCallBackRoutine ;
      writeRegister32 (MASK_REGISTER (filterIndex), filter->mFilterMask) ; // DS20005688B, page 61
    32b0:	f7 01       	movw	r30, r14
    32b2:	22 81       	ldd	r18, Z+2	; 0x02
    32b4:	33 81       	ldd	r19, Z+3	; 0x03
    32b6:	44 81       	ldd	r20, Z+4	; 0x04
    32b8:	55 81       	ldd	r21, Z+5	; 0x05
    32ba:	b3 01       	movw	r22, r6
    32bc:	6c 50       	subi	r22, 0x0C	; 12
    32be:	7e 4f       	sbci	r23, 0xFE	; 254
    32c0:	8a 81       	ldd	r24, Y+2	; 0x02
    32c2:	9b 81       	ldd	r25, Y+3	; 0x03
    32c4:	0e 94 55 16 	call	0x2caa	; 0x2caa <_ZN10ACAN2517FD15writeRegister32Ejm>
      writeRegister32 (FLTOBJ_REGISTER (filterIndex), filter->mAcceptanceFilter) ; // DS20005688B, page 60
    32c8:	f7 01       	movw	r30, r14
    32ca:	26 81       	ldd	r18, Z+6	; 0x06
    32cc:	37 81       	ldd	r19, Z+7	; 0x07
    32ce:	40 85       	ldd	r20, Z+8	; 0x08
    32d0:	51 85       	ldd	r21, Z+9	; 0x09
    32d2:	b3 01       	movw	r22, r6
    32d4:	60 51       	subi	r22, 0x10	; 16
    32d6:	7e 4f       	sbci	r23, 0xFE	; 254
    32d8:	8a 81       	ldd	r24, Y+2	; 0x02
    32da:	9b 81       	ldd	r25, Y+3	; 0x03
    32dc:	0e 94 55 16 	call	0x2caa	; 0x2caa <_ZN10ACAN2517FD15writeRegister32Ejm>
      data8 = 1 << 7 ; // Filter is enabled
      data8 |= 1 ; // Message matching filter is stored in FIFO1
      writeRegister8 (FLTCON_REGISTER (filterIndex), data8) ; // DS20005688B, page 58
    32e0:	b6 01       	movw	r22, r12
    32e2:	60 53       	subi	r22, 0x30	; 48
    32e4:	7e 4f       	sbci	r23, 0xFE	; 254
    32e6:	41 e8       	ldi	r20, 0x81	; 129
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	9b 81       	ldd	r25, Y+3	; 0x03
    32ec:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
      filter = filter->mNextFilter ;
    32f0:	f7 01       	movw	r30, r14
    32f2:	e0 80       	ld	r14, Z
    32f4:	f1 80       	ldd	r15, Z+1	; 0x01
      filterIndex += 1 ;
    32f6:	53 94       	inc	r5
    mTransmitFIFOPayload = ACAN2517FDSettings::objectSizeForPayload (inSettings.mControllerTransmitFIFOPayload) ;
  //----------------------------------- Configure receive filters
    uint8_t filterIndex = 0 ;
    ACAN2517FDFilters::Filter * filter = inFilters.mFirstFilter ;
    mCallBackFunctionArray = new ACANFDCallBackRoutine [inFilters.filterCount ()] ;
    while (NULL != filter) {
    32f8:	c1 cf       	rjmp	.-126    	; 0x327c <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x522>
      filterIndex += 1 ;
    }
  //----------------------------------- Activate interrupts (INT, DS20005688B page 34)
    data8  = (1 << 1) ; // Receive FIFO Interrupt Enable
    data8 |= (1 << 0) ; // Transmit FIFO Interrupt Enable
    writeRegister8 (INT_REGISTER + 2, data8) ;
    32fa:	43 e0       	ldi	r20, 0x03	; 3
    32fc:	6e e1       	ldi	r22, 0x1E	; 30
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	8a 81       	ldd	r24, Y+2	; 0x02
    3302:	9b 81       	ldd	r25, Y+3	; 0x03
    3304:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
    data8  = (1 << 2) ; // TXATIE ---> 1: Transmit Attempt Interrupt Enable bit
    writeRegister8 (INT_REGISTER + 3, data8) ;
    3308:	44 e0       	ldi	r20, 0x04	; 4
    330a:	6f e1       	ldi	r22, 0x1F	; 31
    330c:	70 e0       	ldi	r23, 0x00	; 0
    330e:	8a 81       	ldd	r24, Y+2	; 0x02
    3310:	9b 81       	ldd	r25, Y+3	; 0x03
    3312:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //  bits 23-16: TSEG1 - 1
  //  bit 15: unused
  //  bits 14-8: TSEG2 - 1
  //  bit 7: unused
  //  bits 6-0: SJW - 1
    uint32_t data = inSettings.mBitRatePrescaler - 1 ;
    3316:	f8 01       	movw	r30, r16
    3318:	25 85       	ldd	r18, Z+13	; 0x0d
    331a:	36 85       	ldd	r19, Z+14	; 0x0e
    331c:	21 50       	subi	r18, 0x01	; 1
    331e:	31 09       	sbc	r19, r1
    3320:	c9 01       	movw	r24, r18
    3322:	a0 e0       	ldi	r26, 0x00	; 0
    3324:	b0 e0       	ldi	r27, 0x00	; 0
    data <<= 8 ;
    3326:	cc 24       	eor	r12, r12
    3328:	d8 2e       	mov	r13, r24
    332a:	e9 2e       	mov	r14, r25
    332c:	fa 2e       	mov	r15, r26
    data |= inSettings.mArbitrationPhaseSegment1 - 1 ;
    332e:	27 85       	ldd	r18, Z+15	; 0x0f
    3330:	30 89       	ldd	r19, Z+16	; 0x10
    3332:	21 50       	subi	r18, 0x01	; 1
    3334:	31 09       	sbc	r19, r1
    3336:	c9 01       	movw	r24, r18
    3338:	a0 e0       	ldi	r26, 0x00	; 0
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	8c 29       	or	r24, r12
    333e:	9d 29       	or	r25, r13
    3340:	ae 29       	or	r26, r14
    3342:	bf 29       	or	r27, r15
    data <<= 8 ;
    3344:	44 27       	eor	r20, r20
    3346:	58 2f       	mov	r21, r24
    3348:	69 2f       	mov	r22, r25
    334a:	7a 2f       	mov	r23, r26
    data |= inSettings.mArbitrationPhaseSegment2 - 1 ;
    334c:	81 89       	ldd	r24, Z+17	; 0x11
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	09 2e       	mov	r0, r25
    3354:	00 0c       	add	r0, r0
    3356:	aa 0b       	sbc	r26, r26
    3358:	bb 0b       	sbc	r27, r27
    335a:	84 2b       	or	r24, r20
    335c:	95 2b       	or	r25, r21
    335e:	a6 2b       	or	r26, r22
    3360:	b7 2b       	or	r27, r23
    data <<= 8 ;
    3362:	ba 2f       	mov	r27, r26
    3364:	a9 2f       	mov	r26, r25
    3366:	98 2f       	mov	r25, r24
    3368:	88 27       	eor	r24, r24
    data |= inSettings.mArbitrationSJW - 1 ;
    writeRegister32 (NBTCFG_REGISTER, data);
    336a:	22 89       	ldd	r18, Z+18	; 0x12
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	21 50       	subi	r18, 0x01	; 1
    3370:	31 09       	sbc	r19, r1
    3372:	a9 01       	movw	r20, r18
    3374:	33 0f       	add	r19, r19
    3376:	66 0b       	sbc	r22, r22
    3378:	77 0b       	sbc	r23, r23
    337a:	9a 01       	movw	r18, r20
    337c:	ab 01       	movw	r20, r22
    337e:	28 2b       	or	r18, r24
    3380:	39 2b       	or	r19, r25
    3382:	4a 2b       	or	r20, r26
    3384:	5b 2b       	or	r21, r27
    3386:	64 e0       	ldi	r22, 0x04	; 4
    3388:	70 e0       	ldi	r23, 0x00	; 0
    338a:	8a 81       	ldd	r24, Y+2	; 0x02
    338c:	9b 81       	ldd	r25, Y+3	; 0x03
    338e:	0e 94 55 16 	call	0x2caa	; 0x2caa <_ZN10ACAN2517FD15writeRegister32Ejm>
  //  bits 20-16: TSEG1 - 1
  //  bits 15-12: unused
  //  bits 11-8: TSEG2 - 1
  //  bits 7-4: unused
  //  bits 3-0: SJW - 1
    mHasDataBitRate = inSettings.mDataBitRateFactor != ::DataBitRateFactor::x1 ;
    3392:	f8 01       	movw	r30, r16
    3394:	81 85       	ldd	r24, Z+9	; 0x09
    3396:	91 e0       	ldi	r25, 0x01	; 1
    3398:	81 30       	cpi	r24, 0x01	; 1
    339a:	09 f4       	brne	.+2      	; 0x339e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x644>
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	ea 81       	ldd	r30, Y+2	; 0x02
    33a0:	fb 81       	ldd	r31, Y+3	; 0x03
    33a2:	92 87       	std	Z+10, r25	; 0x0a
    if (mHasDataBitRate) {
    33a4:	81 30       	cpi	r24, 0x01	; 1
    33a6:	09 f4       	brne	.+2      	; 0x33aa <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x650>
    33a8:	3f c0       	rjmp	.+126    	; 0x3428 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x6ce>
      data = inSettings.mBitRatePrescaler - 1 ;
    33aa:	f8 01       	movw	r30, r16
    33ac:	25 85       	ldd	r18, Z+13	; 0x0d
    33ae:	36 85       	ldd	r19, Z+14	; 0x0e
    33b0:	21 50       	subi	r18, 0x01	; 1
    33b2:	31 09       	sbc	r19, r1
    33b4:	c9 01       	movw	r24, r18
    33b6:	a0 e0       	ldi	r26, 0x00	; 0
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
      data <<= 8 ;
    33ba:	cc 24       	eor	r12, r12
    33bc:	d8 2e       	mov	r13, r24
    33be:	e9 2e       	mov	r14, r25
    33c0:	fa 2e       	mov	r15, r26
      data |= inSettings.mDataPhaseSegment1 - 1 ;
    33c2:	22 85       	ldd	r18, Z+10	; 0x0a
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	21 50       	subi	r18, 0x01	; 1
    33c8:	31 09       	sbc	r19, r1
    33ca:	c9 01       	movw	r24, r18
    33cc:	33 0f       	add	r19, r19
    33ce:	aa 0b       	sbc	r26, r26
    33d0:	bb 0b       	sbc	r27, r27
    33d2:	8c 29       	or	r24, r12
    33d4:	9d 29       	or	r25, r13
    33d6:	ae 29       	or	r26, r14
    33d8:	bf 29       	or	r27, r15
      data <<= 8 ;
    33da:	44 27       	eor	r20, r20
    33dc:	58 2f       	mov	r21, r24
    33de:	69 2f       	mov	r22, r25
    33e0:	7a 2f       	mov	r23, r26
      data |= inSettings.mDataPhaseSegment2 - 1 ;
    33e2:	83 85       	ldd	r24, Z+11	; 0x0b
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	09 2e       	mov	r0, r25
    33ea:	00 0c       	add	r0, r0
    33ec:	aa 0b       	sbc	r26, r26
    33ee:	bb 0b       	sbc	r27, r27
    33f0:	84 2b       	or	r24, r20
    33f2:	95 2b       	or	r25, r21
    33f4:	a6 2b       	or	r26, r22
    33f6:	b7 2b       	or	r27, r23
      data <<= 8 ;
    33f8:	ba 2f       	mov	r27, r26
    33fa:	a9 2f       	mov	r26, r25
    33fc:	98 2f       	mov	r25, r24
    33fe:	88 27       	eor	r24, r24
      data |= inSettings.mDataSJW - 1 ;
      writeRegister32 (DBTCFG_REGISTER, data) ;
    3400:	24 85       	ldd	r18, Z+12	; 0x0c
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	21 50       	subi	r18, 0x01	; 1
    3406:	31 09       	sbc	r19, r1
    3408:	a9 01       	movw	r20, r18
    340a:	33 0f       	add	r19, r19
    340c:	66 0b       	sbc	r22, r22
    340e:	77 0b       	sbc	r23, r23
    3410:	9a 01       	movw	r18, r20
    3412:	ab 01       	movw	r20, r22
    3414:	28 2b       	or	r18, r24
    3416:	39 2b       	or	r19, r25
    3418:	4a 2b       	or	r20, r26
    341a:	5b 2b       	or	r21, r27
    341c:	68 e0       	ldi	r22, 0x08	; 8
    341e:	70 e0       	ldi	r23, 0x00	; 0
    3420:	8a 81       	ldd	r24, Y+2	; 0x02
    3422:	9b 81       	ldd	r25, Y+3	; 0x03
    3424:	0e 94 55 16 	call	0x2caa	; 0x2caa <_ZN10ACAN2517FD15writeRegister32Ejm>
    }
  //----------------------------------- Request mode (CON_REGISTER + 3, DS20005688B, page 24)
  //  bits 7-4: Transmit Bandwith Sharing Bits ---> 0
  //  bit 3: Abort All Pending Transmissions bit --> 0
    mTXBWS_RequestedMode = inSettings.mRequestedMode | (TXBWS << 4) ;
    3428:	f8 01       	movw	r30, r16
    342a:	41 8d       	ldd	r20, Z+25	; 0x19
    342c:	ea 81       	ldd	r30, Y+2	; 0x02
    342e:	fb 81       	ldd	r31, Y+3	; 0x03
    3430:	46 87       	std	Z+14, r20	; 0x0e
    writeRegister8 (CON_REGISTER + 3, mTXBWS_RequestedMode);
    3432:	63 e0       	ldi	r22, 0x03	; 3
    3434:	70 e0       	ldi	r23, 0x00	; 0
    3436:	cf 01       	movw	r24, r30
    3438:	0e 94 22 16 	call	0x2c44	; 0x2c44 <_ZN10ACAN2517FD14writeRegister8Ejh>
  //----------------------------------- Wait (10 ms max) until requested mode is reached
    bool wait = true ;
    const uint32_t deadline = millis () + 10 ;
    343c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <millis>
    3440:	6b 01       	movw	r12, r22
    3442:	7c 01       	movw	r14, r24
    3444:	fa e0       	ldi	r31, 0x0A	; 10
    3446:	cf 0e       	add	r12, r31
    3448:	d1 1c       	adc	r13, r1
    344a:	e1 1c       	adc	r14, r1
    344c:	f1 1c       	adc	r15, r1
    while (wait) {
     const uint8_t actualMode = (readRegister8 (CON_REGISTER + 2) >> 5) & 0x07 ;
    344e:	62 e0       	ldi	r22, 0x02	; 2
    3450:	70 e0       	ldi	r23, 0x00	; 0
    3452:	8a 81       	ldd	r24, Y+2	; 0x02
    3454:	9b 81       	ldd	r25, Y+3	; 0x03
    3456:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <_ZN10ACAN2517FD13readRegister8Ej>
      wait = actualMode != inSettings.mRequestedMode ;
      if (wait && (millis () >= deadline)) {
    345a:	82 95       	swap	r24
    345c:	86 95       	lsr	r24
    345e:	87 70       	andi	r24, 0x07	; 7
    3460:	f8 01       	movw	r30, r16
    3462:	91 8d       	ldd	r25, Z+25	; 0x19
    3464:	89 17       	cp	r24, r25
    3466:	59 f0       	breq	.+22     	; 0x347e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x724>
    3468:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <millis>
    346c:	6c 15       	cp	r22, r12
    346e:	7d 05       	cpc	r23, r13
    3470:	8e 05       	cpc	r24, r14
    3472:	9f 05       	cpc	r25, r15
    3474:	60 f3       	brcs	.-40     	; 0x344e <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x6f4>
        errorCode |= kRequestedModeTimeOut ;
    3476:	81 2c       	mov	r8, r1
    3478:	91 2c       	mov	r9, r1
    347a:	54 01       	movw	r10, r8
    347c:	a3 94       	inc	r10
      }
    }
    #ifdef ARDUINO_ARCH_ESP32
      xTaskCreate (myESP32Task, "ACAN2517Handler", 1024, this, 256, NULL) ;
    #endif
    if (mINT != 255) { // 255 means interrupt is not used
    347e:	ea 81       	ldd	r30, Y+2	; 0x02
    3480:	fb 81       	ldd	r31, Y+3	; 0x03
    3482:	87 81       	ldd	r24, Z+7	; 0x07
    3484:	8f 3f       	cpi	r24, 0xFF	; 255
    3486:	49 f0       	breq	.+18     	; 0x349a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x740>
      #ifdef ARDUINO_ARCH_ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, FALLING) ;
      #else
        attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ; // Thank to Flole998
    3488:	40 e0       	ldi	r20, 0x00	; 0
    348a:	50 e0       	ldi	r21, 0x00	; 0
    348c:	b1 01       	movw	r22, r2
    348e:	89 81       	ldd	r24, Y+1	; 0x01
    3490:	0e 94 2e 22 	call	0x445c	; 0x445c <attachInterrupt>
        mSPI.usingInterrupt (itPin) ; // usingInterrupt is not implemented in Arduino ESP32
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <_ZN8SPIClass14usingInterruptEh>

    /*
     * If you begin() multiple times without constructor,
     * mHardwareTxFIFOFull = true will block the transmitter.
     */
    mHardwareTxFIFOFull = false;
    349a:	ea 81       	ldd	r30, Y+2	; 0x02
    349c:	fb 81       	ldd	r31, Y+3	; 0x03
    349e:	11 86       	std	Z+9, r1	; 0x09
    mHardwareReceiveBufferOverflowCount = 0;
    34a0:	17 86       	std	Z+15, r1	; 0x0f
  }
//---
  return errorCode ;
    34a2:	15 c0       	rjmp	.+42     	; 0x34ce <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x774>
    34a4:	ff ef       	ldi	r31, 0xFF	; 255
    34a6:	f9 83       	std	Y+1, r31	; 0x01
    34a8:	a0 cc       	rjmp	.-1728   	; 0x2dea <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x90>
  }
  if (inSettings.CANBitSettingConsistency () != 0) {
    errorCode |= kInconsistentBitRateSettings ;
  }
//----------------------------------- Check mINT has interrupt capability
  const int8_t itPin = digitalPinToInterrupt (mINT) ;
    34aa:	2f ef       	ldi	r18, 0xFF	; 255
    34ac:	29 83       	std	Y+1, r18	; 0x01
  if ((mINT != 255) && (itPin == NOT_AN_INTERRUPT)) {
    errorCode = kINTPinIsNotAnInterrupt ;
    34ae:	80 e1       	ldi	r24, 0x10	; 16
    34b0:	88 2e       	mov	r8, r24
    34b2:	91 2c       	mov	r9, r1
    34b4:	a1 2c       	mov	r10, r1
    34b6:	b1 2c       	mov	r11, r1
  }
//----------------------------------- Check interrupt service routine is not null
  if ((mINT != 255) && (inInterruptServiceRoutine == NULL)) {
    34b8:	21 14       	cp	r2, r1
    34ba:	31 04       	cpc	r3, r1
    34bc:	09 f0       	breq	.+2      	; 0x34c0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x766>
    34be:	95 cc       	rjmp	.-1750   	; 0x2dea <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x90>
    errorCode |= kISRIsNull ;
    34c0:	68 94       	set
    34c2:	85 f8       	bld	r8, 5
    34c4:	92 cc       	rjmp	.-1756   	; 0x2dea <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x90>
    writeRegister8 (OSC_REGISTER, osc) ; // DS20005688B, page 16
  //--- Wait for PLL is ready (wait max 2 ms)
    if (pll != 0) {
      bool wait = true ;
      const uint32_t deadline = millis () + 2 ;
      while (wait) {
    34c6:	91 30       	cpi	r25, 0x01	; 1
    34c8:	09 f0       	breq	.+2      	; 0x34cc <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x772>
    34ca:	7b cd       	rjmp	.-1290   	; 0x2fc2 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x268>
    34cc:	90 cd       	rjmp	.-1248   	; 0x2fee <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters+0x294>
    mHardwareTxFIFOFull = false;
    mHardwareReceiveBufferOverflowCount = 0;
  }
//---
  return errorCode ;
}
    34ce:	c5 01       	movw	r24, r10
    34d0:	b4 01       	movw	r22, r8
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	df 91       	pop	r29
    34da:	cf 91       	pop	r28
    34dc:	1f 91       	pop	r17
    34de:	0f 91       	pop	r16
    34e0:	ff 90       	pop	r15
    34e2:	ef 90       	pop	r14
    34e4:	df 90       	pop	r13
    34e6:	cf 90       	pop	r12
    34e8:	bf 90       	pop	r11
    34ea:	af 90       	pop	r10
    34ec:	9f 90       	pop	r9
    34ee:	8f 90       	pop	r8
    34f0:	7f 90       	pop	r7
    34f2:	6f 90       	pop	r6
    34f4:	5f 90       	pop	r5
    34f6:	4f 90       	pop	r4
    34f8:	3f 90       	pop	r3
    34fa:	2f 90       	pop	r2
    34fc:	08 95       	ret

000034fe <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE>:
}

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FD::begin (const ACAN2517FDSettings & inSettings,
                            void (* inInterruptServiceRoutine) (void)) {
    34fe:	cf 92       	push	r12
    3500:	df 92       	push	r13
    3502:	ef 92       	push	r14
    3504:	ff 92       	push	r15
    3506:	0f 93       	push	r16
    3508:	1f 93       	push	r17
    350a:	cf 93       	push	r28
    350c:	df 93       	push	r29
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
    3512:	27 97       	sbiw	r28, 0x07	; 7
    3514:	0f b6       	in	r0, 0x3f	; 63
    3516:	f8 94       	cli
    3518:	de bf       	out	0x3e, r29	; 62
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	cd bf       	out	0x3d, r28	; 61
    351e:	8c 01       	movw	r16, r24
    3520:	7b 01       	movw	r14, r22
    3522:	6a 01       	movw	r12, r20

//······················································································································
//   CONSTRUCTOR
//······················································································································

  public: ACAN2517FDFilters (void) {}
    3524:	19 82       	std	Y+1, r1	; 0x01
    3526:	1b 82       	std	Y+3, r1	; 0x03
    3528:	1a 82       	std	Y+2, r1	; 0x02
    352a:	1d 82       	std	Y+5, r1	; 0x05
    352c:	1c 82       	std	Y+4, r1	; 0x04
    352e:	1e 82       	std	Y+6, r1	; 0x06
    3530:	1f 82       	std	Y+7, r1	; 0x07
//······················································································································
//   RECEIVE FILTERS
//······················································································································

  public: void appendPassAllFilter (const ACANFDCallBackRoutine inCallBackRoutine) {  // Accept any frame
    Filter * f = new Filter (0, 0, inCallBackRoutine) ;
    3532:	8c e0       	ldi	r24, 0x0C	; 12
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	0e 94 14 0b 	call	0x1628	; 0x1628 <_Znwj>
    353a:	fc 01       	movw	r30, r24
                    const uint32_t inAcceptanceFilter,
                    const ACANFDCallBackRoutine inCallBackRoutine) :
    mNextFilter (NULL),
    mFilterMask (inFilterMask),
    mAcceptanceFilter (inAcceptanceFilter),
    mCallBackRoutine (inCallBackRoutine) {
    353c:	11 82       	std	Z+1, r1	; 0x01
    353e:	10 82       	st	Z, r1
    3540:	12 82       	std	Z+2, r1	; 0x02
    3542:	13 82       	std	Z+3, r1	; 0x03
    3544:	14 82       	std	Z+4, r1	; 0x04
    3546:	15 82       	std	Z+5, r1	; 0x05
    3548:	16 82       	std	Z+6, r1	; 0x06
    354a:	17 82       	std	Z+7, r1	; 0x07
    354c:	10 86       	std	Z+8, r1	; 0x08
    354e:	11 86       	std	Z+9, r1	; 0x09
    3550:	13 86       	std	Z+11, r1	; 0x0b
    3552:	12 86       	std	Z+10, r1	; 0x0a
//   RECEIVE FILTERS
//······················································································································

  public: void appendPassAllFilter (const ACANFDCallBackRoutine inCallBackRoutine) {  // Accept any frame
    Filter * f = new Filter (0, 0, inCallBackRoutine) ;
    if (mFirstFilter == NULL) {
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	9b 81       	ldd	r25, Y+3	; 0x03
    3558:	89 2b       	or	r24, r25
    355a:	19 f4       	brne	.+6      	; 0x3562 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0x64>
      mFirstFilter = f ;
    355c:	fb 83       	std	Y+3, r31	; 0x03
    355e:	ea 83       	std	Y+2, r30	; 0x02
    3560:	04 c0       	rjmp	.+8      	; 0x356a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0x6c>
    }else{
      mLastFilter->mNextFilter  = f ;
    3562:	ac 81       	ldd	r26, Y+4	; 0x04
    3564:	bd 81       	ldd	r27, Y+5	; 0x05
    3566:	ed 93       	st	X+, r30
    3568:	fc 93       	st	X, r31
    }
    mLastFilter = f ;
    356a:	fd 83       	std	Y+5, r31	; 0x05
    356c:	ec 83       	std	Y+4, r30	; 0x04
    mFilterCount += 1 ;
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	8f 5f       	subi	r24, 0xFF	; 255
    3572:	89 83       	std	Y+1, r24	; 0x01
//--- Add pass-all filter
  ACAN2517FDFilters filters ;
  filters.appendPassAllFilter (NULL) ;
//---
  return begin (inSettings, inInterruptServiceRoutine, filters) ;
    3574:	9e 01       	movw	r18, r28
    3576:	2f 5f       	subi	r18, 0xFF	; 255
    3578:	3f 4f       	sbci	r19, 0xFF	; 255
    357a:	a6 01       	movw	r20, r12
    357c:	b7 01       	movw	r22, r14
    357e:	c8 01       	movw	r24, r16
    3580:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvERK17ACAN2517FDFilters>
    3584:	6b 01       	movw	r12, r22
    3586:	7c 01       	movw	r14, r24
//······················································································································
//   DESTRUCTOR
//······················································································································

  public: ~ ACAN2517FDFilters (void) {
    while (mFirstFilter != NULL) {
    3588:	8a 81       	ldd	r24, Y+2	; 0x02
    358a:	9b 81       	ldd	r25, Y+3	; 0x03
    358c:	00 97       	sbiw	r24, 0x00	; 0
    358e:	41 f0       	breq	.+16     	; 0x35a0 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0xa2>
      Filter * next = mFirstFilter->mNextFilter ;
    3590:	fc 01       	movw	r30, r24
    3592:	00 81       	ld	r16, Z
    3594:	11 81       	ldd	r17, Z+1	; 0x01
      delete mFirstFilter ;
    3596:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZdlPv>
      mFirstFilter = next ;
    359a:	1b 83       	std	Y+3, r17	; 0x03
    359c:	0a 83       	std	Y+2, r16	; 0x02
    359e:	f4 cf       	rjmp	.-24     	; 0x3588 <_ZN10ACAN2517FD5beginERK18ACAN2517FDSettingsPFvvE+0x8a>
}
    35a0:	c7 01       	movw	r24, r14
    35a2:	b6 01       	movw	r22, r12
    35a4:	27 96       	adiw	r28, 0x07	; 7
    35a6:	0f b6       	in	r0, 0x3f	; 63
    35a8:	f8 94       	cli
    35aa:	de bf       	out	0x3e, r29	; 62
    35ac:	0f be       	out	0x3f, r0	; 63
    35ae:	cd bf       	out	0x3d, r28	; 61
    35b0:	df 91       	pop	r29
    35b2:	cf 91       	pop	r28
    35b4:	1f 91       	pop	r17
    35b6:	0f 91       	pop	r16
    35b8:	ff 90       	pop	r15
    35ba:	ef 90       	pop	r14
    35bc:	df 90       	pop	r13
    35be:	cf 90       	pop	r12
    35c0:	08 95       	ret

000035c2 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm>:
uint32_t ACAN2517FDSettings::dataSamplePointFromBitStart (void) const {
  const uint32_t nominalTQCount = 1 /* Sync Seg */ + mDataPhaseSegment1 + mDataPhaseSegment2 ;
  const uint32_t samplePoint = 1 /* Sync Seg */ + mDataPhaseSegment1 ;
  const uint32_t partPerCent = 100 ;
  return (samplePoint * partPerCent) / nominalTQCount ;
}
    35c2:	2f 92       	push	r2
    35c4:	3f 92       	push	r3
    35c6:	4f 92       	push	r4
    35c8:	5f 92       	push	r5
    35ca:	6f 92       	push	r6
    35cc:	7f 92       	push	r7
    35ce:	8f 92       	push	r8
    35d0:	9f 92       	push	r9
    35d2:	af 92       	push	r10
    35d4:	bf 92       	push	r11
    35d6:	cf 92       	push	r12
    35d8:	df 92       	push	r13
    35da:	ef 92       	push	r14
    35dc:	ff 92       	push	r15
    35de:	0f 93       	push	r16
    35e0:	1f 93       	push	r17
    35e2:	cf 93       	push	r28
    35e4:	df 93       	push	r29
    35e6:	cd b7       	in	r28, 0x3d	; 61
    35e8:	de b7       	in	r29, 0x3e	; 62
    35ea:	e2 97       	sbiw	r28, 0x32	; 50
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	f8 94       	cli
    35f0:	de bf       	out	0x3e, r29	; 62
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	cd bf       	out	0x3d, r28	; 61
    35f6:	9a a7       	std	Y+42, r25	; 0x2a
    35f8:	89 a7       	std	Y+41, r24	; 0x29
    35fa:	2d 87       	std	Y+13, r18	; 0x0d
    35fc:	3e 87       	std	Y+14, r19	; 0x0e
    35fe:	4f 87       	std	Y+15, r20	; 0x0f
    3600:	58 8b       	std	Y+16, r21	; 0x10
    3602:	c9 a2       	std	Y+33, r12	; 0x21
    3604:	da a2       	std	Y+34, r13	; 0x22
    3606:	eb a2       	std	Y+35, r14	; 0x23
    3608:	fc a2       	std	Y+36, r15	; 0x24
    360a:	dc 01       	movw	r26, r24
    360c:	6c 93       	st	X, r22
    360e:	68 30       	cpi	r22, 0x08	; 8
    3610:	78 f4       	brcc	.+30     	; 0x3630 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x6e>
    3612:	b4 e0       	ldi	r27, 0x04	; 4
    3614:	6b 9f       	mul	r22, r27
    3616:	f0 01       	movw	r30, r0
    3618:	11 24       	eor	r1, r1
    361a:	ed 56       	subi	r30, 0x6D	; 109
    361c:	fd 4f       	sbci	r31, 0xFD	; 253
    361e:	20 81       	ld	r18, Z
    3620:	31 81       	ldd	r19, Z+1	; 0x01
    3622:	42 81       	ldd	r20, Z+2	; 0x02
    3624:	53 81       	ldd	r21, Z+3	; 0x03
    3626:	29 83       	std	Y+1, r18	; 0x01
    3628:	3a 83       	std	Y+2, r19	; 0x02
    362a:	4b 83       	std	Y+3, r20	; 0x03
    362c:	5c 83       	std	Y+4, r21	; 0x04
    362e:	08 c0       	rjmp	.+16     	; 0x3640 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x7e>
    3630:	40 e0       	ldi	r20, 0x00	; 0
    3632:	5a e5       	ldi	r21, 0x5A	; 90
    3634:	62 e6       	ldi	r22, 0x62	; 98
    3636:	72 e0       	ldi	r23, 0x02	; 2
    3638:	49 83       	std	Y+1, r20	; 0x01
    363a:	5a 83       	std	Y+2, r21	; 0x02
    363c:	6b 83       	std	Y+3, r22	; 0x03
    363e:	7c 83       	std	Y+4, r23	; 0x04
    3640:	69 81       	ldd	r22, Y+1	; 0x01
    3642:	7a 81       	ldd	r23, Y+2	; 0x02
    3644:	8b 81       	ldd	r24, Y+3	; 0x03
    3646:	9c 81       	ldd	r25, Y+4	; 0x04
    3648:	a9 a5       	ldd	r26, Y+41	; 0x29
    364a:	ba a5       	ldd	r27, Y+42	; 0x2a
    364c:	11 96       	adiw	r26, 0x01	; 1
    364e:	6d 93       	st	X+, r22
    3650:	7d 93       	st	X+, r23
    3652:	8d 93       	st	X+, r24
    3654:	9c 93       	st	X, r25
    3656:	14 97       	sbiw	r26, 0x04	; 4
    3658:	2d 85       	ldd	r18, Y+13	; 0x0d
    365a:	3e 85       	ldd	r19, Y+14	; 0x0e
    365c:	4f 85       	ldd	r20, Y+15	; 0x0f
    365e:	58 89       	ldd	r21, Y+16	; 0x10
    3660:	15 96       	adiw	r26, 0x05	; 5
    3662:	2d 93       	st	X+, r18
    3664:	3d 93       	st	X+, r19
    3666:	4d 93       	st	X+, r20
    3668:	5c 93       	st	X, r21
    366a:	18 97       	sbiw	r26, 0x08	; 8
    366c:	19 96       	adiw	r26, 0x09	; 9
    366e:	0c 93       	st	X, r16
    3670:	19 97       	sbiw	r26, 0x09	; 9
    3672:	1a 96       	adiw	r26, 0x0a	; 10
    3674:	1c 92       	st	X, r1
    3676:	1a 97       	sbiw	r26, 0x0a	; 10
    3678:	1b 96       	adiw	r26, 0x0b	; 11
    367a:	1c 92       	st	X, r1
    367c:	1b 97       	sbiw	r26, 0x0b	; 11
    367e:	1c 96       	adiw	r26, 0x0c	; 12
    3680:	1c 92       	st	X, r1
    3682:	1c 97       	sbiw	r26, 0x0c	; 12
    3684:	1e 96       	adiw	r26, 0x0e	; 14
    3686:	1c 92       	st	X, r1
    3688:	1e 92       	st	-X, r1
    368a:	1d 97       	sbiw	r26, 0x0d	; 13
    368c:	50 96       	adiw	r26, 0x10	; 16
    368e:	1c 92       	st	X, r1
    3690:	1e 92       	st	-X, r1
    3692:	1f 97       	sbiw	r26, 0x0f	; 15
    3694:	51 96       	adiw	r26, 0x11	; 17
    3696:	1c 92       	st	X, r1
    3698:	51 97       	sbiw	r26, 0x11	; 17
    369a:	52 96       	adiw	r26, 0x12	; 18
    369c:	1c 92       	st	X, r1
    369e:	52 97       	sbiw	r26, 0x12	; 18
    36a0:	53 96       	adiw	r26, 0x13	; 19
    36a2:	1c 92       	st	X, r1
    36a4:	53 97       	sbiw	r26, 0x13	; 19
    36a6:	54 96       	adiw	r26, 0x14	; 20
    36a8:	1c 92       	st	X, r1
    36aa:	54 97       	sbiw	r26, 0x14	; 20
    36ac:	55 96       	adiw	r26, 0x15	; 21
    36ae:	1c 92       	st	X, r1
    36b0:	55 97       	sbiw	r26, 0x15	; 21
    36b2:	56 96       	adiw	r26, 0x16	; 22
    36b4:	1c 92       	st	X, r1
    36b6:	56 97       	sbiw	r26, 0x16	; 22
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	57 96       	adiw	r26, 0x17	; 23
    36bc:	8c 93       	st	X, r24
    36be:	57 97       	sbiw	r26, 0x17	; 23
    36c0:	93 e0       	ldi	r25, 0x03	; 3
    36c2:	58 96       	adiw	r26, 0x18	; 24
    36c4:	9c 93       	st	X, r25
    36c6:	58 97       	sbiw	r26, 0x18	; 24
    36c8:	59 96       	adiw	r26, 0x19	; 25
    36ca:	1c 92       	st	X, r1
    36cc:	59 97       	sbiw	r26, 0x19	; 25
    36ce:	20 e1       	ldi	r18, 0x10	; 16
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	5b 96       	adiw	r26, 0x1b	; 27
    36d4:	3c 93       	st	X, r19
    36d6:	2e 93       	st	-X, r18
    36d8:	5a 97       	sbiw	r26, 0x1a	; 26
    36da:	5c 96       	adiw	r26, 0x1c	; 28
    36dc:	8c 93       	st	X, r24
    36de:	5c 97       	sbiw	r26, 0x1c	; 28
    36e0:	87 e0       	ldi	r24, 0x07	; 7
    36e2:	5d 96       	adiw	r26, 0x1d	; 29
    36e4:	8c 93       	st	X, r24
    36e6:	5d 97       	sbiw	r26, 0x1d	; 29
    36e8:	5e 96       	adiw	r26, 0x1e	; 30
    36ea:	1c 92       	st	X, r1
    36ec:	5e 97       	sbiw	r26, 0x1e	; 30
    36ee:	92 e0       	ldi	r25, 0x02	; 2
    36f0:	5f 96       	adiw	r26, 0x1f	; 31
    36f2:	9c 93       	st	X, r25
    36f4:	5f 97       	sbiw	r26, 0x1f	; 31
    36f6:	90 96       	adiw	r26, 0x20	; 32
    36f8:	1c 92       	st	X, r1
    36fa:	90 97       	sbiw	r26, 0x20	; 32
    36fc:	91 96       	adiw	r26, 0x21	; 33
    36fe:	8c 93       	st	X, r24
    3700:	91 97       	sbiw	r26, 0x21	; 33
    3702:	2f e1       	ldi	r18, 0x1F	; 31
    3704:	92 96       	adiw	r26, 0x22	; 34
    3706:	2c 93       	st	X, r18
    3708:	92 97       	sbiw	r26, 0x22	; 34
    370a:	93 96       	adiw	r26, 0x23	; 35
    370c:	9c 93       	st	X, r25
    370e:	93 97       	sbiw	r26, 0x23	; 35
    3710:	20 e2       	ldi	r18, 0x20	; 32
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	95 96       	adiw	r26, 0x25	; 37
    3716:	3c 93       	st	X, r19
    3718:	2e 93       	st	-X, r18
    371a:	94 97       	sbiw	r26, 0x24	; 36
    371c:	96 96       	adiw	r26, 0x26	; 38
    371e:	8c 93       	st	X, r24
    3720:	96 97       	sbiw	r26, 0x26	; 38
    3722:	8b e1       	ldi	r24, 0x1B	; 27
    3724:	97 96       	adiw	r26, 0x27	; 39
    3726:	8c 93       	st	X, r24
    3728:	01 30       	cpi	r16, 0x01	; 1
    372a:	09 f0       	breq	.+2      	; 0x372e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x16c>
    372c:	1a c1       	rjmp	.+564    	; 0x3962 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x3a0>
    372e:	69 81       	ldd	r22, Y+1	; 0x01
    3730:	7a 81       	ldd	r23, Y+2	; 0x02
    3732:	8b 81       	ldd	r24, Y+3	; 0x03
    3734:	9c 81       	ldd	r25, Y+4	; 0x04
    3736:	2d 85       	ldd	r18, Y+13	; 0x0d
    3738:	3e 85       	ldd	r19, Y+14	; 0x0e
    373a:	4f 85       	ldd	r20, Y+15	; 0x0f
    373c:	58 89       	ldd	r21, Y+16	; 0x10
    373e:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__udivmodsi4>
    3742:	2d 8b       	std	Y+21, r18	; 0x15
    3744:	3e 8b       	std	Y+22, r19	; 0x16
    3746:	4f 8b       	std	Y+23, r20	; 0x17
    3748:	58 8f       	std	Y+24, r21	; 0x18
    374a:	83 2e       	mov	r8, r19
    374c:	94 2e       	mov	r9, r20
    374e:	a5 2e       	mov	r10, r21
    3750:	bb 24       	eor	r11, r11
    3752:	2d 85       	ldd	r18, Y+13	; 0x0d
    3754:	3e 85       	ldd	r19, Y+14	; 0x0e
    3756:	4f 85       	ldd	r20, Y+15	; 0x0f
    3758:	58 89       	ldd	r21, Y+16	; 0x10
    375a:	00 27       	eor	r16, r16
    375c:	12 2f       	mov	r17, r18
    375e:	23 2f       	mov	r18, r19
    3760:	34 2f       	mov	r19, r20
    3762:	09 8b       	std	Y+17, r16	; 0x11
    3764:	1a 8b       	std	Y+18, r17	; 0x12
    3766:	2b 8b       	std	Y+19, r18	; 0x13
    3768:	3c 8b       	std	Y+20, r19	; 0x14
    376a:	b4 e0       	ldi	r27, 0x04	; 4
    376c:	4b 2e       	mov	r4, r27
    376e:	51 2c       	mov	r5, r1
    3770:	61 2c       	mov	r6, r1
    3772:	71 2c       	mov	r7, r1
    3774:	01 e0       	ldi	r16, 0x01	; 1
    3776:	10 e0       	ldi	r17, 0x00	; 0
    3778:	21 2c       	mov	r2, r1
    377a:	31 2c       	mov	r3, r1
    377c:	4f ef       	ldi	r20, 0xFF	; 255
    377e:	5f ef       	ldi	r21, 0xFF	; 255
    3780:	ba 01       	movw	r22, r20
    3782:	49 87       	std	Y+9, r20	; 0x09
    3784:	5a 87       	std	Y+10, r21	; 0x0a
    3786:	6b 87       	std	Y+11, r22	; 0x0b
    3788:	7c 87       	std	Y+12, r23	; 0x0c
    378a:	c1 2c       	mov	r12, r1
    378c:	d1 2c       	mov	r13, r1
    378e:	76 01       	movw	r14, r12
    3790:	d3 94       	inc	r13
    3792:	32 e8       	ldi	r19, 0x82	; 130
    3794:	83 16       	cp	r8, r19
    3796:	31 e0       	ldi	r19, 0x01	; 1
    3798:	93 06       	cpc	r9, r19
    379a:	a1 04       	cpc	r10, r1
    379c:	b1 04       	cpc	r11, r1
    379e:	08 f0       	brcs	.+2      	; 0x37a2 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x1e0>
    37a0:	93 c0       	rjmp	.+294    	; 0x38c8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x306>
    37a2:	c1 14       	cp	r12, r1
    37a4:	d1 04       	cpc	r13, r1
    37a6:	e1 04       	cpc	r14, r1
    37a8:	f1 04       	cpc	r15, r1
    37aa:	09 f4       	brne	.+2      	; 0x37ae <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x1ec>
    37ac:	8d c0       	rjmp	.+282    	; 0x38c8 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x306>
    37ae:	d5 01       	movw	r26, r10
    37b0:	c4 01       	movw	r24, r8
    37b2:	04 97       	sbiw	r24, 0x04	; 4
    37b4:	a1 09       	sbc	r26, r1
    37b6:	b1 09       	sbc	r27, r1
    37b8:	8e 37       	cpi	r24, 0x7E	; 126
    37ba:	91 40       	sbci	r25, 0x01	; 1
    37bc:	a1 05       	cpc	r26, r1
    37be:	b1 05       	cpc	r27, r1
    37c0:	48 f5       	brcc	.+82     	; 0x3814 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x252>
    37c2:	a7 01       	movw	r20, r14
    37c4:	96 01       	movw	r18, r12
    37c6:	c5 01       	movw	r24, r10
    37c8:	b4 01       	movw	r22, r8
    37ca:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <__mulsi3>
    37ce:	9b 01       	movw	r18, r22
    37d0:	ac 01       	movw	r20, r24
    37d2:	6d 85       	ldd	r22, Y+13	; 0x0d
    37d4:	7e 85       	ldd	r23, Y+14	; 0x0e
    37d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    37d8:	98 89       	ldd	r25, Y+16	; 0x10
    37da:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <__mulsi3>
    37de:	29 81       	ldd	r18, Y+1	; 0x01
    37e0:	3a 81       	ldd	r19, Y+2	; 0x02
    37e2:	4b 81       	ldd	r20, Y+3	; 0x03
    37e4:	5c 81       	ldd	r21, Y+4	; 0x04
    37e6:	26 1b       	sub	r18, r22
    37e8:	37 0b       	sbc	r19, r23
    37ea:	48 0b       	sbc	r20, r24
    37ec:	59 0b       	sbc	r21, r25
    37ee:	da 01       	movw	r26, r20
    37f0:	c9 01       	movw	r24, r18
    37f2:	49 85       	ldd	r20, Y+9	; 0x09
    37f4:	5a 85       	ldd	r21, Y+10	; 0x0a
    37f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37fa:	48 17       	cp	r20, r24
    37fc:	59 07       	cpc	r21, r25
    37fe:	6a 07       	cpc	r22, r26
    3800:	7b 07       	cpc	r23, r27
    3802:	40 f0       	brcs	.+16     	; 0x3814 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x252>
    3804:	24 01       	movw	r4, r8
    3806:	35 01       	movw	r6, r10
    3808:	86 01       	movw	r16, r12
    380a:	17 01       	movw	r2, r14
    380c:	89 87       	std	Y+9, r24	; 0x09
    380e:	9a 87       	std	Y+10, r25	; 0x0a
    3810:	ab 87       	std	Y+11, r26	; 0x0b
    3812:	bc 87       	std	Y+12, r27	; 0x0c
    3814:	d5 01       	movw	r26, r10
    3816:	c4 01       	movw	r24, r8
    3818:	03 97       	sbiw	r24, 0x03	; 3
    381a:	a1 09       	sbc	r26, r1
    381c:	b1 09       	sbc	r27, r1
    381e:	8e 37       	cpi	r24, 0x7E	; 126
    3820:	91 40       	sbci	r25, 0x01	; 1
    3822:	a1 05       	cpc	r26, r1
    3824:	b1 05       	cpc	r27, r1
    3826:	40 f5       	brcc	.+80     	; 0x3878 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2b6>
    3828:	6f ef       	ldi	r22, 0xFF	; 255
    382a:	86 1a       	sub	r8, r22
    382c:	96 0a       	sbc	r9, r22
    382e:	a6 0a       	sbc	r10, r22
    3830:	b6 0a       	sbc	r11, r22
    3832:	a5 01       	movw	r20, r10
    3834:	94 01       	movw	r18, r8
    3836:	69 89       	ldd	r22, Y+17	; 0x11
    3838:	7a 89       	ldd	r23, Y+18	; 0x12
    383a:	8b 89       	ldd	r24, Y+19	; 0x13
    383c:	9c 89       	ldd	r25, Y+20	; 0x14
    383e:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <__mulsi3>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	29 81       	ldd	r18, Y+1	; 0x01
    3848:	3a 81       	ldd	r19, Y+2	; 0x02
    384a:	4b 81       	ldd	r20, Y+3	; 0x03
    384c:	5c 81       	ldd	r21, Y+4	; 0x04
    384e:	82 1b       	sub	r24, r18
    3850:	93 0b       	sbc	r25, r19
    3852:	a4 0b       	sbc	r26, r20
    3854:	b5 0b       	sbc	r27, r21
    3856:	49 85       	ldd	r20, Y+9	; 0x09
    3858:	5a 85       	ldd	r21, Y+10	; 0x0a
    385a:	6b 85       	ldd	r22, Y+11	; 0x0b
    385c:	7c 85       	ldd	r23, Y+12	; 0x0c
    385e:	48 17       	cp	r20, r24
    3860:	59 07       	cpc	r21, r25
    3862:	6a 07       	cpc	r22, r26
    3864:	7b 07       	cpc	r23, r27
    3866:	40 f0       	brcs	.+16     	; 0x3878 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2b6>
    3868:	24 01       	movw	r4, r8
    386a:	35 01       	movw	r6, r10
    386c:	86 01       	movw	r16, r12
    386e:	17 01       	movw	r2, r14
    3870:	89 87       	std	Y+9, r24	; 0x09
    3872:	9a 87       	std	Y+10, r25	; 0x0a
    3874:	ab 87       	std	Y+11, r26	; 0x0b
    3876:	bc 87       	std	Y+12, r27	; 0x0c
    3878:	51 e0       	ldi	r21, 0x01	; 1
    387a:	c5 1a       	sub	r12, r21
    387c:	d1 08       	sbc	r13, r1
    387e:	e1 08       	sbc	r14, r1
    3880:	f1 08       	sbc	r15, r1
    3882:	b9 f4       	brne	.+46     	; 0x38b2 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2f0>
    3884:	e2 e8       	ldi	r30, 0x82	; 130
    3886:	8e 2e       	mov	r8, r30
    3888:	99 24       	eor	r9, r9
    388a:	93 94       	inc	r9
    388c:	a1 2c       	mov	r10, r1
    388e:	b1 2c       	mov	r11, r1
    3890:	69 89       	ldd	r22, Y+17	; 0x11
    3892:	7a 89       	ldd	r23, Y+18	; 0x12
    3894:	8b 89       	ldd	r24, Y+19	; 0x13
    3896:	9c 89       	ldd	r25, Y+20	; 0x14
    3898:	2d 85       	ldd	r18, Y+13	; 0x0d
    389a:	3e 85       	ldd	r19, Y+14	; 0x0e
    389c:	4f 85       	ldd	r20, Y+15	; 0x0f
    389e:	58 89       	ldd	r21, Y+16	; 0x10
    38a0:	62 1b       	sub	r22, r18
    38a2:	73 0b       	sbc	r23, r19
    38a4:	84 0b       	sbc	r24, r20
    38a6:	95 0b       	sbc	r25, r21
    38a8:	69 8b       	std	Y+17, r22	; 0x11
    38aa:	7a 8b       	std	Y+18, r23	; 0x12
    38ac:	8b 8b       	std	Y+19, r24	; 0x13
    38ae:	9c 8b       	std	Y+20, r25	; 0x14
    38b0:	70 cf       	rjmp	.-288    	; 0x3792 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x1d0>
    38b2:	6d 89       	ldd	r22, Y+21	; 0x15
    38b4:	7e 89       	ldd	r23, Y+22	; 0x16
    38b6:	8f 89       	ldd	r24, Y+23	; 0x17
    38b8:	98 8d       	ldd	r25, Y+24	; 0x18
    38ba:	a7 01       	movw	r20, r14
    38bc:	96 01       	movw	r18, r12
    38be:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__udivmodsi4>
    38c2:	49 01       	movw	r8, r18
    38c4:	5a 01       	movw	r10, r20
    38c6:	e4 cf       	rjmp	.-56     	; 0x3890 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x2ce>
    38c8:	c3 01       	movw	r24, r6
    38ca:	b2 01       	movw	r22, r4
    38cc:	25 e0       	ldi	r18, 0x05	; 5
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e0       	ldi	r20, 0x00	; 0
    38d2:	50 e0       	ldi	r21, 0x00	; 0
    38d4:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__udivmodsi4>
    38d8:	21 15       	cp	r18, r1
    38da:	31 05       	cpc	r19, r1
    38dc:	41 05       	cpc	r20, r1
    38de:	51 05       	cpc	r21, r1
    38e0:	21 f4       	brne	.+8      	; 0x38ea <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x328>
    38e2:	21 e0       	ldi	r18, 0x01	; 1
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	40 e0       	ldi	r20, 0x00	; 0
    38e8:	50 e0       	ldi	r21, 0x00	; 0
    38ea:	73 01       	movw	r14, r6
    38ec:	62 01       	movw	r12, r4
    38ee:	61 e0       	ldi	r22, 0x01	; 1
    38f0:	c6 1a       	sub	r12, r22
    38f2:	d1 08       	sbc	r13, r1
    38f4:	e1 08       	sbc	r14, r1
    38f6:	f1 08       	sbc	r15, r1
    38f8:	c2 1a       	sub	r12, r18
    38fa:	d3 0a       	sbc	r13, r19
    38fc:	e4 0a       	sbc	r14, r20
    38fe:	f5 0a       	sbc	r15, r21
    3900:	71 e0       	ldi	r23, 0x01	; 1
    3902:	c7 16       	cp	r12, r23
    3904:	d7 06       	cpc	r13, r23
    3906:	e1 04       	cpc	r14, r1
    3908:	f1 04       	cpc	r15, r1
    390a:	78 f0       	brcs	.+30     	; 0x392a <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x368>
    390c:	da 01       	movw	r26, r20
    390e:	c9 01       	movw	r24, r18
    3910:	91 50       	subi	r25, 0x01	; 1
    3912:	a1 09       	sbc	r26, r1
    3914:	b1 09       	sbc	r27, r1
    3916:	a7 01       	movw	r20, r14
    3918:	96 01       	movw	r18, r12
    391a:	28 0f       	add	r18, r24
    391c:	39 1f       	adc	r19, r25
    391e:	4a 1f       	adc	r20, r26
    3920:	5b 1f       	adc	r21, r27
    3922:	c1 2c       	mov	r12, r1
    3924:	d1 2c       	mov	r13, r1
    3926:	76 01       	movw	r14, r12
    3928:	d3 94       	inc	r13
    392a:	a9 a5       	ldd	r26, Y+41	; 0x29
    392c:	ba a5       	ldd	r27, Y+42	; 0x2a
    392e:	1e 96       	adiw	r26, 0x0e	; 14
    3930:	1c 93       	st	X, r17
    3932:	0e 93       	st	-X, r16
    3934:	1d 97       	sbiw	r26, 0x0d	; 13
    3936:	50 96       	adiw	r26, 0x10	; 16
    3938:	dc 92       	st	X, r13
    393a:	ce 92       	st	-X, r12
    393c:	1f 97       	sbiw	r26, 0x0f	; 15
    393e:	51 96       	adiw	r26, 0x11	; 17
    3940:	2c 93       	st	X, r18
    3942:	51 97       	sbiw	r26, 0x11	; 17
    3944:	52 96       	adiw	r26, 0x12	; 18
    3946:	2c 93       	st	X, r18
    3948:	98 01       	movw	r18, r16
    394a:	a1 01       	movw	r20, r2
    394c:	c3 01       	movw	r24, r6
    394e:	b2 01       	movw	r22, r4
    3950:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <__mulsi3>
    3954:	9b 01       	movw	r18, r22
    3956:	ac 01       	movw	r20, r24
    3958:	6d 85       	ldd	r22, Y+13	; 0x0d
    395a:	7e 85       	ldd	r23, Y+14	; 0x0e
    395c:	8f 85       	ldd	r24, Y+15	; 0x0f
    395e:	98 89       	ldd	r25, Y+16	; 0x10
    3960:	74 c1       	rjmp	.+744    	; 0x3c4a <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x688>
    3962:	20 2f       	mov	r18, r16
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	40 e0       	ldi	r20, 0x00	; 0
    3968:	50 e0       	ldi	r21, 0x00	; 0
    396a:	2d 8f       	std	Y+29, r18	; 0x1d
    396c:	3e 8f       	std	Y+30, r19	; 0x1e
    396e:	4f 8f       	std	Y+31, r20	; 0x1f
    3970:	58 a3       	std	Y+32, r21	; 0x20
    3972:	2d 85       	ldd	r18, Y+13	; 0x0d
    3974:	3e 85       	ldd	r19, Y+14	; 0x0e
    3976:	4f 85       	ldd	r20, Y+15	; 0x0f
    3978:	58 89       	ldd	r21, Y+16	; 0x10
    397a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    397c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    397e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3980:	98 a1       	ldd	r25, Y+32	; 0x20
    3982:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <__mulsi3>
    3986:	69 8f       	std	Y+25, r22	; 0x19
    3988:	7a 8f       	std	Y+26, r23	; 0x1a
    398a:	8b 8f       	std	Y+27, r24	; 0x1b
    398c:	9c 8f       	std	Y+28, r25	; 0x1c
    398e:	69 81       	ldd	r22, Y+1	; 0x01
    3990:	7a 81       	ldd	r23, Y+2	; 0x02
    3992:	8b 81       	ldd	r24, Y+3	; 0x03
    3994:	9c 81       	ldd	r25, Y+4	; 0x04
    3996:	29 8d       	ldd	r18, Y+25	; 0x19
    3998:	3a 8d       	ldd	r19, Y+26	; 0x1a
    399a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    399c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    399e:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__udivmodsi4>
    39a2:	2d a3       	std	Y+37, r18	; 0x25
    39a4:	3e a3       	std	Y+38, r19	; 0x26
    39a6:	4f a3       	std	Y+39, r20	; 0x27
    39a8:	58 a7       	std	Y+40, r21	; 0x28
    39aa:	69 01       	movw	r12, r18
    39ac:	7a 01       	movw	r14, r20
    39ae:	32 e0       	ldi	r19, 0x02	; 2
    39b0:	f6 94       	lsr	r15
    39b2:	e7 94       	ror	r14
    39b4:	d7 94       	ror	r13
    39b6:	c7 94       	ror	r12
    39b8:	3a 95       	dec	r19
    39ba:	d1 f7       	brne	.-12     	; 0x39b0 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x3ee>
    39bc:	09 8d       	ldd	r16, Y+25	; 0x19
    39be:	1a 8d       	ldd	r17, Y+26	; 0x1a
    39c0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    39c2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    39c4:	42 e0       	ldi	r20, 0x02	; 2
    39c6:	00 0f       	add	r16, r16
    39c8:	11 1f       	adc	r17, r17
    39ca:	22 1f       	adc	r18, r18
    39cc:	33 1f       	adc	r19, r19
    39ce:	4a 95       	dec	r20
    39d0:	d1 f7       	brne	.-12     	; 0x39c6 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x404>
    39d2:	0d 8b       	std	Y+21, r16	; 0x15
    39d4:	1e 8b       	std	Y+22, r17	; 0x16
    39d6:	2f 8b       	std	Y+23, r18	; 0x17
    39d8:	38 8f       	std	Y+24, r19	; 0x18
    39da:	54 e0       	ldi	r21, 0x04	; 4
    39dc:	45 2e       	mov	r4, r21
    39de:	51 2c       	mov	r5, r1
    39e0:	61 2c       	mov	r6, r1
    39e2:	71 2c       	mov	r7, r1
    39e4:	60 e3       	ldi	r22, 0x30	; 48
    39e6:	86 2e       	mov	r8, r22
    39e8:	91 2c       	mov	r9, r1
    39ea:	a1 2c       	mov	r10, r1
    39ec:	b1 2c       	mov	r11, r1
    39ee:	00 e0       	ldi	r16, 0x00	; 0
    39f0:	11 e0       	ldi	r17, 0x01	; 1
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	09 87       	std	Y+9, r16	; 0x09
    39f8:	1a 87       	std	Y+10, r17	; 0x0a
    39fa:	2b 87       	std	Y+11, r18	; 0x0b
    39fc:	3c 87       	std	Y+12, r19	; 0x0c
    39fe:	0f ef       	ldi	r16, 0xFF	; 255
    3a00:	1f ef       	ldi	r17, 0xFF	; 255
    3a02:	98 01       	movw	r18, r16
    3a04:	09 8b       	std	Y+17, r16	; 0x11
    3a06:	1a 8b       	std	Y+18, r17	; 0x12
    3a08:	2b 8b       	std	Y+19, r18	; 0x13
    3a0a:	3c 8b       	std	Y+20, r19	; 0x14
    3a0c:	c1 14       	cp	r12, r1
    3a0e:	d1 04       	cpc	r13, r1
    3a10:	e1 04       	cpc	r14, r1
    3a12:	f1 04       	cpc	r15, r1
    3a14:	09 f4       	brne	.+2      	; 0x3a18 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x456>
    3a16:	8a c0       	rjmp	.+276    	; 0x3b2c <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x56a>
    3a18:	11 e0       	ldi	r17, 0x01	; 1
    3a1a:	c1 16       	cp	r12, r17
    3a1c:	d1 06       	cpc	r13, r17
    3a1e:	e1 04       	cpc	r14, r1
    3a20:	f1 04       	cpc	r15, r1
    3a22:	08 f0       	brcs	.+2      	; 0x3a26 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x464>
    3a24:	5d c0       	rjmp	.+186    	; 0x3ae0 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x51e>
    3a26:	2d 89       	ldd	r18, Y+21	; 0x15
    3a28:	3e 89       	ldd	r19, Y+22	; 0x16
    3a2a:	4f 89       	ldd	r20, Y+23	; 0x17
    3a2c:	58 8d       	ldd	r21, Y+24	; 0x18
    3a2e:	c7 01       	movw	r24, r14
    3a30:	b6 01       	movw	r22, r12
    3a32:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <__mulsi3>
    3a36:	6f a7       	std	Y+47, r22	; 0x2f
    3a38:	78 ab       	std	Y+48, r23	; 0x30
    3a3a:	89 ab       	std	Y+49, r24	; 0x31
    3a3c:	9a ab       	std	Y+50, r25	; 0x32
    3a3e:	09 81       	ldd	r16, Y+1	; 0x01
    3a40:	1a 81       	ldd	r17, Y+2	; 0x02
    3a42:	2b 81       	ldd	r18, Y+3	; 0x03
    3a44:	3c 81       	ldd	r19, Y+4	; 0x04
    3a46:	06 1b       	sub	r16, r22
    3a48:	17 0b       	sbc	r17, r23
    3a4a:	28 0b       	sbc	r18, r24
    3a4c:	39 0b       	sbc	r19, r25
    3a4e:	0b a7       	std	Y+43, r16	; 0x2b
    3a50:	1c a7       	std	Y+44, r17	; 0x2c
    3a52:	2d a7       	std	Y+45, r18	; 0x2d
    3a54:	3e a7       	std	Y+46, r19	; 0x2e
    3a56:	49 89       	ldd	r20, Y+17	; 0x11
    3a58:	5a 89       	ldd	r21, Y+18	; 0x12
    3a5a:	6b 89       	ldd	r22, Y+19	; 0x13
    3a5c:	7c 89       	ldd	r23, Y+20	; 0x14
    3a5e:	40 17       	cp	r20, r16
    3a60:	51 07       	cpc	r21, r17
    3a62:	62 07       	cpc	r22, r18
    3a64:	73 07       	cpc	r23, r19
    3a66:	50 f0       	brcs	.+20     	; 0x3a7c <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x4ba>
    3a68:	53 01       	movw	r10, r6
    3a6a:	42 01       	movw	r8, r4
    3a6c:	c9 86       	std	Y+9, r12	; 0x09
    3a6e:	da 86       	std	Y+10, r13	; 0x0a
    3a70:	eb 86       	std	Y+11, r14	; 0x0b
    3a72:	fc 86       	std	Y+12, r15	; 0x0c
    3a74:	09 8b       	std	Y+17, r16	; 0x11
    3a76:	1a 8b       	std	Y+18, r17	; 0x12
    3a78:	2b 8b       	std	Y+19, r18	; 0x13
    3a7a:	3c 8b       	std	Y+20, r19	; 0x14
    3a7c:	c1 14       	cp	r12, r1
    3a7e:	51 e0       	ldi	r21, 0x01	; 1
    3a80:	d5 06       	cpc	r13, r21
    3a82:	e1 04       	cpc	r14, r1
    3a84:	f1 04       	cpc	r15, r1
    3a86:	61 f1       	breq	.+88     	; 0x3ae0 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x51e>
    3a88:	6f ef       	ldi	r22, 0xFF	; 255
    3a8a:	c6 1a       	sub	r12, r22
    3a8c:	d6 0a       	sbc	r13, r22
    3a8e:	e6 0a       	sbc	r14, r22
    3a90:	f6 0a       	sbc	r15, r22
    3a92:	8d 89       	ldd	r24, Y+21	; 0x15
    3a94:	9e 89       	ldd	r25, Y+22	; 0x16
    3a96:	af 89       	ldd	r26, Y+23	; 0x17
    3a98:	b8 8d       	ldd	r27, Y+24	; 0x18
    3a9a:	0f a5       	ldd	r16, Y+47	; 0x2f
    3a9c:	18 a9       	ldd	r17, Y+48	; 0x30
    3a9e:	29 a9       	ldd	r18, Y+49	; 0x31
    3aa0:	3a a9       	ldd	r19, Y+50	; 0x32
    3aa2:	80 0f       	add	r24, r16
    3aa4:	91 1f       	adc	r25, r17
    3aa6:	a2 1f       	adc	r26, r18
    3aa8:	b3 1f       	adc	r27, r19
    3aaa:	09 81       	ldd	r16, Y+1	; 0x01
    3aac:	1a 81       	ldd	r17, Y+2	; 0x02
    3aae:	2b 81       	ldd	r18, Y+3	; 0x03
    3ab0:	3c 81       	ldd	r19, Y+4	; 0x04
    3ab2:	80 1b       	sub	r24, r16
    3ab4:	91 0b       	sbc	r25, r17
    3ab6:	a2 0b       	sbc	r26, r18
    3ab8:	b3 0b       	sbc	r27, r19
    3aba:	09 89       	ldd	r16, Y+17	; 0x11
    3abc:	1a 89       	ldd	r17, Y+18	; 0x12
    3abe:	2b 89       	ldd	r18, Y+19	; 0x13
    3ac0:	3c 89       	ldd	r19, Y+20	; 0x14
    3ac2:	08 17       	cp	r16, r24
    3ac4:	19 07       	cpc	r17, r25
    3ac6:	2a 07       	cpc	r18, r26
    3ac8:	3b 07       	cpc	r19, r27
    3aca:	50 f0       	brcs	.+20     	; 0x3ae0 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x51e>
    3acc:	53 01       	movw	r10, r6
    3ace:	42 01       	movw	r8, r4
    3ad0:	c9 86       	std	Y+9, r12	; 0x09
    3ad2:	da 86       	std	Y+10, r13	; 0x0a
    3ad4:	eb 86       	std	Y+11, r14	; 0x0b
    3ad6:	fc 86       	std	Y+12, r15	; 0x0c
    3ad8:	89 8b       	std	Y+17, r24	; 0x11
    3ada:	9a 8b       	std	Y+18, r25	; 0x12
    3adc:	ab 8b       	std	Y+19, r26	; 0x13
    3ade:	bc 8b       	std	Y+20, r27	; 0x14
    3ae0:	1f ef       	ldi	r17, 0xFF	; 255
    3ae2:	41 1a       	sub	r4, r17
    3ae4:	51 0a       	sbc	r5, r17
    3ae6:	61 0a       	sbc	r6, r17
    3ae8:	71 0a       	sbc	r7, r17
    3aea:	6d a1       	ldd	r22, Y+37	; 0x25
    3aec:	7e a1       	ldd	r23, Y+38	; 0x26
    3aee:	8f a1       	ldd	r24, Y+39	; 0x27
    3af0:	98 a5       	ldd	r25, Y+40	; 0x28
    3af2:	a3 01       	movw	r20, r6
    3af4:	92 01       	movw	r18, r4
    3af6:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__udivmodsi4>
    3afa:	69 01       	movw	r12, r18
    3afc:	7a 01       	movw	r14, r20
    3afe:	0d 89       	ldd	r16, Y+21	; 0x15
    3b00:	1e 89       	ldd	r17, Y+22	; 0x16
    3b02:	2f 89       	ldd	r18, Y+23	; 0x17
    3b04:	38 8d       	ldd	r19, Y+24	; 0x18
    3b06:	49 8d       	ldd	r20, Y+25	; 0x19
    3b08:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3b0a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3b0c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3b0e:	04 0f       	add	r16, r20
    3b10:	15 1f       	adc	r17, r21
    3b12:	26 1f       	adc	r18, r22
    3b14:	37 1f       	adc	r19, r23
    3b16:	0d 8b       	std	Y+21, r16	; 0x15
    3b18:	1e 8b       	std	Y+22, r17	; 0x16
    3b1a:	2f 8b       	std	Y+23, r18	; 0x17
    3b1c:	38 8f       	std	Y+24, r19	; 0x18
    3b1e:	51 e3       	ldi	r21, 0x31	; 49
    3b20:	45 16       	cp	r4, r21
    3b22:	51 04       	cpc	r5, r1
    3b24:	61 04       	cpc	r6, r1
    3b26:	71 04       	cpc	r7, r1
    3b28:	09 f0       	breq	.+2      	; 0x3b2c <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x56a>
    3b2a:	70 cf       	rjmp	.-288    	; 0x3a0c <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x44a>
    3b2c:	c5 01       	movw	r24, r10
    3b2e:	b4 01       	movw	r22, r8
    3b30:	25 e0       	ldi	r18, 0x05	; 5
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	40 e0       	ldi	r20, 0x00	; 0
    3b36:	50 e0       	ldi	r21, 0x00	; 0
    3b38:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__udivmodsi4>
    3b3c:	21 15       	cp	r18, r1
    3b3e:	31 05       	cpc	r19, r1
    3b40:	41 05       	cpc	r20, r1
    3b42:	51 05       	cpc	r21, r1
    3b44:	21 f4       	brne	.+8      	; 0x3b4e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x58c>
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e0       	ldi	r20, 0x00	; 0
    3b4c:	50 e0       	ldi	r21, 0x00	; 0
    3b4e:	d5 01       	movw	r26, r10
    3b50:	c4 01       	movw	r24, r8
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	a1 09       	sbc	r26, r1
    3b56:	b1 09       	sbc	r27, r1
    3b58:	82 1b       	sub	r24, r18
    3b5a:	93 0b       	sbc	r25, r19
    3b5c:	a4 0b       	sbc	r26, r20
    3b5e:	b5 0b       	sbc	r27, r21
    3b60:	81 32       	cpi	r24, 0x21	; 33
    3b62:	91 05       	cpc	r25, r1
    3b64:	a1 05       	cpc	r26, r1
    3b66:	b1 05       	cpc	r27, r1
    3b68:	80 f0       	brcs	.+32     	; 0x3b8a <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x5c8>
    3b6a:	ba 01       	movw	r22, r20
    3b6c:	a9 01       	movw	r20, r18
    3b6e:	40 52       	subi	r20, 0x20	; 32
    3b70:	51 09       	sbc	r21, r1
    3b72:	61 09       	sbc	r22, r1
    3b74:	71 09       	sbc	r23, r1
    3b76:	9a 01       	movw	r18, r20
    3b78:	ab 01       	movw	r20, r22
    3b7a:	28 0f       	add	r18, r24
    3b7c:	39 1f       	adc	r19, r25
    3b7e:	4a 1f       	adc	r20, r26
    3b80:	5b 1f       	adc	r21, r27
    3b82:	80 e2       	ldi	r24, 0x20	; 32
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	a0 e0       	ldi	r26, 0x00	; 0
    3b88:	b0 e0       	ldi	r27, 0x00	; 0
    3b8a:	09 85       	ldd	r16, Y+9	; 0x09
    3b8c:	1a 85       	ldd	r17, Y+10	; 0x0a
    3b8e:	08 9f       	mul	r16, r24
    3b90:	b0 01       	movw	r22, r0
    3b92:	09 9f       	mul	r16, r25
    3b94:	70 0d       	add	r23, r0
    3b96:	18 9f       	mul	r17, r24
    3b98:	70 0d       	add	r23, r0
    3b9a:	11 24       	eor	r1, r1
    3b9c:	60 34       	cpi	r22, 0x40	; 64
    3b9e:	71 05       	cpc	r23, r1
    3ba0:	08 f0       	brcs	.+2      	; 0x3ba4 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x5e2>
    3ba2:	6f e3       	ldi	r22, 0x3F	; 63
    3ba4:	e9 a5       	ldd	r30, Y+41	; 0x29
    3ba6:	fa a5       	ldd	r31, Y+42	; 0x2a
    3ba8:	64 8b       	std	Z+20, r22	; 0x14
    3baa:	82 87       	std	Z+10, r24	; 0x0a
    3bac:	23 87       	std	Z+11, r18	; 0x0b
    3bae:	24 87       	std	Z+12, r18	; 0x0c
    3bb0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3bb2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3bb4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3bb6:	58 a1       	ldd	r21, Y+32	; 0x20
    3bb8:	c5 01       	movw	r24, r10
    3bba:	b4 01       	movw	r22, r8
    3bbc:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <__mulsi3>
    3bc0:	6b 01       	movw	r12, r22
    3bc2:	7c 01       	movw	r14, r24
    3bc4:	25 e0       	ldi	r18, 0x05	; 5
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	40 e0       	ldi	r20, 0x00	; 0
    3bca:	50 e0       	ldi	r21, 0x00	; 0
    3bcc:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__udivmodsi4>
    3bd0:	21 15       	cp	r18, r1
    3bd2:	31 05       	cpc	r19, r1
    3bd4:	41 05       	cpc	r20, r1
    3bd6:	51 05       	cpc	r21, r1
    3bd8:	21 f4       	brne	.+8      	; 0x3be2 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x620>
    3bda:	21 e0       	ldi	r18, 0x01	; 1
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e0       	ldi	r20, 0x00	; 0
    3be0:	50 e0       	ldi	r21, 0x00	; 0
    3be2:	d7 01       	movw	r26, r14
    3be4:	c6 01       	movw	r24, r12
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	a1 09       	sbc	r26, r1
    3bea:	b1 09       	sbc	r27, r1
    3bec:	82 1b       	sub	r24, r18
    3bee:	93 0b       	sbc	r25, r19
    3bf0:	a4 0b       	sbc	r26, r20
    3bf2:	b5 0b       	sbc	r27, r21
    3bf4:	81 30       	cpi	r24, 0x01	; 1
    3bf6:	f1 e0       	ldi	r31, 0x01	; 1
    3bf8:	9f 07       	cpc	r25, r31
    3bfa:	a1 05       	cpc	r26, r1
    3bfc:	b1 05       	cpc	r27, r1
    3bfe:	78 f0       	brcs	.+30     	; 0x3c1e <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x65c>
    3c00:	ba 01       	movw	r22, r20
    3c02:	a9 01       	movw	r20, r18
    3c04:	51 50       	subi	r21, 0x01	; 1
    3c06:	61 09       	sbc	r22, r1
    3c08:	71 09       	sbc	r23, r1
    3c0a:	9a 01       	movw	r18, r20
    3c0c:	ab 01       	movw	r20, r22
    3c0e:	28 0f       	add	r18, r24
    3c10:	39 1f       	adc	r19, r25
    3c12:	4a 1f       	adc	r20, r26
    3c14:	5b 1f       	adc	r21, r27
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	91 e0       	ldi	r25, 0x01	; 1
    3c1a:	a0 e0       	ldi	r26, 0x00	; 0
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	e9 a5       	ldd	r30, Y+41	; 0x29
    3c20:	fa a5       	ldd	r31, Y+42	; 0x2a
    3c22:	16 87       	std	Z+14, r17	; 0x0e
    3c24:	05 87       	std	Z+13, r16	; 0x0d
    3c26:	90 8b       	std	Z+16, r25	; 0x10
    3c28:	87 87       	std	Z+15, r24	; 0x0f
    3c2a:	21 8b       	std	Z+17, r18	; 0x11
    3c2c:	22 8b       	std	Z+18, r18	; 0x12
    3c2e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c30:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c32:	4f 85       	ldd	r20, Y+15	; 0x0f
    3c34:	58 89       	ldd	r21, Y+16	; 0x10
    3c36:	69 85       	ldd	r22, Y+9	; 0x09
    3c38:	7a 85       	ldd	r23, Y+10	; 0x0a
    3c3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c3e:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <__mulsi3>
    3c42:	9b 01       	movw	r18, r22
    3c44:	ac 01       	movw	r20, r24
    3c46:	c7 01       	movw	r24, r14
    3c48:	b6 01       	movw	r22, r12
    3c4a:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <__mulsi3>
    3c4e:	2b 01       	movw	r4, r22
    3c50:	3c 01       	movw	r6, r24
    3c52:	09 81       	ldd	r16, Y+1	; 0x01
    3c54:	1a 81       	ldd	r17, Y+2	; 0x02
    3c56:	2b 81       	ldd	r18, Y+3	; 0x03
    3c58:	3c 81       	ldd	r19, Y+4	; 0x04
    3c5a:	60 17       	cp	r22, r16
    3c5c:	71 07       	cpc	r23, r17
    3c5e:	82 07       	cpc	r24, r18
    3c60:	93 07       	cpc	r25, r19
    3c62:	38 f4       	brcc	.+14     	; 0x3c72 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x6b0>
    3c64:	d9 01       	movw	r26, r18
    3c66:	c8 01       	movw	r24, r16
    3c68:	84 19       	sub	r24, r4
    3c6a:	95 09       	sbc	r25, r5
    3c6c:	a6 09       	sbc	r26, r6
    3c6e:	b7 09       	sbc	r27, r7
    3c70:	0a c0       	rjmp	.+20     	; 0x3c86 <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x6c4>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	09 81       	ldd	r16, Y+1	; 0x01
    3c78:	1a 81       	ldd	r17, Y+2	; 0x02
    3c7a:	2b 81       	ldd	r18, Y+3	; 0x03
    3c7c:	3c 81       	ldd	r19, Y+4	; 0x04
    3c7e:	80 1b       	sub	r24, r16
    3c80:	91 0b       	sbc	r25, r17
    3c82:	a2 0b       	sbc	r26, r18
    3c84:	b3 0b       	sbc	r27, r19
    3c86:	8c 01       	movw	r16, r24
    3c88:	9d 01       	movw	r18, r26
    3c8a:	40 e0       	ldi	r20, 0x00	; 0
    3c8c:	50 e0       	ldi	r21, 0x00	; 0
    3c8e:	ba 01       	movw	r22, r20
    3c90:	89 83       	std	Y+1, r24	; 0x01
    3c92:	1a 83       	std	Y+2, r17	; 0x02
    3c94:	2b 83       	std	Y+3, r18	; 0x03
    3c96:	3c 83       	std	Y+4, r19	; 0x04
    3c98:	4d 83       	std	Y+5, r20	; 0x05
    3c9a:	5e 83       	std	Y+6, r21	; 0x06
    3c9c:	6f 83       	std	Y+7, r22	; 0x07
    3c9e:	78 87       	std	Y+8, r23	; 0x08
    3ca0:	80 e4       	ldi	r24, 0x40	; 64
    3ca2:	a8 2e       	mov	r10, r24
    3ca4:	92 e4       	ldi	r25, 0x42	; 66
    3ca6:	b9 2e       	mov	r11, r25
    3ca8:	2f e0       	ldi	r18, 0x0F	; 15
    3caa:	c2 2e       	mov	r12, r18
    3cac:	d1 2c       	mov	r13, r1
    3cae:	e1 2c       	mov	r14, r1
    3cb0:	f1 2c       	mov	r15, r1
    3cb2:	00 e0       	ldi	r16, 0x00	; 0
    3cb4:	10 e0       	ldi	r17, 0x00	; 0
    3cb6:	29 81       	ldd	r18, Y+1	; 0x01
    3cb8:	3a 81       	ldd	r19, Y+2	; 0x02
    3cba:	4b 81       	ldd	r20, Y+3	; 0x03
    3cbc:	5c 81       	ldd	r21, Y+4	; 0x04
    3cbe:	6d 81       	ldd	r22, Y+5	; 0x05
    3cc0:	7e 81       	ldd	r23, Y+6	; 0x06
    3cc2:	8f 81       	ldd	r24, Y+7	; 0x07
    3cc4:	98 85       	ldd	r25, Y+8	; 0x08
    3cc6:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <__muldi3>
    3cca:	79 01       	movw	r14, r18
    3ccc:	8a 01       	movw	r16, r20
    3cce:	1b 01       	movw	r2, r22
    3cd0:	4c 01       	movw	r8, r24
    3cd2:	c3 01       	movw	r24, r6
    3cd4:	b2 01       	movw	r22, r4
    3cd6:	29 a1       	ldd	r18, Y+33	; 0x21
    3cd8:	3a a1       	ldd	r19, Y+34	; 0x22
    3cda:	4b a1       	ldd	r20, Y+35	; 0x23
    3cdc:	5c a1       	ldd	r21, Y+36	; 0x24
    3cde:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__umulsidi3>
    3ce2:	59 01       	movw	r10, r18
    3ce4:	6a 01       	movw	r12, r20
    3ce6:	76 2e       	mov	r7, r22
    3ce8:	b7 2f       	mov	r27, r23
    3cea:	a8 2f       	mov	r26, r24
    3cec:	f9 2f       	mov	r31, r25
    3cee:	e1 e0       	ldi	r30, 0x01	; 1
    3cf0:	97 01       	movw	r18, r14
    3cf2:	a8 01       	movw	r20, r16
    3cf4:	b1 01       	movw	r22, r2
    3cf6:	c4 01       	movw	r24, r8
    3cf8:	e7 2c       	mov	r14, r7
    3cfa:	fb 2e       	mov	r15, r27
    3cfc:	0a 2f       	mov	r16, r26
    3cfe:	1f 2f       	mov	r17, r31
    3d00:	0e 94 48 27 	call	0x4e90	; 0x4e90 <__cmpdi2>
    3d04:	11 f0       	breq	.+4      	; 0x3d0a <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x748>
    3d06:	08 f0       	brcs	.+2      	; 0x3d0a <_ZN18ACAN2517FDSettingsC1ENS_10OscillatorEm17DataBitRateFactorm+0x748>
    3d08:	e0 e0       	ldi	r30, 0x00	; 0
    3d0a:	a9 a5       	ldd	r26, Y+41	; 0x29
    3d0c:	ba a5       	ldd	r27, Y+42	; 0x2a
    3d0e:	53 96       	adiw	r26, 0x13	; 19
    3d10:	ec 93       	st	X, r30
    3d12:	e2 96       	adiw	r28, 0x32	; 50
    3d14:	0f b6       	in	r0, 0x3f	; 63
    3d16:	f8 94       	cli
    3d18:	de bf       	out	0x3e, r29	; 62
    3d1a:	0f be       	out	0x3f, r0	; 63
    3d1c:	cd bf       	out	0x3d, r28	; 61
    3d1e:	df 91       	pop	r29
    3d20:	cf 91       	pop	r28
    3d22:	1f 91       	pop	r17
    3d24:	0f 91       	pop	r16
    3d26:	ff 90       	pop	r15
    3d28:	ef 90       	pop	r14
    3d2a:	df 90       	pop	r13
    3d2c:	cf 90       	pop	r12
    3d2e:	bf 90       	pop	r11
    3d30:	af 90       	pop	r10
    3d32:	9f 90       	pop	r9
    3d34:	8f 90       	pop	r8
    3d36:	7f 90       	pop	r7
    3d38:	6f 90       	pop	r6
    3d3a:	5f 90       	pop	r5
    3d3c:	4f 90       	pop	r4
    3d3e:	3f 90       	pop	r3
    3d40:	2f 90       	pop	r2
    3d42:	08 95       	ret

00003d44 <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv>:
    3d44:	cf 92       	push	r12
    3d46:	df 92       	push	r13
    3d48:	ef 92       	push	r14
    3d4a:	ff 92       	push	r15
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	21 85       	ldd	r18, Z+9	; 0x09
    3d50:	21 30       	cpi	r18, 0x01	; 1
    3d52:	d9 f0       	breq	.+54     	; 0x3d8a <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv+0x46>
    3d54:	a2 85       	ldd	r26, Z+10	; 0x0a
    3d56:	b0 e0       	ldi	r27, 0x00	; 0
    3d58:	11 96       	adiw	r26, 0x01	; 1
    3d5a:	83 85       	ldd	r24, Z+11	; 0x0b
    3d5c:	a8 0f       	add	r26, r24
    3d5e:	b1 1d       	adc	r27, r1
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <__usmulhisi3>
    3d66:	47 85       	ldd	r20, Z+15	; 0x0f
    3d68:	50 89       	ldd	r21, Z+16	; 0x10
    3d6a:	4f 5f       	subi	r20, 0xFF	; 255
    3d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d6e:	21 89       	ldd	r18, Z+17	; 0x11
    3d70:	42 0f       	add	r20, r18
    3d72:	51 1d       	adc	r21, r1
    3d74:	6a 01       	movw	r12, r20
    3d76:	e1 2c       	mov	r14, r1
    3d78:	f1 2c       	mov	r15, r1
    3d7a:	21 e0       	ldi	r18, 0x01	; 1
    3d7c:	6c 15       	cp	r22, r12
    3d7e:	7d 05       	cpc	r23, r13
    3d80:	8e 05       	cpc	r24, r14
    3d82:	9f 05       	cpc	r25, r15
    3d84:	19 f0       	breq	.+6      	; 0x3d8c <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv+0x48>
    3d86:	20 e0       	ldi	r18, 0x00	; 0
    3d88:	01 c0       	rjmp	.+2      	; 0x3d8c <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv+0x48>
    3d8a:	21 e0       	ldi	r18, 0x01	; 1
    3d8c:	82 2f       	mov	r24, r18
    3d8e:	ff 90       	pop	r15
    3d90:	ef 90       	pop	r14
    3d92:	df 90       	pop	r13
    3d94:	cf 90       	pop	r12
    3d96:	08 95       	ret

00003d98 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv>:

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::CANBitSettingConsistency (void) const {
    3d98:	cf 92       	push	r12
    3d9a:	df 92       	push	r13
    3d9c:	ef 92       	push	r14
    3d9e:	ff 92       	push	r15
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	fc 01       	movw	r30, r24
  uint32_t errorCode = 0 ; // Means no error
//--- Bit rate prescaler
  if (mBitRatePrescaler == 0) {
    3da6:	85 85       	ldd	r24, Z+13	; 0x0d
    3da8:	96 85       	ldd	r25, Z+14	; 0x0e
    3daa:	00 97       	sbiw	r24, 0x00	; 0
    3dac:	49 f0       	breq	.+18     	; 0x3dc0 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x28>
    errorCode |= kBitRatePrescalerIsZero ;
  }else if (mBitRatePrescaler > MAX_BRP) {
    3dae:	81 30       	cpi	r24, 0x01	; 1
    3db0:	91 40       	sbci	r25, 0x01	; 1
    3db2:	58 f0       	brcs	.+22     	; 0x3dca <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x32>
    errorCode |= kBitRatePrescalerIsGreaterThan256 ;
    3db4:	92 e0       	ldi	r25, 0x02	; 2
    3db6:	c9 2e       	mov	r12, r25
    3db8:	d1 2c       	mov	r13, r1
    3dba:	e1 2c       	mov	r14, r1
    3dbc:	f1 2c       	mov	r15, r1
    3dbe:	08 c0       	rjmp	.+16     	; 0x3dd0 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x38>

uint32_t ACAN2517FDSettings::CANBitSettingConsistency (void) const {
  uint32_t errorCode = 0 ; // Means no error
//--- Bit rate prescaler
  if (mBitRatePrescaler == 0) {
    errorCode |= kBitRatePrescalerIsZero ;
    3dc0:	c1 2c       	mov	r12, r1
    3dc2:	d1 2c       	mov	r13, r1
    3dc4:	76 01       	movw	r14, r12
    3dc6:	c3 94       	inc	r12
    3dc8:	03 c0       	rjmp	.+6      	; 0x3dd0 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x38>
}

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::CANBitSettingConsistency (void) const {
  uint32_t errorCode = 0 ; // Means no error
    3dca:	c1 2c       	mov	r12, r1
    3dcc:	d1 2c       	mov	r13, r1
    3dce:	76 01       	movw	r14, r12
    errorCode |= kBitRatePrescalerIsZero ;
  }else if (mBitRatePrescaler > MAX_BRP) {
    errorCode |= kBitRatePrescalerIsGreaterThan256 ;
  }
//--- Arbitration Phase Segment 1
  if (mArbitrationPhaseSegment1 < 2) {
    3dd0:	27 85       	ldd	r18, Z+15	; 0x0f
    3dd2:	30 89       	ldd	r19, Z+16	; 0x10
    3dd4:	22 30       	cpi	r18, 0x02	; 2
    3dd6:	31 05       	cpc	r19, r1
    3dd8:	18 f4       	brcc	.+6      	; 0x3de0 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x48>
    errorCode |= kArbitrationPhaseSegment1IsLowerThan2 ;
    3dda:	68 94       	set
    3ddc:	c2 f8       	bld	r12, 2
    3dde:	06 c0       	rjmp	.+12     	; 0x3dec <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x54>
  }else if (mArbitrationPhaseSegment1 > MAX_ARBITRATION_PHASE_SEGMENT_1) {
    3de0:	21 30       	cpi	r18, 0x01	; 1
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	38 07       	cpc	r19, r24
    3de6:	10 f0       	brcs	.+4      	; 0x3dec <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x54>
    errorCode |= kArbitrationPhaseSegment1IsGreaterThan256 ;
    3de8:	68 94       	set
    3dea:	c3 f8       	bld	r12, 3
  }
//--- Arbitration Phase Segment 2
  if (mArbitrationPhaseSegment2 == 0) {
    3dec:	91 89       	ldd	r25, Z+17	; 0x11
    3dee:	91 11       	cpse	r25, r1
    3df0:	03 c0       	rjmp	.+6      	; 0x3df8 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x60>
    errorCode |= kArbitrationPhaseSegment2IsZero ;
    3df2:	68 94       	set
    3df4:	c4 f8       	bld	r12, 4
    3df6:	04 c0       	rjmp	.+8      	; 0x3e00 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x68>
  }else if (mArbitrationPhaseSegment2 > MAX_ARBITRATION_PHASE_SEGMENT_2) {
    3df8:	91 38       	cpi	r25, 0x81	; 129
    3dfa:	10 f0       	brcs	.+4      	; 0x3e00 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x68>
    errorCode |= kArbitrationPhaseSegment2IsGreaterThan128 ;
    3dfc:	68 94       	set
    3dfe:	c5 f8       	bld	r12, 5
  }
//--- Arbitration SJW
  if (mArbitrationSJW == 0) {
    3e00:	82 89       	ldd	r24, Z+18	; 0x12
    3e02:	81 11       	cpse	r24, r1
    3e04:	03 c0       	rjmp	.+6      	; 0x3e0c <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x74>
    errorCode |= kArbitrationSJWIsZero ;
    3e06:	68 94       	set
    3e08:	c6 f8       	bld	r12, 6
    3e0a:	04 c0       	rjmp	.+8      	; 0x3e14 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x7c>
  }else if (mArbitrationSJW > MAX_ARBITRATION_SJW) {
    3e0c:	81 38       	cpi	r24, 0x81	; 129
    3e0e:	10 f0       	brcs	.+4      	; 0x3e14 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x7c>
    errorCode |= kArbitrationSJWIsGreaterThan128 ;
    3e10:	68 94       	set
    3e12:	c7 f8       	bld	r12, 7
  }
  if (mArbitrationSJW > mArbitrationPhaseSegment1) {
    3e14:	48 2f       	mov	r20, r24
    3e16:	50 e0       	ldi	r21, 0x00	; 0
    3e18:	24 17       	cp	r18, r20
    3e1a:	35 07       	cpc	r19, r21
    3e1c:	10 f4       	brcc	.+4      	; 0x3e22 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x8a>
    errorCode |= kArbitrationSJWIsGreaterThanPhaseSegment1 ;
    3e1e:	68 94       	set
    3e20:	d0 f8       	bld	r13, 0
  }
  if (mArbitrationSJW > mArbitrationPhaseSegment2) {
    3e22:	98 17       	cp	r25, r24
    3e24:	10 f4       	brcc	.+4      	; 0x3e2a <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0x92>
    errorCode |= kArbitrationSJWIsGreaterThanPhaseSegment2 ;
    3e26:	68 94       	set
    3e28:	d1 f8       	bld	r13, 1
  }
//--- Data bit rate ?
  if (mDataBitRateFactor != DataBitRateFactor::x1) {
    3e2a:	81 85       	ldd	r24, Z+9	; 0x09
    3e2c:	81 30       	cpi	r24, 0x01	; 1
    3e2e:	71 f1       	breq	.+92     	; 0x3e8c <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xf4>
    3e30:	ef 01       	movw	r28, r30
    if (! dataBitRateIsAMultipleOfArbitrationBitRate ()) {
    3e32:	cf 01       	movw	r24, r30
    3e34:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <_ZNK18ACAN2517FDSettings42dataBitRateIsAMultipleOfArbitrationBitRateEv>
    3e38:	81 11       	cpse	r24, r1
    3e3a:	02 c0       	rjmp	.+4      	; 0x3e40 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xa8>
      errorCode |= kArbitrationTQCountNotDivisibleByDataBitRateFactor ;
    3e3c:	68 94       	set
    3e3e:	d2 f8       	bld	r13, 2
    }
  //--- Data Phase Segment 1
    if (mDataPhaseSegment1 < 2) {
    3e40:	2a 85       	ldd	r18, Y+10	; 0x0a
    3e42:	22 30       	cpi	r18, 0x02	; 2
    3e44:	18 f4       	brcc	.+6      	; 0x3e4c <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xb4>
      errorCode |= kDataPhaseSegment1IsLowerThan2 ;
    3e46:	68 94       	set
    3e48:	d3 f8       	bld	r13, 3
    3e4a:	04 c0       	rjmp	.+8      	; 0x3e54 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xbc>
    }else if (mDataPhaseSegment1 > MAX_DATA_PHASE_SEGMENT_1) {
    3e4c:	21 32       	cpi	r18, 0x21	; 33
    3e4e:	10 f0       	brcs	.+4      	; 0x3e54 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xbc>
      errorCode |= kDataPhaseSegment1IsGreaterThan32 ;
    3e50:	68 94       	set
    3e52:	d4 f8       	bld	r13, 4
    }
  //--- Data Phase Segment 2
    if (mDataPhaseSegment2 == 0) {
    3e54:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e56:	91 11       	cpse	r25, r1
    3e58:	03 c0       	rjmp	.+6      	; 0x3e60 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xc8>
      errorCode |= kDataPhaseSegment2IsZero ;
    3e5a:	68 94       	set
    3e5c:	d5 f8       	bld	r13, 5
    3e5e:	04 c0       	rjmp	.+8      	; 0x3e68 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xd0>
    }else if (mDataPhaseSegment2 > MAX_DATA_PHASE_SEGMENT_2) {
    3e60:	91 31       	cpi	r25, 0x11	; 17
    3e62:	10 f0       	brcs	.+4      	; 0x3e68 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xd0>
      errorCode |= kDataPhaseSegment2IsGreaterThan16 ;
    3e64:	68 94       	set
    3e66:	d6 f8       	bld	r13, 6
    }
  //--- Data SJW
    if (mDataSJW == 0) {
    3e68:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e6a:	81 11       	cpse	r24, r1
    3e6c:	03 c0       	rjmp	.+6      	; 0x3e74 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xdc>
      errorCode |= kDataSJWIsZero ;
    3e6e:	68 94       	set
    3e70:	d7 f8       	bld	r13, 7
    3e72:	0c c0       	rjmp	.+24     	; 0x3e8c <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xf4>
    }else if (mDataSJW > MAX_DATA_SJW) {
    3e74:	81 31       	cpi	r24, 0x11	; 17
    3e76:	10 f0       	brcs	.+4      	; 0x3e7c <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xe4>
      errorCode |= kDataSJWIsGreaterThan16 ;
    3e78:	68 94       	set
    3e7a:	e0 f8       	bld	r14, 0
    }
    if (mDataSJW > mDataPhaseSegment1) {
    3e7c:	28 17       	cp	r18, r24
    3e7e:	10 f4       	brcc	.+4      	; 0x3e84 <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xec>
      errorCode |= kDataSJWIsGreaterThanPhaseSegment1 ;
    3e80:	68 94       	set
    3e82:	e1 f8       	bld	r14, 1
    }
    if (mDataSJW > mDataPhaseSegment2) {
    3e84:	98 17       	cp	r25, r24
    3e86:	10 f4       	brcc	.+4      	; 0x3e8c <_ZNK18ACAN2517FDSettings24CANBitSettingConsistencyEv+0xf4>
      errorCode |= kDataSJWIsGreaterThanPhaseSegment2 ;
    3e88:	68 94       	set
    3e8a:	e2 f8       	bld	r14, 2
    }
  }
//---
  return errorCode ;
}
    3e8c:	c7 01       	movw	r24, r14
    3e8e:	b6 01       	movw	r22, r12
    3e90:	df 91       	pop	r29
    3e92:	cf 91       	pop	r28
    3e94:	ff 90       	pop	r15
    3e96:	ef 90       	pop	r14
    3e98:	df 90       	pop	r13
    3e9a:	cf 90       	pop	r12
    3e9c:	08 95       	ret

00003e9e <_ZNK18ACAN2517FDSettings8ramUsageEv>:

//----------------------------------------------------------------------------------------------------------------------
//   RAM USAGE
//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::ramUsage (void) const {
    3e9e:	cf 92       	push	r12
    3ea0:	df 92       	push	r13
    3ea2:	ef 92       	push	r14
    3ea4:	ff 92       	push	r15
    3ea6:	cf 93       	push	r28
    3ea8:	df 93       	push	r29
    3eaa:	fc 01       	movw	r30, r24

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3eac:	a1 a1       	ldd	r26, Z+33	; 0x21
    3eae:	b0 e0       	ldi	r27, 0x00	; 0
    3eb0:	ad 54       	subi	r26, 0x4D	; 77
    3eb2:	bd 4f       	sbci	r27, 0xFD	; 253
    3eb4:	ac 91       	ld	r26, X
//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::ramUsage (void) const {
  uint32_t result = 0 ;
//--- TXQ
  result += objectSizeForPayload (mControllerTXQBufferPayload) * mControllerTXQSize ;
    3eb6:	20 a1       	ldd	r18, Z+32	; 0x20

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3eb8:	c6 a1       	ldd	r28, Z+38	; 0x26
    3eba:	d0 e0       	ldi	r29, 0x00	; 0
    3ebc:	cd 54       	subi	r28, 0x4D	; 77
    3ebe:	dd 4f       	sbci	r29, 0xFD	; 253
    3ec0:	48 81       	ld	r20, Y
uint32_t ACAN2517FDSettings::ramUsage (void) const {
  uint32_t result = 0 ;
//--- TXQ
  result += objectSizeForPayload (mControllerTXQBufferPayload) * mControllerTXQSize ;
//--- Receive FIFO (FIFO #1)
  result += objectSizeForPayload (mControllerReceiveFIFOPayload) * mControllerReceiveFIFOSize ;
    3ec2:	57 a1       	ldd	r21, Z+39	; 0x27
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	b0 e0       	ldi	r27, 0x00	; 0
    3ec8:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>
    3ecc:	6b 01       	movw	r12, r22
    3ece:	7c 01       	movw	r14, r24
    3ed0:	25 2f       	mov	r18, r21
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	a4 2f       	mov	r26, r20
    3ed6:	b0 e0       	ldi	r27, 0x00	; 0
    3ed8:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>
    3edc:	c6 0e       	add	r12, r22
    3ede:	d7 1e       	adc	r13, r23
    3ee0:	e8 1e       	adc	r14, r24
    3ee2:	f9 1e       	adc	r15, r25

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3ee4:	a5 8d       	ldd	r26, Z+29	; 0x1d
    3ee6:	b0 e0       	ldi	r27, 0x00	; 0
    3ee8:	ad 54       	subi	r26, 0x4D	; 77
    3eea:	bd 4f       	sbci	r27, 0xFD	; 253
    3eec:	2c 91       	ld	r18, X
//--- TXQ
  result += objectSizeForPayload (mControllerTXQBufferPayload) * mControllerTXQSize ;
//--- Receive FIFO (FIFO #1)
  result += objectSizeForPayload (mControllerReceiveFIFOPayload) * mControllerReceiveFIFOSize ;
//--- Send FIFO (FIFO #2)
  result += objectSizeForPayload (mControllerTransmitFIFOPayload) * mControllerTransmitFIFOSize ;
    3eee:	a4 8d       	ldd	r26, Z+28	; 0x1c
//---
  return result ;
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	b0 e0       	ldi	r27, 0x00	; 0
    3ef4:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>
    3ef8:	6c 0d       	add	r22, r12
    3efa:	7d 1d       	adc	r23, r13
    3efc:	8e 1d       	adc	r24, r14
    3efe:	9f 1d       	adc	r25, r15
}
    3f00:	df 91       	pop	r29
    3f02:	cf 91       	pop	r28
    3f04:	ff 90       	pop	r15
    3f06:	ef 90       	pop	r14
    3f08:	df 90       	pop	r13
    3f0a:	cf 90       	pop	r12
    3f0c:	08 95       	ret

00003f0e <_ZN18ACAN2517FDSettings20objectSizeForPayloadENS_11PayloadSizeE>:

//----------------------------------------------------------------------------------------------------------------------

uint32_t ACAN2517FDSettings::objectSizeForPayload (const PayloadSize inPayload) {
  static const uint8_t kPayload [8] = {16, 20, 24, 28, 32, 40, 56, 72} ;
  return kPayload [inPayload] ;
    3f0e:	e8 2f       	mov	r30, r24
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	ed 54       	subi	r30, 0x4D	; 77
    3f14:	fd 4f       	sbci	r31, 0xFD	; 253
    3f16:	60 81       	ld	r22, Z
    3f18:	70 e0       	ldi	r23, 0x00	; 0
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
}
    3f1e:	08 95       	ret

00003f20 <_ZN8SPIClass5beginEv>:
    interruptMode = 0;
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    3f20:	cf 93       	push	r28
    3f22:	cf b7       	in	r28, 0x3f	; 63
    3f24:	f8 94       	cli
    3f26:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <_ZN8SPIClass11initializedE>
    3f2a:	81 11       	cpse	r24, r1
    3f2c:	27 c0       	rjmp	.+78     	; 0x3f7c <_ZN8SPIClass5beginEv+0x5c>
    3f2e:	e1 e3       	ldi	r30, 0x31	; 49
    3f30:	f1 e0       	ldi	r31, 0x01	; 1
    3f32:	84 91       	lpm	r24, Z
    3f34:	ed e1       	ldi	r30, 0x1D	; 29
    3f36:	f1 e0       	ldi	r31, 0x01	; 1
    3f38:	94 91       	lpm	r25, Z
    3f3a:	e8 2f       	mov	r30, r24
    3f3c:	f0 e0       	ldi	r31, 0x00	; 0
    3f3e:	ee 0f       	add	r30, r30
    3f40:	ff 1f       	adc	r31, r31
    3f42:	eb 5b       	subi	r30, 0xBB	; 187
    3f44:	fe 4f       	sbci	r31, 0xFE	; 254
    3f46:	a5 91       	lpm	r26, Z+
    3f48:	b4 91       	lpm	r27, Z
    3f4a:	ec 91       	ld	r30, X
    3f4c:	e9 23       	and	r30, r25
    3f4e:	21 f4       	brne	.+8      	; 0x3f58 <_ZN8SPIClass5beginEv+0x38>
    3f50:	61 e0       	ldi	r22, 0x01	; 1
    3f52:	8a e0       	ldi	r24, 0x0A	; 10
    3f54:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <digitalWrite>
    3f58:	61 e0       	ldi	r22, 0x01	; 1
    3f5a:	8a e0       	ldi	r24, 0x0A	; 10
    3f5c:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <pinMode>
    3f60:	8c b5       	in	r24, 0x2c	; 44
    3f62:	80 61       	ori	r24, 0x10	; 16
    3f64:	8c bd       	out	0x2c, r24	; 44
    3f66:	8c b5       	in	r24, 0x2c	; 44
    3f68:	80 64       	ori	r24, 0x40	; 64
    3f6a:	8c bd       	out	0x2c, r24	; 44
    3f6c:	61 e0       	ldi	r22, 0x01	; 1
    3f6e:	8d e0       	ldi	r24, 0x0D	; 13
    3f70:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <pinMode>
    3f74:	61 e0       	ldi	r22, 0x01	; 1
    3f76:	8b e0       	ldi	r24, 0x0B	; 11
    3f78:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <pinMode>
    3f7c:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <_ZN8SPIClass11initializedE>
    3f80:	8f 5f       	subi	r24, 0xFF	; 255
    3f82:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <_ZN8SPIClass11initializedE>
    3f86:	cf bf       	out	0x3f, r28	; 63
    3f88:	cf 91       	pop	r28
    3f8a:	08 95       	ret

00003f8c <_ZN8SPIClass14usingInterruptEh>:
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
  uint8_t sreg = SREG;
    3f8c:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3f8e:	f8 94       	cli
  switch (interruptNumber) {
    3f90:	88 23       	and	r24, r24
    3f92:	49 f0       	breq	.+18     	; 0x3fa6 <_ZN8SPIClass14usingInterruptEh+0x1a>
    3f94:	81 30       	cpi	r24, 0x01	; 1
    3f96:	11 f4       	brne	.+4      	; 0x3f9c <_ZN8SPIClass14usingInterruptEh+0x10>
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
  #endif
  #ifdef SPI_INT1_MASK
  case 1: mask = SPI_INT1_MASK; break;
    3f98:	82 e0       	ldi	r24, 0x02	; 2
    3f9a:	06 c0       	rjmp	.+12     	; 0x3fa8 <_ZN8SPIClass14usingInterruptEh+0x1c>
  #endif
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    3f9c:	82 e0       	ldi	r24, 0x02	; 2
    3f9e:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <_ZN8SPIClass13interruptModeE>
  #endif
#endif

void SPIClass::usingInterrupt(uint8_t interruptNumber)
{
  uint8_t mask = 0;
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
  #ifdef SPI_INT7_MASK
  case 7: mask = SPI_INT7_MASK; break;
  #endif
  default:
    interruptMode = 2;
    break;
    3fa4:	01 c0       	rjmp	.+2      	; 0x3fa8 <_ZN8SPIClass14usingInterruptEh+0x1c>
  uint8_t mask = 0;
  uint8_t sreg = SREG;
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
  switch (interruptNumber) {
  #ifdef SPI_INT0_MASK
  case 0: mask = SPI_INT0_MASK; break;
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
  #endif
  default:
    interruptMode = 2;
    break;
  }
  interruptMask |= mask;
    3fa8:	20 91 7e 05 	lds	r18, 0x057E	; 0x80057e <_ZN8SPIClass13interruptMaskE>
    3fac:	82 2b       	or	r24, r18
    3fae:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <_ZN8SPIClass13interruptMaskE>
  if (!interruptMode)
    3fb2:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <_ZN8SPIClass13interruptModeE>
    3fb6:	81 11       	cpse	r24, r1
    3fb8:	03 c0       	rjmp	.+6      	; 0x3fc0 <_ZN8SPIClass14usingInterruptEh+0x34>
    interruptMode = 1;
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <_ZN8SPIClass13interruptModeE>
  SREG = sreg;
    3fc0:	9f bf       	out	0x3f, r25	; 63
    3fc2:	08 95       	ret

00003fc4 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3fc4:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <_ZN7TwoWire14rxBufferLengthE>
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	20 91 b7 05 	lds	r18, 0x05B7	; 0x8005b7 <_ZN7TwoWire13rxBufferIndexE>
    3fce:	82 1b       	sub	r24, r18
    3fd0:	91 09       	sbc	r25, r1
    3fd2:	08 95       	ret

00003fd4 <_ZN7TwoWire4readEv>:
    3fd4:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <_ZN7TwoWire13rxBufferIndexE>
    3fd8:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <_ZN7TwoWire14rxBufferLengthE>
    3fdc:	98 17       	cp	r25, r24
    3fde:	50 f4       	brcc	.+20     	; 0x3ff4 <_ZN7TwoWire4readEv+0x20>
    3fe0:	e9 2f       	mov	r30, r25
    3fe2:	f0 e0       	ldi	r31, 0x00	; 0
    3fe4:	e8 54       	subi	r30, 0x48	; 72
    3fe6:	fa 4f       	sbci	r31, 0xFA	; 250
    3fe8:	20 81       	ld	r18, Z
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	9f 5f       	subi	r25, 0xFF	; 255
    3fee:	90 93 b7 05 	sts	0x05B7, r25	; 0x8005b7 <_ZN7TwoWire13rxBufferIndexE>
    3ff2:	02 c0       	rjmp	.+4      	; 0x3ff8 <_ZN7TwoWire4readEv+0x24>
    3ff4:	2f ef       	ldi	r18, 0xFF	; 255
    3ff6:	3f ef       	ldi	r19, 0xFF	; 255
    3ff8:	c9 01       	movw	r24, r18
    3ffa:	08 95       	ret

00003ffc <_ZN7TwoWire4peekEv>:
    3ffc:	e0 91 b7 05 	lds	r30, 0x05B7	; 0x8005b7 <_ZN7TwoWire13rxBufferIndexE>
    4000:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <_ZN7TwoWire14rxBufferLengthE>
    4004:	e8 17       	cp	r30, r24
    4006:	30 f4       	brcc	.+12     	; 0x4014 <_ZN7TwoWire4peekEv+0x18>
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	e8 54       	subi	r30, 0x48	; 72
    400c:	fa 4f       	sbci	r31, 0xFA	; 250
    400e:	80 81       	ld	r24, Z
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	08 95       	ret
    4014:	8f ef       	ldi	r24, 0xFF	; 255
    4016:	9f ef       	ldi	r25, 0xFF	; 255
    4018:	08 95       	ret

0000401a <_ZN7TwoWire5flushEv>:
    401a:	08 95       	ret

0000401c <_ZN7TwoWire16onReceiveServiceEPhi>:
    401c:	cf 93       	push	r28
    401e:	df 93       	push	r29
    4020:	ec 01       	movw	r28, r24
    4022:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <_ZN7TwoWire14user_onReceiveE>
    4026:	f0 91 8f 05 	lds	r31, 0x058F	; 0x80058f <_ZN7TwoWire14user_onReceiveE+0x1>
    402a:	30 97       	sbiw	r30, 0x00	; 0
    402c:	f1 f0       	breq	.+60     	; 0x406a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    402e:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <_ZN7TwoWire13rxBufferIndexE>
    4032:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <_ZN7TwoWire14rxBufferLengthE>
    4036:	98 17       	cp	r25, r24
    4038:	c0 f0       	brcs	.+48     	; 0x406a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	29 2f       	mov	r18, r25
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	26 17       	cp	r18, r22
    4042:	37 07       	cpc	r19, r23
    4044:	54 f4       	brge	.+20     	; 0x405a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    4046:	de 01       	movw	r26, r28
    4048:	a2 0f       	add	r26, r18
    404a:	b3 1f       	adc	r27, r19
    404c:	4c 91       	ld	r20, X
    404e:	d9 01       	movw	r26, r18
    4050:	a8 54       	subi	r26, 0x48	; 72
    4052:	ba 4f       	sbci	r27, 0xFA	; 250
    4054:	4c 93       	st	X, r20
    4056:	9f 5f       	subi	r25, 0xFF	; 255
    4058:	f1 cf       	rjmp	.-30     	; 0x403c <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    405a:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <_ZN7TwoWire13rxBufferIndexE>
    405e:	60 93 b6 05 	sts	0x05B6, r22	; 0x8005b6 <_ZN7TwoWire14rxBufferLengthE>
    4062:	cb 01       	movw	r24, r22
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	09 94       	ijmp
    406a:	df 91       	pop	r29
    406c:	cf 91       	pop	r28
    406e:	08 95       	ret

00004070 <_ZN7TwoWire16onRequestServiceEv>:
    4070:	e0 91 90 05 	lds	r30, 0x0590	; 0x800590 <_ZN7TwoWire14user_onRequestE>
    4074:	f0 91 91 05 	lds	r31, 0x0591	; 0x800591 <_ZN7TwoWire14user_onRequestE+0x1>
    4078:	30 97       	sbiw	r30, 0x00	; 0
    407a:	29 f0       	breq	.+10     	; 0x4086 <_ZN7TwoWire16onRequestServiceEv+0x16>
    407c:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <_ZN7TwoWire13txBufferIndexE>
    4080:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <_ZN7TwoWire14txBufferLengthE>
    4084:	09 94       	ijmp
    4086:	08 95       	ret

00004088 <_ZN7TwoWire5writeEPKhj>:
    4088:	cf 92       	push	r12
    408a:	df 92       	push	r13
    408c:	ef 92       	push	r14
    408e:	ff 92       	push	r15
    4090:	0f 93       	push	r16
    4092:	1f 93       	push	r17
    4094:	cf 93       	push	r28
    4096:	df 93       	push	r29
    4098:	7c 01       	movw	r14, r24
    409a:	cb 01       	movw	r24, r22
    409c:	8a 01       	movw	r16, r20
    409e:	20 91 92 05 	lds	r18, 0x0592	; 0x800592 <_ZN7TwoWire12transmittingE>
    40a2:	22 23       	and	r18, r18
    40a4:	89 f0       	breq	.+34     	; 0x40c8 <_ZN7TwoWire5writeEPKhj+0x40>
    40a6:	eb 01       	movw	r28, r22
    40a8:	6b 01       	movw	r12, r22
    40aa:	c4 0e       	add	r12, r20
    40ac:	d5 1e       	adc	r13, r21
    40ae:	cc 15       	cp	r28, r12
    40b0:	dd 05       	cpc	r29, r13
    40b2:	69 f0       	breq	.+26     	; 0x40ce <_ZN7TwoWire5writeEPKhj+0x46>
    40b4:	69 91       	ld	r22, Y+
    40b6:	d7 01       	movw	r26, r14
    40b8:	ed 91       	ld	r30, X+
    40ba:	fc 91       	ld	r31, X
    40bc:	01 90       	ld	r0, Z+
    40be:	f0 81       	ld	r31, Z
    40c0:	e0 2d       	mov	r30, r0
    40c2:	c7 01       	movw	r24, r14
    40c4:	09 95       	icall
    40c6:	f3 cf       	rjmp	.-26     	; 0x40ae <_ZN7TwoWire5writeEPKhj+0x26>
    40c8:	64 2f       	mov	r22, r20
    40ca:	0e 94 db 22 	call	0x45b6	; 0x45b6 <twi_transmit>
    40ce:	c8 01       	movw	r24, r16
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	1f 91       	pop	r17
    40d6:	0f 91       	pop	r16
    40d8:	ff 90       	pop	r15
    40da:	ef 90       	pop	r14
    40dc:	df 90       	pop	r13
    40de:	cf 90       	pop	r12
    40e0:	08 95       	ret

000040e2 <_ZN7TwoWire5writeEh>:
    40e2:	cf 93       	push	r28
    40e4:	df 93       	push	r29
    40e6:	1f 92       	push	r1
    40e8:	cd b7       	in	r28, 0x3d	; 61
    40ea:	de b7       	in	r29, 0x3e	; 62
    40ec:	69 83       	std	Y+1, r22	; 0x01
    40ee:	20 91 92 05 	lds	r18, 0x0592	; 0x800592 <_ZN7TwoWire12transmittingE>
    40f2:	22 23       	and	r18, r18
    40f4:	d1 f0       	breq	.+52     	; 0x412a <_ZN7TwoWire5writeEh+0x48>
    40f6:	20 91 93 05 	lds	r18, 0x0593	; 0x800593 <_ZN7TwoWire14txBufferLengthE>
    40fa:	20 32       	cpi	r18, 0x20	; 32
    40fc:	40 f0       	brcs	.+16     	; 0x410e <_ZN7TwoWire5writeEh+0x2c>
    40fe:	21 e0       	ldi	r18, 0x01	; 1
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	fc 01       	movw	r30, r24
    4104:	33 83       	std	Z+3, r19	; 0x03
    4106:	22 83       	std	Z+2, r18	; 0x02
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	15 c0       	rjmp	.+42     	; 0x4138 <_ZN7TwoWire5writeEh+0x56>
    410e:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <_ZN7TwoWire13txBufferIndexE>
    4112:	e8 2f       	mov	r30, r24
    4114:	f0 e0       	ldi	r31, 0x00	; 0
    4116:	eb 56       	subi	r30, 0x6B	; 107
    4118:	fa 4f       	sbci	r31, 0xFA	; 250
    411a:	99 81       	ldd	r25, Y+1	; 0x01
    411c:	90 83       	st	Z, r25
    411e:	8f 5f       	subi	r24, 0xFF	; 255
    4120:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <_ZN7TwoWire13txBufferIndexE>
    4124:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <_ZN7TwoWire14txBufferLengthE>
    4128:	05 c0       	rjmp	.+10     	; 0x4134 <_ZN7TwoWire5writeEh+0x52>
    412a:	61 e0       	ldi	r22, 0x01	; 1
    412c:	ce 01       	movw	r24, r28
    412e:	01 96       	adiw	r24, 0x01	; 1
    4130:	0e 94 db 22 	call	0x45b6	; 0x45b6 <twi_transmit>
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	0f 90       	pop	r0
    413a:	df 91       	pop	r29
    413c:	cf 91       	pop	r28
    413e:	08 95       	ret

00004140 <_ZN7TwoWireC1Ev>:
    4140:	fc 01       	movw	r30, r24
    4142:	13 82       	std	Z+3, r1	; 0x03
    4144:	12 82       	std	Z+2, r1	; 0x02
    4146:	88 ee       	ldi	r24, 0xE8	; 232
    4148:	93 e0       	ldi	r25, 0x03	; 3
    414a:	a0 e0       	ldi	r26, 0x00	; 0
    414c:	b0 e0       	ldi	r27, 0x00	; 0
    414e:	84 83       	std	Z+4, r24	; 0x04
    4150:	95 83       	std	Z+5, r25	; 0x05
    4152:	a6 83       	std	Z+6, r26	; 0x06
    4154:	b7 83       	std	Z+7, r27	; 0x07
    4156:	8f eb       	ldi	r24, 0xBF	; 191
    4158:	92 e0       	ldi	r25, 0x02	; 2
    415a:	91 83       	std	Z+1, r25	; 0x01
    415c:	80 83       	st	Z, r24
    415e:	08 95       	ret

00004160 <_ZN7TwoWire5beginEv>:
    4160:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <_ZN7TwoWire13rxBufferIndexE>
    4164:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <_ZN7TwoWire14rxBufferLengthE>
    4168:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <_ZN7TwoWire13txBufferIndexE>
    416c:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <_ZN7TwoWire14txBufferLengthE>
    4170:	0e 94 9c 22 	call	0x4538	; 0x4538 <twi_init>
    4174:	88 e3       	ldi	r24, 0x38	; 56
    4176:	90 e2       	ldi	r25, 0x20	; 32
    4178:	0e 94 08 23 	call	0x4610	; 0x4610 <twi_attachSlaveTxEvent>
    417c:	8e e0       	ldi	r24, 0x0E	; 14
    417e:	90 e2       	ldi	r25, 0x20	; 32
    4180:	0c 94 03 23 	jmp	0x4606	; 0x4606 <twi_attachSlaveRxEvent>

00004184 <_ZN7TwoWire8setClockEm>:
    4184:	cb 01       	movw	r24, r22
    4186:	ba 01       	movw	r22, r20
    4188:	0c 94 c7 22 	jmp	0x458e	; 0x458e <twi_setFrequency>

0000418c <_ZN7TwoWire17beginTransmissionEh>:
    418c:	81 e0       	ldi	r24, 0x01	; 1
    418e:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <_ZN7TwoWire12transmittingE>
    4192:	60 93 b5 05 	sts	0x05B5, r22	; 0x8005b5 <_ZN7TwoWire9txAddressE>
    4196:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <_ZN7TwoWire13txBufferIndexE>
    419a:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <_ZN7TwoWire14txBufferLengthE>
    419e:	08 95       	ret

000041a0 <_ZN7TwoWire15endTransmissionEh>:
    41a0:	0f 93       	push	r16
    41a2:	06 2f       	mov	r16, r22
    41a4:	21 e0       	ldi	r18, 0x01	; 1
    41a6:	40 91 93 05 	lds	r20, 0x0593	; 0x800593 <_ZN7TwoWire14txBufferLengthE>
    41aa:	65 e9       	ldi	r22, 0x95	; 149
    41ac:	75 e0       	ldi	r23, 0x05	; 5
    41ae:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <_ZN7TwoWire9txAddressE>
    41b2:	0e 94 12 24 	call	0x4824	; 0x4824 <twi_writeTo>
    41b6:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <_ZN7TwoWire13txBufferIndexE>
    41ba:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <_ZN7TwoWire14txBufferLengthE>
    41be:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <_ZN7TwoWire12transmittingE>
    41c2:	0f 91       	pop	r16
    41c4:	08 95       	ret

000041c6 <_ZN7TwoWire11requestFromEhhmhh>:
    41c6:	4f 92       	push	r4
    41c8:	5f 92       	push	r5
    41ca:	6f 92       	push	r6
    41cc:	7f 92       	push	r7
    41ce:	af 92       	push	r10
    41d0:	bf 92       	push	r11
    41d2:	cf 92       	push	r12
    41d4:	ef 92       	push	r14
    41d6:	ff 92       	push	r15
    41d8:	0f 93       	push	r16
    41da:	1f 93       	push	r17
    41dc:	cf 93       	push	r28
    41de:	df 93       	push	r29
    41e0:	5c 01       	movw	r10, r24
    41e2:	f6 2e       	mov	r15, r22
    41e4:	d4 2f       	mov	r29, r20
    41e6:	28 01       	movw	r4, r16
    41e8:	39 01       	movw	r6, r18
    41ea:	ee 20       	and	r14, r14
    41ec:	21 f1       	breq	.+72     	; 0x4236 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    41ee:	0e 94 c6 20 	call	0x418c	; 0x418c <_ZN7TwoWire17beginTransmissionEh>
    41f2:	ce 2d       	mov	r28, r14
    41f4:	c4 30       	cpi	r28, 0x04	; 4
    41f6:	08 f0       	brcs	.+2      	; 0x41fa <_ZN7TwoWire11requestFromEhhmhh+0x34>
    41f8:	c3 e0       	ldi	r28, 0x03	; 3
    41fa:	c1 50       	subi	r28, 0x01	; 1
    41fc:	c0 f0       	brcs	.+48     	; 0x422e <_ZN7TwoWire11requestFromEhhmhh+0x68>
    41fe:	28 e0       	ldi	r18, 0x08	; 8
    4200:	c2 9f       	mul	r28, r18
    4202:	c0 01       	movw	r24, r0
    4204:	11 24       	eor	r1, r1
    4206:	a3 01       	movw	r20, r6
    4208:	92 01       	movw	r18, r4
    420a:	04 c0       	rjmp	.+8      	; 0x4214 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    420c:	56 95       	lsr	r21
    420e:	47 95       	ror	r20
    4210:	37 95       	ror	r19
    4212:	27 95       	ror	r18
    4214:	8a 95       	dec	r24
    4216:	d2 f7       	brpl	.-12     	; 0x420c <_ZN7TwoWire11requestFromEhhmhh+0x46>
    4218:	ca 01       	movw	r24, r20
    421a:	b9 01       	movw	r22, r18
    421c:	d5 01       	movw	r26, r10
    421e:	ed 91       	ld	r30, X+
    4220:	fc 91       	ld	r31, X
    4222:	01 90       	ld	r0, Z+
    4224:	f0 81       	ld	r31, Z
    4226:	e0 2d       	mov	r30, r0
    4228:	c5 01       	movw	r24, r10
    422a:	09 95       	icall
    422c:	e6 cf       	rjmp	.-52     	; 0x41fa <_ZN7TwoWire11requestFromEhhmhh+0x34>
    422e:	60 e0       	ldi	r22, 0x00	; 0
    4230:	c5 01       	movw	r24, r10
    4232:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <_ZN7TwoWire15endTransmissionEh>
    4236:	4d 2f       	mov	r20, r29
    4238:	d1 32       	cpi	r29, 0x21	; 33
    423a:	08 f0       	brcs	.+2      	; 0x423e <_ZN7TwoWire11requestFromEhhmhh+0x78>
    423c:	40 e2       	ldi	r20, 0x20	; 32
    423e:	2c 2d       	mov	r18, r12
    4240:	68 eb       	ldi	r22, 0xB8	; 184
    4242:	75 e0       	ldi	r23, 0x05	; 5
    4244:	8f 2d       	mov	r24, r15
    4246:	0e 94 29 23 	call	0x4652	; 0x4652 <twi_readFrom>
    424a:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <_ZN7TwoWire13rxBufferIndexE>
    424e:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <_ZN7TwoWire14rxBufferLengthE>
    4252:	df 91       	pop	r29
    4254:	cf 91       	pop	r28
    4256:	1f 91       	pop	r17
    4258:	0f 91       	pop	r16
    425a:	ff 90       	pop	r15
    425c:	ef 90       	pop	r14
    425e:	cf 90       	pop	r12
    4260:	bf 90       	pop	r11
    4262:	af 90       	pop	r10
    4264:	7f 90       	pop	r7
    4266:	6f 90       	pop	r6
    4268:	5f 90       	pop	r5
    426a:	4f 90       	pop	r4
    426c:	08 95       	ret

0000426e <_ZN7TwoWire11requestFromEhhh>:
    426e:	cf 92       	push	r12
    4270:	ef 92       	push	r14
    4272:	0f 93       	push	r16
    4274:	1f 93       	push	r17
    4276:	c2 2e       	mov	r12, r18
    4278:	e1 2c       	mov	r14, r1
    427a:	00 e0       	ldi	r16, 0x00	; 0
    427c:	10 e0       	ldi	r17, 0x00	; 0
    427e:	98 01       	movw	r18, r16
    4280:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <_ZN7TwoWire11requestFromEhhmhh>
    4284:	1f 91       	pop	r17
    4286:	0f 91       	pop	r16
    4288:	ef 90       	pop	r14
    428a:	cf 90       	pop	r12
    428c:	08 95       	ret

0000428e <_ZN7TwoWire11requestFromEhh>:
    428e:	21 e0       	ldi	r18, 0x01	; 1
    4290:	0c 94 37 21 	jmp	0x426e	; 0x426e <_ZN7TwoWire11requestFromEhhh>

00004294 <_ZN7TwoWire15endTransmissionEv>:
    4294:	61 e0       	ldi	r22, 0x01	; 1
    4296:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <_ZN7TwoWire15endTransmissionEh>

0000429a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    429a:	82 e8       	ldi	r24, 0x82	; 130
    429c:	95 e0       	ldi	r25, 0x05	; 5
    429e:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <_ZN7TwoWireC1Ev>

000042a2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    42a2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    42a4:	91 8d       	ldd	r25, Z+25	; 0x19
    42a6:	22 8d       	ldd	r18, Z+26	; 0x1a
    42a8:	89 2f       	mov	r24, r25
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	80 5c       	subi	r24, 0xC0	; 192
    42ae:	9f 4f       	sbci	r25, 0xFF	; 255
    42b0:	82 1b       	sub	r24, r18
    42b2:	91 09       	sbc	r25, r1
}
    42b4:	8f 73       	andi	r24, 0x3F	; 63
    42b6:	99 27       	eor	r25, r25
    42b8:	08 95       	ret

000042ba <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    42ba:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    42bc:	91 8d       	ldd	r25, Z+25	; 0x19
    42be:	82 8d       	ldd	r24, Z+26	; 0x1a
    42c0:	98 17       	cp	r25, r24
    42c2:	31 f0       	breq	.+12     	; 0x42d0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    42c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    42c6:	e8 0f       	add	r30, r24
    42c8:	f1 1d       	adc	r31, r1
    42ca:	85 8d       	ldd	r24, Z+29	; 0x1d
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    42d0:	8f ef       	ldi	r24, 0xFF	; 255
    42d2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    42d4:	08 95       	ret

000042d6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    42d6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    42d8:	91 8d       	ldd	r25, Z+25	; 0x19
    42da:	82 8d       	ldd	r24, Z+26	; 0x1a
    42dc:	98 17       	cp	r25, r24
    42de:	61 f0       	breq	.+24     	; 0x42f8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    42e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    42e2:	df 01       	movw	r26, r30
    42e4:	a8 0f       	add	r26, r24
    42e6:	b1 1d       	adc	r27, r1
    42e8:	5d 96       	adiw	r26, 0x1d	; 29
    42ea:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    42ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    42ee:	9f 5f       	subi	r25, 0xFF	; 255
    42f0:	9f 73       	andi	r25, 0x3F	; 63
    42f2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    42f8:	8f ef       	ldi	r24, 0xFF	; 255
    42fa:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    42fc:	08 95       	ret

000042fe <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    42fe:	fc 01       	movw	r30, r24
    4300:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    4302:	44 8d       	ldd	r20, Z+28	; 0x1c
    4304:	25 2f       	mov	r18, r21
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	84 2f       	mov	r24, r20
    430a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    430c:	82 1b       	sub	r24, r18
    430e:	93 0b       	sbc	r25, r19
    4310:	54 17       	cp	r21, r20
    4312:	10 f0       	brcs	.+4      	; 0x4318 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    4314:	cf 96       	adiw	r24, 0x3f	; 63
    4316:	08 95       	ret
  return tail - head - 1;
    4318:	01 97       	sbiw	r24, 0x01	; 1
}
    431a:	08 95       	ret

0000431c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    431c:	8d ec       	ldi	r24, 0xCD	; 205
    431e:	9a e0       	ldi	r25, 0x0A	; 10
    4320:	89 2b       	or	r24, r25
    4322:	49 f0       	breq	.+18     	; 0x4336 <_Z14serialEventRunv+0x1a>
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	89 2b       	or	r24, r25
    432a:	29 f0       	breq	.+10     	; 0x4336 <_Z14serialEventRunv+0x1a>
    432c:	0e 94 cd 0a 	call	0x159a	; 0x159a <_Z17Serial0_availablev>
    4330:	81 11       	cpse	r24, r1
    4332:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    4336:	08 95       	ret

00004338 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    4338:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    433a:	84 8d       	ldd	r24, Z+28	; 0x1c
    433c:	df 01       	movw	r26, r30
    433e:	a8 0f       	add	r26, r24
    4340:	b1 1d       	adc	r27, r1
    4342:	a3 5a       	subi	r26, 0xA3	; 163
    4344:	bf 4f       	sbci	r27, 0xFF	; 255
    4346:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    4348:	84 8d       	ldd	r24, Z+28	; 0x1c
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	01 96       	adiw	r24, 0x01	; 1
    434e:	8f 73       	andi	r24, 0x3F	; 63
    4350:	99 27       	eor	r25, r25
    4352:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    4354:	a6 89       	ldd	r26, Z+22	; 0x16
    4356:	b7 89       	ldd	r27, Z+23	; 0x17
    4358:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    435a:	a0 89       	ldd	r26, Z+16	; 0x10
    435c:	b1 89       	ldd	r27, Z+17	; 0x11
    435e:	8c 91       	ld	r24, X
    4360:	83 70       	andi	r24, 0x03	; 3
    4362:	80 64       	ori	r24, 0x40	; 64
    4364:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    4366:	93 8d       	ldd	r25, Z+27	; 0x1b
    4368:	84 8d       	ldd	r24, Z+28	; 0x1c
    436a:	98 13       	cpse	r25, r24
    436c:	06 c0       	rjmp	.+12     	; 0x437a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    436e:	02 88       	ldd	r0, Z+18	; 0x12
    4370:	f3 89       	ldd	r31, Z+19	; 0x13
    4372:	e0 2d       	mov	r30, r0
    4374:	80 81       	ld	r24, Z
    4376:	8f 7d       	andi	r24, 0xDF	; 223
    4378:	80 83       	st	Z, r24
    437a:	08 95       	ret

0000437c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    437c:	ef 92       	push	r14
    437e:	ff 92       	push	r15
    4380:	0f 93       	push	r16
    4382:	1f 93       	push	r17
    4384:	cf 93       	push	r28
    4386:	df 93       	push	r29
    4388:	ec 01       	movw	r28, r24
  _written = true;
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    438e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4390:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4392:	98 13       	cpse	r25, r24
    4394:	05 c0       	rjmp	.+10     	; 0x43a0 <_ZN14HardwareSerial5writeEh+0x24>
    4396:	e8 89       	ldd	r30, Y+16	; 0x10
    4398:	f9 89       	ldd	r31, Y+17	; 0x11
    439a:	80 81       	ld	r24, Z
    439c:	85 fd       	sbrc	r24, 5
    439e:	26 c0       	rjmp	.+76     	; 0x43ec <_ZN14HardwareSerial5writeEh+0x70>
    43a0:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    43a2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    43a4:	10 e0       	ldi	r17, 0x00	; 0
    43a6:	0f 5f       	subi	r16, 0xFF	; 255
    43a8:	1f 4f       	sbci	r17, 0xFF	; 255
    43aa:	0f 73       	andi	r16, 0x3F	; 63
    43ac:	11 27       	eor	r17, r17
    43ae:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    43b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    43b2:	e8 12       	cpse	r14, r24
    43b4:	0c c0       	rjmp	.+24     	; 0x43ce <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	07 fc       	sbrc	r0, 7
    43ba:	fa cf       	rjmp	.-12     	; 0x43b0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    43bc:	e8 89       	ldd	r30, Y+16	; 0x10
    43be:	f9 89       	ldd	r31, Y+17	; 0x11
    43c0:	80 81       	ld	r24, Z
    43c2:	85 ff       	sbrs	r24, 5
    43c4:	f5 cf       	rjmp	.-22     	; 0x43b0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    43c6:	ce 01       	movw	r24, r28
    43c8:	0e 94 9c 21 	call	0x4338	; 0x4338 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    43cc:	f1 cf       	rjmp	.-30     	; 0x43b0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    43ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43d0:	fe 01       	movw	r30, r28
    43d2:	e8 0f       	add	r30, r24
    43d4:	f1 1d       	adc	r31, r1
    43d6:	e3 5a       	subi	r30, 0xA3	; 163
    43d8:	ff 4f       	sbci	r31, 0xFF	; 255
    43da:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    43dc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    43de:	f8 94       	cli
    _tx_buffer_head = i;
    43e0:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    43e2:	ea 89       	ldd	r30, Y+18	; 0x12
    43e4:	fb 89       	ldd	r31, Y+19	; 0x13
    43e6:	80 81       	ld	r24, Z
    43e8:	80 62       	ori	r24, 0x20	; 32
    43ea:	0a c0       	rjmp	.+20     	; 0x4400 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    43ec:	9f b7       	in	r25, 0x3f	; 63
    43ee:	f8 94       	cli
      *_udr = c;
    43f0:	ee 89       	ldd	r30, Y+22	; 0x16
    43f2:	ff 89       	ldd	r31, Y+23	; 0x17
    43f4:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    43f6:	e8 89       	ldd	r30, Y+16	; 0x10
    43f8:	f9 89       	ldd	r31, Y+17	; 0x11
    43fa:	80 81       	ld	r24, Z
    43fc:	83 70       	andi	r24, 0x03	; 3
    43fe:	80 64       	ori	r24, 0x40	; 64
    4400:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4402:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    4404:	81 e0       	ldi	r24, 0x01	; 1
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	df 91       	pop	r29
    440a:	cf 91       	pop	r28
    440c:	1f 91       	pop	r17
    440e:	0f 91       	pop	r16
    4410:	ff 90       	pop	r15
    4412:	ef 90       	pop	r14
    4414:	08 95       	ret

00004416 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    4416:	cf 93       	push	r28
    4418:	df 93       	push	r29
    441a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    441c:	88 8d       	ldd	r24, Y+24	; 0x18
    441e:	88 23       	and	r24, r24
    4420:	c9 f0       	breq	.+50     	; 0x4454 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    4422:	ea 89       	ldd	r30, Y+18	; 0x12
    4424:	fb 89       	ldd	r31, Y+19	; 0x13
    4426:	80 81       	ld	r24, Z
    4428:	85 fd       	sbrc	r24, 5
    442a:	05 c0       	rjmp	.+10     	; 0x4436 <_ZN14HardwareSerial5flushEv+0x20>
    442c:	a8 89       	ldd	r26, Y+16	; 0x10
    442e:	b9 89       	ldd	r27, Y+17	; 0x11
    4430:	8c 91       	ld	r24, X
    4432:	86 fd       	sbrc	r24, 6
    4434:	0f c0       	rjmp	.+30     	; 0x4454 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    4436:	0f b6       	in	r0, 0x3f	; 63
    4438:	07 fc       	sbrc	r0, 7
    443a:	f5 cf       	rjmp	.-22     	; 0x4426 <_ZN14HardwareSerial5flushEv+0x10>
    443c:	80 81       	ld	r24, Z
    443e:	85 ff       	sbrs	r24, 5
    4440:	f2 cf       	rjmp	.-28     	; 0x4426 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    4442:	a8 89       	ldd	r26, Y+16	; 0x10
    4444:	b9 89       	ldd	r27, Y+17	; 0x11
    4446:	8c 91       	ld	r24, X
    4448:	85 ff       	sbrs	r24, 5
    444a:	ed cf       	rjmp	.-38     	; 0x4426 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    444c:	ce 01       	movw	r24, r28
    444e:	0e 94 9c 21 	call	0x4338	; 0x4338 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4452:	e7 cf       	rjmp	.-50     	; 0x4422 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    4454:	df 91       	pop	r29
    4456:	cf 91       	pop	r28
    4458:	08 95       	ret

0000445a <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    445a:	08 95       	ret

0000445c <attachInterrupt>:
    445c:	82 30       	cpi	r24, 0x02	; 2
    445e:	e8 f4       	brcc	.+58     	; 0x449a <attachInterrupt+0x3e>
    4460:	e8 2f       	mov	r30, r24
    4462:	f0 e0       	ldi	r31, 0x00	; 0
    4464:	ee 0f       	add	r30, r30
    4466:	ff 1f       	adc	r31, r31
    4468:	ec 5d       	subi	r30, 0xDC	; 220
    446a:	fe 4f       	sbci	r31, 0xFE	; 254
    446c:	71 83       	std	Z+1, r23	; 0x01
    446e:	60 83       	st	Z, r22
    4470:	81 30       	cpi	r24, 0x01	; 1
    4472:	41 f0       	breq	.+16     	; 0x4484 <attachInterrupt+0x28>
    4474:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    4478:	8c 7f       	andi	r24, 0xFC	; 252
    447a:	48 2b       	or	r20, r24
    447c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    4480:	e8 9a       	sbi	0x1d, 0	; 29
    4482:	08 95       	ret
    4484:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    4488:	83 7f       	andi	r24, 0xF3	; 243
    448a:	44 0f       	add	r20, r20
    448c:	55 1f       	adc	r21, r21
    448e:	44 0f       	add	r20, r20
    4490:	55 1f       	adc	r21, r21
    4492:	48 2b       	or	r20, r24
    4494:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    4498:	e9 9a       	sbi	0x1d, 1	; 29
    449a:	08 95       	ret

0000449c <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    449c:	1f 92       	push	r1
    449e:	0f 92       	push	r0
    44a0:	0f b6       	in	r0, 0x3f	; 63
    44a2:	0f 92       	push	r0
    44a4:	11 24       	eor	r1, r1
    44a6:	2f 93       	push	r18
    44a8:	3f 93       	push	r19
    44aa:	4f 93       	push	r20
    44ac:	5f 93       	push	r21
    44ae:	6f 93       	push	r22
    44b0:	7f 93       	push	r23
    44b2:	8f 93       	push	r24
    44b4:	9f 93       	push	r25
    44b6:	af 93       	push	r26
    44b8:	bf 93       	push	r27
    44ba:	ef 93       	push	r30
    44bc:	ff 93       	push	r31
    44be:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <intFunc>
    44c2:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <intFunc+0x1>
    44c6:	09 95       	icall
    44c8:	ff 91       	pop	r31
    44ca:	ef 91       	pop	r30
    44cc:	bf 91       	pop	r27
    44ce:	af 91       	pop	r26
    44d0:	9f 91       	pop	r25
    44d2:	8f 91       	pop	r24
    44d4:	7f 91       	pop	r23
    44d6:	6f 91       	pop	r22
    44d8:	5f 91       	pop	r21
    44da:	4f 91       	pop	r20
    44dc:	3f 91       	pop	r19
    44de:	2f 91       	pop	r18
    44e0:	0f 90       	pop	r0
    44e2:	0f be       	out	0x3f, r0	; 63
    44e4:	0f 90       	pop	r0
    44e6:	1f 90       	pop	r1
    44e8:	18 95       	reti

000044ea <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    44ea:	1f 92       	push	r1
    44ec:	0f 92       	push	r0
    44ee:	0f b6       	in	r0, 0x3f	; 63
    44f0:	0f 92       	push	r0
    44f2:	11 24       	eor	r1, r1
    44f4:	2f 93       	push	r18
    44f6:	3f 93       	push	r19
    44f8:	4f 93       	push	r20
    44fa:	5f 93       	push	r21
    44fc:	6f 93       	push	r22
    44fe:	7f 93       	push	r23
    4500:	8f 93       	push	r24
    4502:	9f 93       	push	r25
    4504:	af 93       	push	r26
    4506:	bf 93       	push	r27
    4508:	ef 93       	push	r30
    450a:	ff 93       	push	r31
    450c:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <intFunc+0x2>
    4510:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <intFunc+0x3>
    4514:	09 95       	icall
    4516:	ff 91       	pop	r31
    4518:	ef 91       	pop	r30
    451a:	bf 91       	pop	r27
    451c:	af 91       	pop	r26
    451e:	9f 91       	pop	r25
    4520:	8f 91       	pop	r24
    4522:	7f 91       	pop	r23
    4524:	6f 91       	pop	r22
    4526:	5f 91       	pop	r21
    4528:	4f 91       	pop	r20
    452a:	3f 91       	pop	r19
    452c:	2f 91       	pop	r18
    452e:	0f 90       	pop	r0
    4530:	0f be       	out	0x3f, r0	; 63
    4532:	0f 90       	pop	r0
    4534:	1f 90       	pop	r1
    4536:	18 95       	reti

00004538 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4538:	10 92 4b 06 	sts	0x064B, r1	; 0x80064b <twi_state>
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	80 93 49 06 	sts	0x0649, r24	; 0x800649 <twi_sendStop>
    4542:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <twi_inRepStart>
    4546:	61 e0       	ldi	r22, 0x01	; 1
    4548:	82 e1       	ldi	r24, 0x12	; 18
    454a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <digitalWrite>
    454e:	61 e0       	ldi	r22, 0x01	; 1
    4550:	83 e1       	ldi	r24, 0x13	; 19
    4552:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <digitalWrite>
    4556:	e9 eb       	ldi	r30, 0xB9	; 185
    4558:	f0 e0       	ldi	r31, 0x00	; 0
    455a:	80 81       	ld	r24, Z
    455c:	8e 7f       	andi	r24, 0xFE	; 254
    455e:	80 83       	st	Z, r24
    4560:	80 81       	ld	r24, Z
    4562:	8d 7f       	andi	r24, 0xFD	; 253
    4564:	80 83       	st	Z, r24
    4566:	88 e4       	ldi	r24, 0x48	; 72
    4568:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    456c:	85 e4       	ldi	r24, 0x45	; 69
    456e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4572:	08 95       	ret

00004574 <twi_disable>:
    4574:	ec eb       	ldi	r30, 0xBC	; 188
    4576:	f0 e0       	ldi	r31, 0x00	; 0
    4578:	80 81       	ld	r24, Z
    457a:	8a 7b       	andi	r24, 0xBA	; 186
    457c:	80 83       	st	Z, r24
    457e:	60 e0       	ldi	r22, 0x00	; 0
    4580:	82 e1       	ldi	r24, 0x12	; 18
    4582:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <digitalWrite>
    4586:	60 e0       	ldi	r22, 0x00	; 0
    4588:	83 e1       	ldi	r24, 0x13	; 19
    458a:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <digitalWrite>

0000458e <twi_setFrequency>:
    458e:	9b 01       	movw	r18, r22
    4590:	ac 01       	movw	r20, r24
    4592:	60 e0       	ldi	r22, 0x00	; 0
    4594:	74 e2       	ldi	r23, 0x24	; 36
    4596:	84 ef       	ldi	r24, 0xF4	; 244
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	0e 94 81 26 	call	0x4d02	; 0x4d02 <__udivmodsi4>
    459e:	da 01       	movw	r26, r20
    45a0:	c9 01       	movw	r24, r18
    45a2:	40 97       	sbiw	r24, 0x10	; 16
    45a4:	a1 09       	sbc	r26, r1
    45a6:	b1 09       	sbc	r27, r1
    45a8:	b6 95       	lsr	r27
    45aa:	a7 95       	ror	r26
    45ac:	97 95       	ror	r25
    45ae:	87 95       	ror	r24
    45b0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    45b4:	08 95       	ret

000045b6 <twi_transmit>:
    45b6:	40 91 fa 05 	lds	r20, 0x05FA	; 0x8005fa <twi_txBufferLength>
    45ba:	26 2f       	mov	r18, r22
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	24 0f       	add	r18, r20
    45c0:	31 1d       	adc	r19, r1
    45c2:	21 32       	cpi	r18, 0x21	; 33
    45c4:	31 05       	cpc	r19, r1
    45c6:	dc f4       	brge	.+54     	; 0x45fe <twi_transmit+0x48>
    45c8:	20 91 4b 06 	lds	r18, 0x064B	; 0x80064b <twi_state>
    45cc:	24 30       	cpi	r18, 0x04	; 4
    45ce:	c9 f4       	brne	.+50     	; 0x4602 <twi_transmit+0x4c>
    45d0:	fc 01       	movw	r30, r24
    45d2:	80 e0       	ldi	r24, 0x00	; 0
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	86 17       	cp	r24, r22
    45d8:	58 f4       	brcc	.+22     	; 0x45f0 <twi_transmit+0x3a>
    45da:	30 91 fa 05 	lds	r19, 0x05FA	; 0x8005fa <twi_txBufferLength>
    45de:	21 91       	ld	r18, Z+
    45e0:	dc 01       	movw	r26, r24
    45e2:	a4 50       	subi	r26, 0x04	; 4
    45e4:	ba 4f       	sbci	r27, 0xFA	; 250
    45e6:	a3 0f       	add	r26, r19
    45e8:	b1 1d       	adc	r27, r1
    45ea:	2c 93       	st	X, r18
    45ec:	01 96       	adiw	r24, 0x01	; 1
    45ee:	f3 cf       	rjmp	.-26     	; 0x45d6 <twi_transmit+0x20>
    45f0:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <twi_txBufferLength>
    45f4:	68 0f       	add	r22, r24
    45f6:	60 93 fa 05 	sts	0x05FA, r22	; 0x8005fa <twi_txBufferLength>
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	08 95       	ret
    45fe:	81 e0       	ldi	r24, 0x01	; 1
    4600:	08 95       	ret
    4602:	82 e0       	ldi	r24, 0x02	; 2
    4604:	08 95       	ret

00004606 <twi_attachSlaveRxEvent>:
    4606:	90 93 3f 06 	sts	0x063F, r25	; 0x80063f <twi_onSlaveReceive+0x1>
    460a:	80 93 3e 06 	sts	0x063E, r24	; 0x80063e <twi_onSlaveReceive>
    460e:	08 95       	ret

00004610 <twi_attachSlaveTxEvent>:
    4610:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <twi_onSlaveTransmit+0x1>
    4614:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <twi_onSlaveTransmit>
    4618:	08 95       	ret

0000461a <twi_releaseBus>:
    461a:	85 ec       	ldi	r24, 0xC5	; 197
    461c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4620:	10 92 4b 06 	sts	0x064B, r1	; 0x80064b <twi_state>
    4624:	08 95       	ret

00004626 <twi_handleTimeout>:
    4626:	cf 93       	push	r28
    4628:	df 93       	push	r29
    462a:	91 e0       	ldi	r25, 0x01	; 1
    462c:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <twi_timed_out_flag>
    4630:	88 23       	and	r24, r24
    4632:	61 f0       	breq	.+24     	; 0x464c <twi_handleTimeout+0x26>
    4634:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    4638:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    463c:	0e 94 ba 22 	call	0x4574	; 0x4574 <twi_disable>
    4640:	0e 94 9c 22 	call	0x4538	; 0x4538 <twi_init>
    4644:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    4648:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    464c:	df 91       	pop	r29
    464e:	cf 91       	pop	r28
    4650:	08 95       	ret

00004652 <twi_readFrom>:
    4652:	4f 92       	push	r4
    4654:	5f 92       	push	r5
    4656:	6f 92       	push	r6
    4658:	7f 92       	push	r7
    465a:	8f 92       	push	r8
    465c:	9f 92       	push	r9
    465e:	af 92       	push	r10
    4660:	bf 92       	push	r11
    4662:	cf 92       	push	r12
    4664:	df 92       	push	r13
    4666:	ef 92       	push	r14
    4668:	ff 92       	push	r15
    466a:	0f 93       	push	r16
    466c:	1f 93       	push	r17
    466e:	cf 93       	push	r28
    4670:	df 93       	push	r29
    4672:	f8 2e       	mov	r15, r24
    4674:	16 2f       	mov	r17, r22
    4676:	07 2f       	mov	r16, r23
    4678:	c4 2f       	mov	r28, r20
    467a:	e2 2e       	mov	r14, r18
    467c:	41 32       	cpi	r20, 0x21	; 33
    467e:	08 f0       	brcs	.+2      	; 0x4682 <twi_readFrom+0x30>
    4680:	be c0       	rjmp	.+380    	; 0x47fe <twi_readFrom+0x1ac>
    4682:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <micros>
    4686:	4b 01       	movw	r8, r22
    4688:	5c 01       	movw	r10, r24
    468a:	d0 91 4b 06 	lds	r29, 0x064B	; 0x80064b <twi_state>
    468e:	dd 23       	and	r29, r29
    4690:	31 f1       	breq	.+76     	; 0x46de <twi_readFrom+0x8c>
    4692:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <twi_timeout_us>
    4696:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    469a:	a0 91 46 06 	lds	r26, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    469e:	b0 91 47 06 	lds	r27, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    46a2:	89 2b       	or	r24, r25
    46a4:	8a 2b       	or	r24, r26
    46a6:	8b 2b       	or	r24, r27
    46a8:	81 f3       	breq	.-32     	; 0x468a <twi_readFrom+0x38>
    46aa:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <micros>
    46ae:	40 90 44 06 	lds	r4, 0x0644	; 0x800644 <twi_timeout_us>
    46b2:	50 90 45 06 	lds	r5, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    46b6:	60 90 46 06 	lds	r6, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    46ba:	70 90 47 06 	lds	r7, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    46be:	dc 01       	movw	r26, r24
    46c0:	cb 01       	movw	r24, r22
    46c2:	88 19       	sub	r24, r8
    46c4:	99 09       	sbc	r25, r9
    46c6:	aa 09       	sbc	r26, r10
    46c8:	bb 09       	sbc	r27, r11
    46ca:	48 16       	cp	r4, r24
    46cc:	59 06       	cpc	r5, r25
    46ce:	6a 06       	cpc	r6, r26
    46d0:	7b 06       	cpc	r7, r27
    46d2:	d8 f6       	brcc	.-74     	; 0x468a <twi_readFrom+0x38>
    46d4:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <twi_do_reset_on_timeout>
    46d8:	0e 94 13 23 	call	0x4626	; 0x4626 <twi_handleTimeout>
    46dc:	90 c0       	rjmp	.+288    	; 0x47fe <twi_readFrom+0x1ac>
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <twi_state>
    46e4:	e0 92 49 06 	sts	0x0649, r14	; 0x800649 <twi_sendStop>
    46e8:	9f ef       	ldi	r25, 0xFF	; 255
    46ea:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <twi_error>
    46ee:	10 92 1d 06 	sts	0x061D, r1	; 0x80061d <twi_masterBufferIndex>
    46f2:	9c 0f       	add	r25, r28
    46f4:	90 93 1c 06 	sts	0x061C, r25	; 0x80061c <twi_masterBufferLength>
    46f8:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <twi_slarw>
    46fc:	90 91 4a 06 	lds	r25, 0x064A	; 0x80064a <twi_slarw>
    4700:	8f 2d       	mov	r24, r15
    4702:	88 0f       	add	r24, r24
    4704:	89 2b       	or	r24, r25
    4706:	80 93 4a 06 	sts	0x064A, r24	; 0x80064a <twi_slarw>
    470a:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <twi_inRepStart>
    470e:	81 30       	cpi	r24, 0x01	; 1
    4710:	89 f5       	brne	.+98     	; 0x4774 <twi_readFrom+0x122>
    4712:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <twi_inRepStart>
    4716:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <micros>
    471a:	6b 01       	movw	r12, r22
    471c:	7c 01       	movw	r14, r24
    471e:	80 91 4a 06 	lds	r24, 0x064A	; 0x80064a <twi_slarw>
    4722:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4726:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <twi_timeout_us>
    472a:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    472e:	a0 91 46 06 	lds	r26, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    4732:	b0 91 47 06 	lds	r27, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    4736:	89 2b       	or	r24, r25
    4738:	8a 2b       	or	r24, r26
    473a:	8b 2b       	or	r24, r27
    473c:	a9 f0       	breq	.+42     	; 0x4768 <twi_readFrom+0x116>
    473e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <micros>
    4742:	80 90 44 06 	lds	r8, 0x0644	; 0x800644 <twi_timeout_us>
    4746:	90 90 45 06 	lds	r9, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    474a:	a0 90 46 06 	lds	r10, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    474e:	b0 90 47 06 	lds	r11, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    4752:	dc 01       	movw	r26, r24
    4754:	cb 01       	movw	r24, r22
    4756:	8c 19       	sub	r24, r12
    4758:	9d 09       	sbc	r25, r13
    475a:	ae 09       	sbc	r26, r14
    475c:	bf 09       	sbc	r27, r15
    475e:	88 16       	cp	r8, r24
    4760:	99 06       	cpc	r9, r25
    4762:	aa 06       	cpc	r10, r26
    4764:	bb 06       	cpc	r11, r27
    4766:	90 f1       	brcs	.+100    	; 0x47cc <twi_readFrom+0x17a>
    4768:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    476c:	83 fd       	sbrc	r24, 3
    476e:	d7 cf       	rjmp	.-82     	; 0x471e <twi_readFrom+0xcc>
    4770:	85 ec       	ldi	r24, 0xC5	; 197
    4772:	01 c0       	rjmp	.+2      	; 0x4776 <twi_readFrom+0x124>
    4774:	85 ee       	ldi	r24, 0xE5	; 229
    4776:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    477a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <micros>
    477e:	6b 01       	movw	r12, r22
    4780:	7c 01       	movw	r14, r24
    4782:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <twi_state>
    4786:	81 30       	cpi	r24, 0x01	; 1
    4788:	31 f5       	brne	.+76     	; 0x47d6 <twi_readFrom+0x184>
    478a:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <twi_timeout_us>
    478e:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    4792:	a0 91 46 06 	lds	r26, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    4796:	b0 91 47 06 	lds	r27, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    479a:	89 2b       	or	r24, r25
    479c:	8a 2b       	or	r24, r26
    479e:	8b 2b       	or	r24, r27
    47a0:	81 f3       	breq	.-32     	; 0x4782 <twi_readFrom+0x130>
    47a2:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <micros>
    47a6:	80 90 44 06 	lds	r8, 0x0644	; 0x800644 <twi_timeout_us>
    47aa:	90 90 45 06 	lds	r9, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    47ae:	a0 90 46 06 	lds	r10, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    47b2:	b0 90 47 06 	lds	r11, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    47b6:	dc 01       	movw	r26, r24
    47b8:	cb 01       	movw	r24, r22
    47ba:	8c 19       	sub	r24, r12
    47bc:	9d 09       	sbc	r25, r13
    47be:	ae 09       	sbc	r26, r14
    47c0:	bf 09       	sbc	r27, r15
    47c2:	88 16       	cp	r8, r24
    47c4:	99 06       	cpc	r9, r25
    47c6:	aa 06       	cpc	r10, r26
    47c8:	bb 06       	cpc	r11, r27
    47ca:	d8 f6       	brcc	.-74     	; 0x4782 <twi_readFrom+0x130>
    47cc:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <twi_do_reset_on_timeout>
    47d0:	0e 94 13 23 	call	0x4626	; 0x4626 <twi_handleTimeout>
    47d4:	15 c0       	rjmp	.+42     	; 0x4800 <twi_readFrom+0x1ae>
    47d6:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <twi_masterBufferIndex>
    47da:	8c 17       	cp	r24, r28
    47dc:	10 f4       	brcc	.+4      	; 0x47e2 <twi_readFrom+0x190>
    47de:	c0 91 1d 06 	lds	r28, 0x061D	; 0x80061d <twi_masterBufferIndex>
    47e2:	ae e1       	ldi	r26, 0x1E	; 30
    47e4:	b6 e0       	ldi	r27, 0x06	; 6
    47e6:	91 2f       	mov	r25, r17
    47e8:	e1 2f       	mov	r30, r17
    47ea:	f0 2f       	mov	r31, r16
    47ec:	8e 2f       	mov	r24, r30
    47ee:	89 1b       	sub	r24, r25
    47f0:	8c 17       	cp	r24, r28
    47f2:	18 f4       	brcc	.+6      	; 0x47fa <twi_readFrom+0x1a8>
    47f4:	8d 91       	ld	r24, X+
    47f6:	81 93       	st	Z+, r24
    47f8:	f9 cf       	rjmp	.-14     	; 0x47ec <twi_readFrom+0x19a>
    47fa:	dc 2f       	mov	r29, r28
    47fc:	01 c0       	rjmp	.+2      	; 0x4800 <twi_readFrom+0x1ae>
    47fe:	d0 e0       	ldi	r29, 0x00	; 0
    4800:	8d 2f       	mov	r24, r29
    4802:	df 91       	pop	r29
    4804:	cf 91       	pop	r28
    4806:	1f 91       	pop	r17
    4808:	0f 91       	pop	r16
    480a:	ff 90       	pop	r15
    480c:	ef 90       	pop	r14
    480e:	df 90       	pop	r13
    4810:	cf 90       	pop	r12
    4812:	bf 90       	pop	r11
    4814:	af 90       	pop	r10
    4816:	9f 90       	pop	r9
    4818:	8f 90       	pop	r8
    481a:	7f 90       	pop	r7
    481c:	6f 90       	pop	r6
    481e:	5f 90       	pop	r5
    4820:	4f 90       	pop	r4
    4822:	08 95       	ret

00004824 <twi_writeTo>:
    4824:	4f 92       	push	r4
    4826:	5f 92       	push	r5
    4828:	6f 92       	push	r6
    482a:	7f 92       	push	r7
    482c:	8f 92       	push	r8
    482e:	9f 92       	push	r9
    4830:	af 92       	push	r10
    4832:	bf 92       	push	r11
    4834:	cf 92       	push	r12
    4836:	df 92       	push	r13
    4838:	ef 92       	push	r14
    483a:	ff 92       	push	r15
    483c:	0f 93       	push	r16
    483e:	1f 93       	push	r17
    4840:	cf 93       	push	r28
    4842:	df 93       	push	r29
    4844:	41 32       	cpi	r20, 0x21	; 33
    4846:	08 f0       	brcs	.+2      	; 0x484a <twi_writeTo+0x26>
    4848:	c6 c0       	rjmp	.+396    	; 0x49d6 <twi_writeTo+0x1b2>
    484a:	12 2f       	mov	r17, r18
    484c:	f4 2e       	mov	r15, r20
    484e:	d7 2e       	mov	r13, r23
    4850:	e6 2e       	mov	r14, r22
    4852:	d8 2f       	mov	r29, r24
    4854:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <micros>
    4858:	4b 01       	movw	r8, r22
    485a:	5c 01       	movw	r10, r24
    485c:	c0 91 4b 06 	lds	r28, 0x064B	; 0x80064b <twi_state>
    4860:	cc 23       	and	r28, r28
    4862:	11 f1       	breq	.+68     	; 0x48a8 <twi_writeTo+0x84>
    4864:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <twi_timeout_us>
    4868:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    486c:	a0 91 46 06 	lds	r26, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    4870:	b0 91 47 06 	lds	r27, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    4874:	89 2b       	or	r24, r25
    4876:	8a 2b       	or	r24, r26
    4878:	8b 2b       	or	r24, r27
    487a:	81 f3       	breq	.-32     	; 0x485c <twi_writeTo+0x38>
    487c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <micros>
    4880:	40 90 44 06 	lds	r4, 0x0644	; 0x800644 <twi_timeout_us>
    4884:	50 90 45 06 	lds	r5, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    4888:	60 90 46 06 	lds	r6, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    488c:	70 90 47 06 	lds	r7, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    4890:	dc 01       	movw	r26, r24
    4892:	cb 01       	movw	r24, r22
    4894:	88 19       	sub	r24, r8
    4896:	99 09       	sbc	r25, r9
    4898:	aa 09       	sbc	r26, r10
    489a:	bb 09       	sbc	r27, r11
    489c:	48 16       	cp	r4, r24
    489e:	59 06       	cpc	r5, r25
    48a0:	6a 06       	cpc	r6, r26
    48a2:	7b 06       	cpc	r7, r27
    48a4:	d8 f6       	brcc	.-74     	; 0x485c <twi_writeTo+0x38>
    48a6:	83 c0       	rjmp	.+262    	; 0x49ae <twi_writeTo+0x18a>
    48a8:	82 e0       	ldi	r24, 0x02	; 2
    48aa:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <twi_state>
    48ae:	00 93 49 06 	sts	0x0649, r16	; 0x800649 <twi_sendStop>
    48b2:	8f ef       	ldi	r24, 0xFF	; 255
    48b4:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <twi_error>
    48b8:	10 92 1d 06 	sts	0x061D, r1	; 0x80061d <twi_masterBufferIndex>
    48bc:	f0 92 1c 06 	sts	0x061C, r15	; 0x80061c <twi_masterBufferLength>
    48c0:	9e 2d       	mov	r25, r14
    48c2:	ae e1       	ldi	r26, 0x1E	; 30
    48c4:	b6 e0       	ldi	r27, 0x06	; 6
    48c6:	ee 2d       	mov	r30, r14
    48c8:	fd 2d       	mov	r31, r13
    48ca:	8e 2f       	mov	r24, r30
    48cc:	89 1b       	sub	r24, r25
    48ce:	8f 15       	cp	r24, r15
    48d0:	18 f4       	brcc	.+6      	; 0x48d8 <twi_writeTo+0xb4>
    48d2:	81 91       	ld	r24, Z+
    48d4:	8d 93       	st	X+, r24
    48d6:	f9 cf       	rjmp	.-14     	; 0x48ca <twi_writeTo+0xa6>
    48d8:	10 92 4a 06 	sts	0x064A, r1	; 0x80064a <twi_slarw>
    48dc:	90 91 4a 06 	lds	r25, 0x064A	; 0x80064a <twi_slarw>
    48e0:	dd 0f       	add	r29, r29
    48e2:	d9 2b       	or	r29, r25
    48e4:	d0 93 4a 06 	sts	0x064A, r29	; 0x80064a <twi_slarw>
    48e8:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <twi_inRepStart>
    48ec:	81 30       	cpi	r24, 0x01	; 1
    48ee:	89 f5       	brne	.+98     	; 0x4952 <twi_writeTo+0x12e>
    48f0:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <twi_inRepStart>
    48f4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <micros>
    48f8:	6b 01       	movw	r12, r22
    48fa:	7c 01       	movw	r14, r24
    48fc:	80 91 4a 06 	lds	r24, 0x064A	; 0x80064a <twi_slarw>
    4900:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4904:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <twi_timeout_us>
    4908:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    490c:	a0 91 46 06 	lds	r26, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    4910:	b0 91 47 06 	lds	r27, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    4914:	89 2b       	or	r24, r25
    4916:	8a 2b       	or	r24, r26
    4918:	8b 2b       	or	r24, r27
    491a:	a9 f0       	breq	.+42     	; 0x4946 <twi_writeTo+0x122>
    491c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <micros>
    4920:	80 90 44 06 	lds	r8, 0x0644	; 0x800644 <twi_timeout_us>
    4924:	90 90 45 06 	lds	r9, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    4928:	a0 90 46 06 	lds	r10, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    492c:	b0 90 47 06 	lds	r11, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    4930:	dc 01       	movw	r26, r24
    4932:	cb 01       	movw	r24, r22
    4934:	8c 19       	sub	r24, r12
    4936:	9d 09       	sbc	r25, r13
    4938:	ae 09       	sbc	r26, r14
    493a:	bf 09       	sbc	r27, r15
    493c:	88 16       	cp	r8, r24
    493e:	99 06       	cpc	r9, r25
    4940:	aa 06       	cpc	r10, r26
    4942:	bb 06       	cpc	r11, r27
    4944:	a0 f1       	brcs	.+104    	; 0x49ae <twi_writeTo+0x18a>
    4946:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    494a:	83 fd       	sbrc	r24, 3
    494c:	d7 cf       	rjmp	.-82     	; 0x48fc <twi_writeTo+0xd8>
    494e:	85 ec       	ldi	r24, 0xC5	; 197
    4950:	01 c0       	rjmp	.+2      	; 0x4954 <twi_writeTo+0x130>
    4952:	85 ee       	ldi	r24, 0xE5	; 229
    4954:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4958:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <micros>
    495c:	6b 01       	movw	r12, r22
    495e:	7c 01       	movw	r14, r24
    4960:	11 23       	and	r17, r17
    4962:	59 f1       	breq	.+86     	; 0x49ba <twi_writeTo+0x196>
    4964:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <twi_state>
    4968:	82 30       	cpi	r24, 0x02	; 2
    496a:	39 f5       	brne	.+78     	; 0x49ba <twi_writeTo+0x196>
    496c:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <twi_timeout_us>
    4970:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    4974:	a0 91 46 06 	lds	r26, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    4978:	b0 91 47 06 	lds	r27, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    497c:	89 2b       	or	r24, r25
    497e:	8a 2b       	or	r24, r26
    4980:	8b 2b       	or	r24, r27
    4982:	71 f3       	breq	.-36     	; 0x4960 <twi_writeTo+0x13c>
    4984:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <micros>
    4988:	80 90 44 06 	lds	r8, 0x0644	; 0x800644 <twi_timeout_us>
    498c:	90 90 45 06 	lds	r9, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    4990:	a0 90 46 06 	lds	r10, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    4994:	b0 90 47 06 	lds	r11, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	8c 19       	sub	r24, r12
    499e:	9d 09       	sbc	r25, r13
    49a0:	ae 09       	sbc	r26, r14
    49a2:	bf 09       	sbc	r27, r15
    49a4:	88 16       	cp	r8, r24
    49a6:	99 06       	cpc	r9, r25
    49a8:	aa 06       	cpc	r10, r26
    49aa:	bb 06       	cpc	r11, r27
    49ac:	c8 f6       	brcc	.-78     	; 0x4960 <twi_writeTo+0x13c>
    49ae:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <twi_do_reset_on_timeout>
    49b2:	0e 94 13 23 	call	0x4626	; 0x4626 <twi_handleTimeout>
    49b6:	c5 e0       	ldi	r28, 0x05	; 5
    49b8:	13 c0       	rjmp	.+38     	; 0x49e0 <twi_writeTo+0x1bc>
    49ba:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <twi_error>
    49be:	8f 3f       	cpi	r24, 0xFF	; 255
    49c0:	79 f0       	breq	.+30     	; 0x49e0 <twi_writeTo+0x1bc>
    49c2:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <twi_error>
    49c6:	80 32       	cpi	r24, 0x20	; 32
    49c8:	41 f0       	breq	.+16     	; 0x49da <twi_writeTo+0x1b6>
    49ca:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <twi_error>
    49ce:	80 33       	cpi	r24, 0x30	; 48
    49d0:	31 f0       	breq	.+12     	; 0x49de <twi_writeTo+0x1ba>
    49d2:	c4 e0       	ldi	r28, 0x04	; 4
    49d4:	05 c0       	rjmp	.+10     	; 0x49e0 <twi_writeTo+0x1bc>
    49d6:	c1 e0       	ldi	r28, 0x01	; 1
    49d8:	03 c0       	rjmp	.+6      	; 0x49e0 <twi_writeTo+0x1bc>
    49da:	c2 e0       	ldi	r28, 0x02	; 2
    49dc:	01 c0       	rjmp	.+2      	; 0x49e0 <twi_writeTo+0x1bc>
    49de:	c3 e0       	ldi	r28, 0x03	; 3
    49e0:	8c 2f       	mov	r24, r28
    49e2:	df 91       	pop	r29
    49e4:	cf 91       	pop	r28
    49e6:	1f 91       	pop	r17
    49e8:	0f 91       	pop	r16
    49ea:	ff 90       	pop	r15
    49ec:	ef 90       	pop	r14
    49ee:	df 90       	pop	r13
    49f0:	cf 90       	pop	r12
    49f2:	bf 90       	pop	r11
    49f4:	af 90       	pop	r10
    49f6:	9f 90       	pop	r9
    49f8:	8f 90       	pop	r8
    49fa:	7f 90       	pop	r7
    49fc:	6f 90       	pop	r6
    49fe:	5f 90       	pop	r5
    4a00:	4f 90       	pop	r4
    4a02:	08 95       	ret

00004a04 <twi_stop>:
    4a04:	85 ed       	ldi	r24, 0xD5	; 213
    4a06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4a0a:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <twi_timeout_us>
    4a0e:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    4a12:	a0 91 46 06 	lds	r26, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    4a16:	b0 91 47 06 	lds	r27, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    4a1a:	07 96       	adiw	r24, 0x07	; 7
    4a1c:	a1 1d       	adc	r26, r1
    4a1e:	b1 1d       	adc	r27, r1
    4a20:	23 e0       	ldi	r18, 0x03	; 3
    4a22:	b6 95       	lsr	r27
    4a24:	a7 95       	ror	r26
    4a26:	97 95       	ror	r25
    4a28:	87 95       	ror	r24
    4a2a:	2a 95       	dec	r18
    4a2c:	d1 f7       	brne	.-12     	; 0x4a22 <twi_stop+0x1e>
    4a2e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4a32:	24 ff       	sbrs	r18, 4
    4a34:	1c c0       	rjmp	.+56     	; 0x4a6e <twi_stop+0x6a>
    4a36:	40 91 44 06 	lds	r20, 0x0644	; 0x800644 <twi_timeout_us>
    4a3a:	50 91 45 06 	lds	r21, 0x0645	; 0x800645 <twi_timeout_us+0x1>
    4a3e:	60 91 46 06 	lds	r22, 0x0646	; 0x800646 <twi_timeout_us+0x2>
    4a42:	70 91 47 06 	lds	r23, 0x0647	; 0x800647 <twi_timeout_us+0x3>
    4a46:	45 2b       	or	r20, r21
    4a48:	46 2b       	or	r20, r22
    4a4a:	47 2b       	or	r20, r23
    4a4c:	81 f3       	breq	.-32     	; 0x4a2e <twi_stop+0x2a>
    4a4e:	00 97       	sbiw	r24, 0x00	; 0
    4a50:	a1 05       	cpc	r26, r1
    4a52:	b1 05       	cpc	r27, r1
    4a54:	41 f0       	breq	.+16     	; 0x4a66 <twi_stop+0x62>
    4a56:	25 e3       	ldi	r18, 0x35	; 53
    4a58:	2a 95       	dec	r18
    4a5a:	f1 f7       	brne	.-4      	; 0x4a58 <twi_stop+0x54>
    4a5c:	00 00       	nop
    4a5e:	01 97       	sbiw	r24, 0x01	; 1
    4a60:	a1 09       	sbc	r26, r1
    4a62:	b1 09       	sbc	r27, r1
    4a64:	e4 cf       	rjmp	.-56     	; 0x4a2e <twi_stop+0x2a>
    4a66:	80 91 42 06 	lds	r24, 0x0642	; 0x800642 <twi_do_reset_on_timeout>
    4a6a:	0c 94 13 23 	jmp	0x4626	; 0x4626 <twi_handleTimeout>
    4a6e:	10 92 4b 06 	sts	0x064B, r1	; 0x80064b <twi_state>
    4a72:	08 95       	ret

00004a74 <__vector_24>:

ISR(TWI_vect)
{
    4a74:	1f 92       	push	r1
    4a76:	0f 92       	push	r0
    4a78:	0f b6       	in	r0, 0x3f	; 63
    4a7a:	0f 92       	push	r0
    4a7c:	11 24       	eor	r1, r1
    4a7e:	2f 93       	push	r18
    4a80:	3f 93       	push	r19
    4a82:	4f 93       	push	r20
    4a84:	5f 93       	push	r21
    4a86:	6f 93       	push	r22
    4a88:	7f 93       	push	r23
    4a8a:	8f 93       	push	r24
    4a8c:	9f 93       	push	r25
    4a8e:	af 93       	push	r26
    4a90:	bf 93       	push	r27
    4a92:	ef 93       	push	r30
    4a94:	ff 93       	push	r31
  switch(TW_STATUS){
    4a96:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    4a9a:	88 7f       	andi	r24, 0xF8	; 248
    4a9c:	80 36       	cpi	r24, 0x60	; 96
    4a9e:	09 f4       	brne	.+2      	; 0x4aa2 <__vector_24+0x2e>
    4aa0:	9e c0       	rjmp	.+316    	; 0x4bde <__vector_24+0x16a>
    4aa2:	78 f5       	brcc	.+94     	; 0x4b02 <__vector_24+0x8e>
    4aa4:	88 32       	cpi	r24, 0x28	; 40
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <__vector_24+0x36>
    4aa8:	5d c0       	rjmp	.+186    	; 0x4b64 <__vector_24+0xf0>
    4aaa:	90 f4       	brcc	.+36     	; 0x4ad0 <__vector_24+0x5c>
    4aac:	80 31       	cpi	r24, 0x10	; 16
    4aae:	09 f4       	brne	.+2      	; 0x4ab2 <__vector_24+0x3e>
    4ab0:	56 c0       	rjmp	.+172    	; 0x4b5e <__vector_24+0xea>
    4ab2:	38 f4       	brcc	.+14     	; 0x4ac2 <__vector_24+0x4e>
    4ab4:	88 23       	and	r24, r24
    4ab6:	09 f4       	brne	.+2      	; 0x4aba <__vector_24+0x46>
    4ab8:	f5 c0       	rjmp	.+490    	; 0x4ca4 <__vector_24+0x230>
    4aba:	88 30       	cpi	r24, 0x08	; 8
    4abc:	09 f4       	brne	.+2      	; 0x4ac0 <__vector_24+0x4c>
    4abe:	4f c0       	rjmp	.+158    	; 0x4b5e <__vector_24+0xea>
    4ac0:	f5 c0       	rjmp	.+490    	; 0x4cac <__vector_24+0x238>
    4ac2:	88 31       	cpi	r24, 0x18	; 24
    4ac4:	09 f4       	brne	.+2      	; 0x4ac8 <__vector_24+0x54>
    4ac6:	4e c0       	rjmp	.+156    	; 0x4b64 <__vector_24+0xf0>
    4ac8:	80 32       	cpi	r24, 0x20	; 32
    4aca:	09 f4       	brne	.+2      	; 0x4ace <__vector_24+0x5a>
    4acc:	5f c0       	rjmp	.+190    	; 0x4b8c <__vector_24+0x118>
    4ace:	ee c0       	rjmp	.+476    	; 0x4cac <__vector_24+0x238>
    4ad0:	80 34       	cpi	r24, 0x40	; 64
    4ad2:	09 f4       	brne	.+2      	; 0x4ad6 <__vector_24+0x62>
    4ad4:	6a c0       	rjmp	.+212    	; 0x4baa <__vector_24+0x136>
    4ad6:	58 f4       	brcc	.+22     	; 0x4aee <__vector_24+0x7a>
    4ad8:	80 33       	cpi	r24, 0x30	; 48
    4ada:	09 f4       	brne	.+2      	; 0x4ade <__vector_24+0x6a>
    4adc:	57 c0       	rjmp	.+174    	; 0x4b8c <__vector_24+0x118>
    4ade:	88 33       	cpi	r24, 0x38	; 56
    4ae0:	09 f0       	breq	.+2      	; 0x4ae4 <__vector_24+0x70>
    4ae2:	e4 c0       	rjmp	.+456    	; 0x4cac <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4ae4:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <twi_error>
      twi_releaseBus();
    4ae8:	0e 94 0d 23 	call	0x461a	; 0x461a <twi_releaseBus>
      break;
    4aec:	df c0       	rjmp	.+446    	; 0x4cac <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4aee:	80 35       	cpi	r24, 0x50	; 80
    4af0:	09 f4       	brne	.+2      	; 0x4af4 <__vector_24+0x80>
    4af2:	4f c0       	rjmp	.+158    	; 0x4b92 <__vector_24+0x11e>
    4af4:	88 35       	cpi	r24, 0x58	; 88
    4af6:	09 f4       	brne	.+2      	; 0x4afa <__vector_24+0x86>
    4af8:	5d c0       	rjmp	.+186    	; 0x4bb4 <__vector_24+0x140>
    4afa:	88 34       	cpi	r24, 0x48	; 72
    4afc:	09 f0       	breq	.+2      	; 0x4b00 <__vector_24+0x8c>
    4afe:	d6 c0       	rjmp	.+428    	; 0x4cac <__vector_24+0x238>
    4b00:	d3 c0       	rjmp	.+422    	; 0x4ca8 <__vector_24+0x234>
    4b02:	88 39       	cpi	r24, 0x98	; 152
    4b04:	09 f4       	brne	.+2      	; 0x4b08 <__vector_24+0x94>
    4b06:	c4 c0       	rjmp	.+392    	; 0x4c90 <__vector_24+0x21c>
    4b08:	a8 f4       	brcc	.+42     	; 0x4b34 <__vector_24+0xc0>
    4b0a:	88 37       	cpi	r24, 0x78	; 120
    4b0c:	09 f4       	brne	.+2      	; 0x4b10 <__vector_24+0x9c>
    4b0e:	67 c0       	rjmp	.+206    	; 0x4bde <__vector_24+0x16a>
    4b10:	38 f4       	brcc	.+14     	; 0x4b20 <__vector_24+0xac>
    4b12:	88 36       	cpi	r24, 0x68	; 104
    4b14:	09 f4       	brne	.+2      	; 0x4b18 <__vector_24+0xa4>
    4b16:	63 c0       	rjmp	.+198    	; 0x4bde <__vector_24+0x16a>
    4b18:	80 37       	cpi	r24, 0x70	; 112
    4b1a:	09 f4       	brne	.+2      	; 0x4b1e <__vector_24+0xaa>
    4b1c:	60 c0       	rjmp	.+192    	; 0x4bde <__vector_24+0x16a>
    4b1e:	c6 c0       	rjmp	.+396    	; 0x4cac <__vector_24+0x238>
    4b20:	88 38       	cpi	r24, 0x88	; 136
    4b22:	09 f4       	brne	.+2      	; 0x4b26 <__vector_24+0xb2>
    4b24:	b5 c0       	rjmp	.+362    	; 0x4c90 <__vector_24+0x21c>
    4b26:	80 39       	cpi	r24, 0x90	; 144
    4b28:	09 f4       	brne	.+2      	; 0x4b2c <__vector_24+0xb8>
    4b2a:	5f c0       	rjmp	.+190    	; 0x4bea <__vector_24+0x176>
    4b2c:	80 38       	cpi	r24, 0x80	; 128
    4b2e:	09 f0       	breq	.+2      	; 0x4b32 <__vector_24+0xbe>
    4b30:	bd c0       	rjmp	.+378    	; 0x4cac <__vector_24+0x238>
    4b32:	5b c0       	rjmp	.+182    	; 0x4bea <__vector_24+0x176>
    4b34:	80 3b       	cpi	r24, 0xB0	; 176
    4b36:	09 f4       	brne	.+2      	; 0x4b3a <__vector_24+0xc6>
    4b38:	83 c0       	rjmp	.+262    	; 0x4c40 <__vector_24+0x1cc>
    4b3a:	38 f4       	brcc	.+14     	; 0x4b4a <__vector_24+0xd6>
    4b3c:	80 3a       	cpi	r24, 0xA0	; 160
    4b3e:	09 f4       	brne	.+2      	; 0x4b42 <__vector_24+0xce>
    4b40:	66 c0       	rjmp	.+204    	; 0x4c0e <__vector_24+0x19a>
    4b42:	88 3a       	cpi	r24, 0xA8	; 168
    4b44:	09 f4       	brne	.+2      	; 0x4b48 <__vector_24+0xd4>
    4b46:	7c c0       	rjmp	.+248    	; 0x4c40 <__vector_24+0x1cc>
    4b48:	b1 c0       	rjmp	.+354    	; 0x4cac <__vector_24+0x238>
    4b4a:	80 3c       	cpi	r24, 0xC0	; 192
    4b4c:	09 f4       	brne	.+2      	; 0x4b50 <__vector_24+0xdc>
    4b4e:	a4 c0       	rjmp	.+328    	; 0x4c98 <__vector_24+0x224>
    4b50:	88 3c       	cpi	r24, 0xC8	; 200
    4b52:	09 f4       	brne	.+2      	; 0x4b56 <__vector_24+0xe2>
    4b54:	a1 c0       	rjmp	.+322    	; 0x4c98 <__vector_24+0x224>
    4b56:	88 3b       	cpi	r24, 0xB8	; 184
    4b58:	09 f4       	brne	.+2      	; 0x4b5c <__vector_24+0xe8>
    4b5a:	87 c0       	rjmp	.+270    	; 0x4c6a <__vector_24+0x1f6>
    4b5c:	a7 c0       	rjmp	.+334    	; 0x4cac <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4b5e:	80 91 4a 06 	lds	r24, 0x064A	; 0x80064a <twi_slarw>
    4b62:	10 c0       	rjmp	.+32     	; 0x4b84 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4b64:	90 91 1d 06 	lds	r25, 0x061D	; 0x80061d <twi_masterBufferIndex>
    4b68:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <twi_masterBufferLength>
    4b6c:	98 17       	cp	r25, r24
    4b6e:	70 f5       	brcc	.+92     	; 0x4bcc <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4b70:	e0 91 1d 06 	lds	r30, 0x061D	; 0x80061d <twi_masterBufferIndex>
    4b74:	81 e0       	ldi	r24, 0x01	; 1
    4b76:	8e 0f       	add	r24, r30
    4b78:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <twi_masterBufferIndex>
    4b7c:	f0 e0       	ldi	r31, 0x00	; 0
    4b7e:	e2 5e       	subi	r30, 0xE2	; 226
    4b80:	f9 4f       	sbci	r31, 0xF9	; 249
    4b82:	80 81       	ld	r24, Z
    4b84:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4b88:	85 ec       	ldi	r24, 0xC5	; 197
    4b8a:	83 c0       	rjmp	.+262    	; 0x4c92 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4b8c:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <twi_error>
    4b90:	8b c0       	rjmp	.+278    	; 0x4ca8 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4b92:	e0 91 1d 06 	lds	r30, 0x061D	; 0x80061d <twi_masterBufferIndex>
    4b96:	81 e0       	ldi	r24, 0x01	; 1
    4b98:	8e 0f       	add	r24, r30
    4b9a:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <twi_masterBufferIndex>
    4b9e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4ba2:	f0 e0       	ldi	r31, 0x00	; 0
    4ba4:	e2 5e       	subi	r30, 0xE2	; 226
    4ba6:	f9 4f       	sbci	r31, 0xF9	; 249
    4ba8:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4baa:	90 91 1d 06 	lds	r25, 0x061D	; 0x80061d <twi_masterBufferIndex>
    4bae:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <twi_masterBufferLength>
    4bb2:	6b c0       	rjmp	.+214    	; 0x4c8a <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4bb4:	e0 91 1d 06 	lds	r30, 0x061D	; 0x80061d <twi_masterBufferIndex>
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	8e 0f       	add	r24, r30
    4bbc:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <twi_masterBufferIndex>
    4bc0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4bc4:	f0 e0       	ldi	r31, 0x00	; 0
    4bc6:	e2 5e       	subi	r30, 0xE2	; 226
    4bc8:	f9 4f       	sbci	r31, 0xF9	; 249
    4bca:	80 83       	st	Z, r24
      if (twi_sendStop){
    4bcc:	80 91 49 06 	lds	r24, 0x0649	; 0x800649 <twi_sendStop>
    4bd0:	81 11       	cpse	r24, r1
    4bd2:	6a c0       	rjmp	.+212    	; 0x4ca8 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4bda:	84 ea       	ldi	r24, 0xA4	; 164
    4bdc:	5e c0       	rjmp	.+188    	; 0x4c9a <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4bde:	83 e0       	ldi	r24, 0x03	; 3
    4be0:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4be4:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <twi_rxBufferIndex>
    4be8:	cf cf       	rjmp	.-98     	; 0x4b88 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4bea:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <twi_rxBufferIndex>
    4bee:	80 32       	cpi	r24, 0x20	; 32
    4bf0:	08 f0       	brcs	.+2      	; 0x4bf4 <__vector_24+0x180>
    4bf2:	4e c0       	rjmp	.+156    	; 0x4c90 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4bf4:	e0 91 d9 05 	lds	r30, 0x05D9	; 0x8005d9 <twi_rxBufferIndex>
    4bf8:	81 e0       	ldi	r24, 0x01	; 1
    4bfa:	8e 0f       	add	r24, r30
    4bfc:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <twi_rxBufferIndex>
    4c00:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4c04:	f0 e0       	ldi	r31, 0x00	; 0
    4c06:	e6 52       	subi	r30, 0x26	; 38
    4c08:	fa 4f       	sbci	r31, 0xFA	; 250
    4c0a:	80 83       	st	Z, r24
    4c0c:	bd cf       	rjmp	.-134    	; 0x4b88 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4c0e:	0e 94 0d 23 	call	0x461a	; 0x461a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4c12:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <twi_rxBufferIndex>
    4c16:	80 32       	cpi	r24, 0x20	; 32
    4c18:	30 f4       	brcc	.+12     	; 0x4c26 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4c1a:	e0 91 d9 05 	lds	r30, 0x05D9	; 0x8005d9 <twi_rxBufferIndex>
    4c1e:	f0 e0       	ldi	r31, 0x00	; 0
    4c20:	e6 52       	subi	r30, 0x26	; 38
    4c22:	fa 4f       	sbci	r31, 0xFA	; 250
    4c24:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4c26:	60 91 d9 05 	lds	r22, 0x05D9	; 0x8005d9 <twi_rxBufferIndex>
    4c2a:	70 e0       	ldi	r23, 0x00	; 0
    4c2c:	e0 91 3e 06 	lds	r30, 0x063E	; 0x80063e <twi_onSlaveReceive>
    4c30:	f0 91 3f 06 	lds	r31, 0x063F	; 0x80063f <twi_onSlaveReceive+0x1>
    4c34:	8a ed       	ldi	r24, 0xDA	; 218
    4c36:	95 e0       	ldi	r25, 0x05	; 5
    4c38:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4c3a:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <twi_rxBufferIndex>
      break;
    4c3e:	36 c0       	rjmp	.+108    	; 0x4cac <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4c40:	84 e0       	ldi	r24, 0x04	; 4
    4c42:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4c46:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4c4a:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4c4e:	e0 91 40 06 	lds	r30, 0x0640	; 0x800640 <twi_onSlaveTransmit>
    4c52:	f0 91 41 06 	lds	r31, 0x0641	; 0x800641 <twi_onSlaveTransmit+0x1>
    4c56:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4c58:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <twi_txBufferLength>
    4c5c:	81 11       	cpse	r24, r1
    4c5e:	05 c0       	rjmp	.+10     	; 0x4c6a <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    4c60:	81 e0       	ldi	r24, 0x01	; 1
    4c62:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4c66:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4c6a:	e0 91 fb 05 	lds	r30, 0x05FB	; 0x8005fb <twi_txBufferIndex>
    4c6e:	81 e0       	ldi	r24, 0x01	; 1
    4c70:	8e 0f       	add	r24, r30
    4c72:	80 93 fb 05 	sts	0x05FB, r24	; 0x8005fb <twi_txBufferIndex>
    4c76:	f0 e0       	ldi	r31, 0x00	; 0
    4c78:	e4 50       	subi	r30, 0x04	; 4
    4c7a:	fa 4f       	sbci	r31, 0xFA	; 250
    4c7c:	80 81       	ld	r24, Z
    4c7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4c82:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <twi_txBufferIndex>
    4c86:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <twi_txBufferLength>
    4c8a:	98 17       	cp	r25, r24
    4c8c:	08 f4       	brcc	.+2      	; 0x4c90 <__vector_24+0x21c>
    4c8e:	7c cf       	rjmp	.-264    	; 0x4b88 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4c90:	85 e8       	ldi	r24, 0x85	; 133
    4c92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4c96:	0a c0       	rjmp	.+20     	; 0x4cac <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4c98:	85 ec       	ldi	r24, 0xC5	; 197
    4c9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4c9e:	10 92 4b 06 	sts	0x064B, r1	; 0x80064b <twi_state>
      break;
    4ca2:	04 c0       	rjmp	.+8      	; 0x4cac <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4ca4:	10 92 d8 05 	sts	0x05D8, r1	; 0x8005d8 <twi_error>
      twi_stop();
    4ca8:	0e 94 02 25 	call	0x4a04	; 0x4a04 <twi_stop>
      break;
  }
}
    4cac:	ff 91       	pop	r31
    4cae:	ef 91       	pop	r30
    4cb0:	bf 91       	pop	r27
    4cb2:	af 91       	pop	r26
    4cb4:	9f 91       	pop	r25
    4cb6:	8f 91       	pop	r24
    4cb8:	7f 91       	pop	r23
    4cba:	6f 91       	pop	r22
    4cbc:	5f 91       	pop	r21
    4cbe:	4f 91       	pop	r20
    4cc0:	3f 91       	pop	r19
    4cc2:	2f 91       	pop	r18
    4cc4:	0f 90       	pop	r0
    4cc6:	0f be       	out	0x3f, r0	; 63
    4cc8:	0f 90       	pop	r0
    4cca:	1f 90       	pop	r1
    4ccc:	18 95       	reti

00004cce <__cmpsf2>:
    4cce:	0e 94 4e 0a 	call	0x149c	; 0x149c <__fp_cmp>
    4cd2:	08 f4       	brcc	.+2      	; 0x4cd6 <__cmpsf2+0x8>
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	08 95       	ret

00004cd8 <__unordsf2>:
    4cd8:	0e 94 4e 0a 	call	0x149c	; 0x149c <__fp_cmp>
    4cdc:	88 0b       	sbc	r24, r24
    4cde:	99 0b       	sbc	r25, r25
    4ce0:	08 95       	ret

00004ce2 <__mulsi3>:
    4ce2:	db 01       	movw	r26, r22
    4ce4:	8f 93       	push	r24
    4ce6:	9f 93       	push	r25
    4ce8:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__muluhisi3>
    4cec:	bf 91       	pop	r27
    4cee:	af 91       	pop	r26
    4cf0:	a2 9f       	mul	r26, r18
    4cf2:	80 0d       	add	r24, r0
    4cf4:	91 1d       	adc	r25, r1
    4cf6:	a3 9f       	mul	r26, r19
    4cf8:	90 0d       	add	r25, r0
    4cfa:	b2 9f       	mul	r27, r18
    4cfc:	90 0d       	add	r25, r0
    4cfe:	11 24       	eor	r1, r1
    4d00:	08 95       	ret

00004d02 <__udivmodsi4>:
    4d02:	a1 e2       	ldi	r26, 0x21	; 33
    4d04:	1a 2e       	mov	r1, r26
    4d06:	aa 1b       	sub	r26, r26
    4d08:	bb 1b       	sub	r27, r27
    4d0a:	fd 01       	movw	r30, r26
    4d0c:	0d c0       	rjmp	.+26     	; 0x4d28 <__udivmodsi4_ep>

00004d0e <__udivmodsi4_loop>:
    4d0e:	aa 1f       	adc	r26, r26
    4d10:	bb 1f       	adc	r27, r27
    4d12:	ee 1f       	adc	r30, r30
    4d14:	ff 1f       	adc	r31, r31
    4d16:	a2 17       	cp	r26, r18
    4d18:	b3 07       	cpc	r27, r19
    4d1a:	e4 07       	cpc	r30, r20
    4d1c:	f5 07       	cpc	r31, r21
    4d1e:	20 f0       	brcs	.+8      	; 0x4d28 <__udivmodsi4_ep>
    4d20:	a2 1b       	sub	r26, r18
    4d22:	b3 0b       	sbc	r27, r19
    4d24:	e4 0b       	sbc	r30, r20
    4d26:	f5 0b       	sbc	r31, r21

00004d28 <__udivmodsi4_ep>:
    4d28:	66 1f       	adc	r22, r22
    4d2a:	77 1f       	adc	r23, r23
    4d2c:	88 1f       	adc	r24, r24
    4d2e:	99 1f       	adc	r25, r25
    4d30:	1a 94       	dec	r1
    4d32:	69 f7       	brne	.-38     	; 0x4d0e <__udivmodsi4_loop>
    4d34:	60 95       	com	r22
    4d36:	70 95       	com	r23
    4d38:	80 95       	com	r24
    4d3a:	90 95       	com	r25
    4d3c:	9b 01       	movw	r18, r22
    4d3e:	ac 01       	movw	r20, r24
    4d40:	bd 01       	movw	r22, r26
    4d42:	cf 01       	movw	r24, r30
    4d44:	08 95       	ret

00004d46 <__umulhisi3>:
    4d46:	a2 9f       	mul	r26, r18
    4d48:	b0 01       	movw	r22, r0
    4d4a:	b3 9f       	mul	r27, r19
    4d4c:	c0 01       	movw	r24, r0
    4d4e:	a3 9f       	mul	r26, r19
    4d50:	70 0d       	add	r23, r0
    4d52:	81 1d       	adc	r24, r1
    4d54:	11 24       	eor	r1, r1
    4d56:	91 1d       	adc	r25, r1
    4d58:	b2 9f       	mul	r27, r18
    4d5a:	70 0d       	add	r23, r0
    4d5c:	81 1d       	adc	r24, r1
    4d5e:	11 24       	eor	r1, r1
    4d60:	91 1d       	adc	r25, r1
    4d62:	08 95       	ret

00004d64 <__usmulhisi3>:
    4d64:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>

00004d68 <__usmulhisi3_tail>:
    4d68:	b7 ff       	sbrs	r27, 7
    4d6a:	08 95       	ret
    4d6c:	82 1b       	sub	r24, r18
    4d6e:	93 0b       	sbc	r25, r19
    4d70:	08 95       	ret

00004d72 <__muluhisi3>:
    4d72:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>
    4d76:	a5 9f       	mul	r26, r21
    4d78:	90 0d       	add	r25, r0
    4d7a:	b4 9f       	mul	r27, r20
    4d7c:	90 0d       	add	r25, r0
    4d7e:	a4 9f       	mul	r26, r20
    4d80:	80 0d       	add	r24, r0
    4d82:	91 1d       	adc	r25, r1
    4d84:	11 24       	eor	r1, r1
    4d86:	08 95       	ret

00004d88 <__muldi3>:
    4d88:	df 93       	push	r29
    4d8a:	cf 93       	push	r28
    4d8c:	1f 93       	push	r17
    4d8e:	0f 93       	push	r16
    4d90:	9a 9d       	mul	r25, r10
    4d92:	f0 2d       	mov	r31, r0
    4d94:	21 9f       	mul	r18, r17
    4d96:	f0 0d       	add	r31, r0
    4d98:	8b 9d       	mul	r24, r11
    4d9a:	f0 0d       	add	r31, r0
    4d9c:	8a 9d       	mul	r24, r10
    4d9e:	e0 2d       	mov	r30, r0
    4da0:	f1 0d       	add	r31, r1
    4da2:	03 9f       	mul	r16, r19
    4da4:	f0 0d       	add	r31, r0
    4da6:	02 9f       	mul	r16, r18
    4da8:	e0 0d       	add	r30, r0
    4daa:	f1 1d       	adc	r31, r1
    4dac:	4e 9d       	mul	r20, r14
    4dae:	e0 0d       	add	r30, r0
    4db0:	f1 1d       	adc	r31, r1
    4db2:	5e 9d       	mul	r21, r14
    4db4:	f0 0d       	add	r31, r0
    4db6:	4f 9d       	mul	r20, r15
    4db8:	f0 0d       	add	r31, r0
    4dba:	7f 93       	push	r23
    4dbc:	6f 93       	push	r22
    4dbe:	bf 92       	push	r11
    4dc0:	af 92       	push	r10
    4dc2:	5f 93       	push	r21
    4dc4:	4f 93       	push	r20
    4dc6:	d5 01       	movw	r26, r10
    4dc8:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>
    4dcc:	8b 01       	movw	r16, r22
    4dce:	ac 01       	movw	r20, r24
    4dd0:	d7 01       	movw	r26, r14
    4dd2:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>
    4dd6:	eb 01       	movw	r28, r22
    4dd8:	e8 0f       	add	r30, r24
    4dda:	f9 1f       	adc	r31, r25
    4ddc:	d6 01       	movw	r26, r12
    4dde:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__muldi3_6>
    4de2:	2f 91       	pop	r18
    4de4:	3f 91       	pop	r19
    4de6:	d6 01       	movw	r26, r12
    4de8:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>
    4dec:	c6 0f       	add	r28, r22
    4dee:	d7 1f       	adc	r29, r23
    4df0:	e8 1f       	adc	r30, r24
    4df2:	f9 1f       	adc	r31, r25
    4df4:	af 91       	pop	r26
    4df6:	bf 91       	pop	r27
    4df8:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__muldi3_6>
    4dfc:	2f 91       	pop	r18
    4dfe:	3f 91       	pop	r19
    4e00:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>
    4e04:	c6 0f       	add	r28, r22
    4e06:	d7 1f       	adc	r29, r23
    4e08:	e8 1f       	adc	r30, r24
    4e0a:	f9 1f       	adc	r31, r25
    4e0c:	d6 01       	movw	r26, r12
    4e0e:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>
    4e12:	e6 0f       	add	r30, r22
    4e14:	f7 1f       	adc	r31, r23
    4e16:	98 01       	movw	r18, r16
    4e18:	be 01       	movw	r22, r28
    4e1a:	cf 01       	movw	r24, r30
    4e1c:	11 24       	eor	r1, r1
    4e1e:	0f 91       	pop	r16
    4e20:	1f 91       	pop	r17
    4e22:	cf 91       	pop	r28
    4e24:	df 91       	pop	r29
    4e26:	08 95       	ret

00004e28 <__muldi3_6>:
    4e28:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>
    4e2c:	46 0f       	add	r20, r22
    4e2e:	57 1f       	adc	r21, r23
    4e30:	c8 1f       	adc	r28, r24
    4e32:	d9 1f       	adc	r29, r25
    4e34:	08 f4       	brcc	.+2      	; 0x4e38 <__muldi3_6+0x10>
    4e36:	31 96       	adiw	r30, 0x01	; 1
    4e38:	08 95       	ret

00004e3a <__umulsidi3>:
    4e3a:	e8 94       	clt

00004e3c <__umulsidi3_helper>:
    4e3c:	df 93       	push	r29
    4e3e:	cf 93       	push	r28
    4e40:	fc 01       	movw	r30, r24
    4e42:	db 01       	movw	r26, r22
    4e44:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>
    4e48:	7f 93       	push	r23
    4e4a:	6f 93       	push	r22
    4e4c:	e9 01       	movw	r28, r18
    4e4e:	9a 01       	movw	r18, r20
    4e50:	ac 01       	movw	r20, r24
    4e52:	bf 93       	push	r27
    4e54:	af 93       	push	r26
    4e56:	3f 93       	push	r19
    4e58:	2f 93       	push	r18
    4e5a:	df 01       	movw	r26, r30
    4e5c:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__umulhisi3>
    4e60:	26 f4       	brtc	.+8      	; 0x4e6a <__umulsidi3_helper+0x2e>
    4e62:	6c 1b       	sub	r22, r28
    4e64:	7d 0b       	sbc	r23, r29
    4e66:	82 0b       	sbc	r24, r18
    4e68:	93 0b       	sbc	r25, r19
    4e6a:	9e 01       	movw	r18, r28
    4e6c:	eb 01       	movw	r28, r22
    4e6e:	fc 01       	movw	r30, r24
    4e70:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__muldi3_6>
    4e74:	af 91       	pop	r26
    4e76:	bf 91       	pop	r27
    4e78:	2f 91       	pop	r18
    4e7a:	3f 91       	pop	r19
    4e7c:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__muldi3_6>
    4e80:	be 01       	movw	r22, r28
    4e82:	cf 01       	movw	r24, r30
    4e84:	f9 01       	movw	r30, r18
    4e86:	2f 91       	pop	r18
    4e88:	3f 91       	pop	r19
    4e8a:	cf 91       	pop	r28
    4e8c:	df 91       	pop	r29
    4e8e:	08 95       	ret

00004e90 <__cmpdi2>:
    4e90:	2a 15       	cp	r18, r10
    4e92:	3b 05       	cpc	r19, r11
    4e94:	4c 05       	cpc	r20, r12
    4e96:	5d 05       	cpc	r21, r13
    4e98:	6e 05       	cpc	r22, r14
    4e9a:	7f 05       	cpc	r23, r15
    4e9c:	80 07       	cpc	r24, r16
    4e9e:	91 07       	cpc	r25, r17
    4ea0:	08 95       	ret

00004ea2 <__tablejump2__>:
    4ea2:	ee 0f       	add	r30, r30
    4ea4:	ff 1f       	adc	r31, r31
    4ea6:	05 90       	lpm	r0, Z+
    4ea8:	f4 91       	lpm	r31, Z
    4eaa:	e0 2d       	mov	r30, r0
    4eac:	09 94       	ijmp

00004eae <malloc>:
    4eae:	0f 93       	push	r16
    4eb0:	1f 93       	push	r17
    4eb2:	cf 93       	push	r28
    4eb4:	df 93       	push	r29
    4eb6:	82 30       	cpi	r24, 0x02	; 2
    4eb8:	91 05       	cpc	r25, r1
    4eba:	10 f4       	brcc	.+4      	; 0x4ec0 <malloc+0x12>
    4ebc:	82 e0       	ldi	r24, 0x02	; 2
    4ebe:	90 e0       	ldi	r25, 0x00	; 0
    4ec0:	e0 91 4e 06 	lds	r30, 0x064E	; 0x80064e <__flp>
    4ec4:	f0 91 4f 06 	lds	r31, 0x064F	; 0x80064f <__flp+0x1>
    4ec8:	20 e0       	ldi	r18, 0x00	; 0
    4eca:	30 e0       	ldi	r19, 0x00	; 0
    4ecc:	a0 e0       	ldi	r26, 0x00	; 0
    4ece:	b0 e0       	ldi	r27, 0x00	; 0
    4ed0:	30 97       	sbiw	r30, 0x00	; 0
    4ed2:	19 f1       	breq	.+70     	; 0x4f1a <malloc+0x6c>
    4ed4:	40 81       	ld	r20, Z
    4ed6:	51 81       	ldd	r21, Z+1	; 0x01
    4ed8:	02 81       	ldd	r16, Z+2	; 0x02
    4eda:	13 81       	ldd	r17, Z+3	; 0x03
    4edc:	48 17       	cp	r20, r24
    4ede:	59 07       	cpc	r21, r25
    4ee0:	c8 f0       	brcs	.+50     	; 0x4f14 <malloc+0x66>
    4ee2:	84 17       	cp	r24, r20
    4ee4:	95 07       	cpc	r25, r21
    4ee6:	69 f4       	brne	.+26     	; 0x4f02 <malloc+0x54>
    4ee8:	10 97       	sbiw	r26, 0x00	; 0
    4eea:	31 f0       	breq	.+12     	; 0x4ef8 <malloc+0x4a>
    4eec:	12 96       	adiw	r26, 0x02	; 2
    4eee:	0c 93       	st	X, r16
    4ef0:	12 97       	sbiw	r26, 0x02	; 2
    4ef2:	13 96       	adiw	r26, 0x03	; 3
    4ef4:	1c 93       	st	X, r17
    4ef6:	27 c0       	rjmp	.+78     	; 0x4f46 <malloc+0x98>
    4ef8:	00 93 4e 06 	sts	0x064E, r16	; 0x80064e <__flp>
    4efc:	10 93 4f 06 	sts	0x064F, r17	; 0x80064f <__flp+0x1>
    4f00:	22 c0       	rjmp	.+68     	; 0x4f46 <malloc+0x98>
    4f02:	21 15       	cp	r18, r1
    4f04:	31 05       	cpc	r19, r1
    4f06:	19 f0       	breq	.+6      	; 0x4f0e <malloc+0x60>
    4f08:	42 17       	cp	r20, r18
    4f0a:	53 07       	cpc	r21, r19
    4f0c:	18 f4       	brcc	.+6      	; 0x4f14 <malloc+0x66>
    4f0e:	9a 01       	movw	r18, r20
    4f10:	bd 01       	movw	r22, r26
    4f12:	ef 01       	movw	r28, r30
    4f14:	df 01       	movw	r26, r30
    4f16:	f8 01       	movw	r30, r16
    4f18:	db cf       	rjmp	.-74     	; 0x4ed0 <malloc+0x22>
    4f1a:	21 15       	cp	r18, r1
    4f1c:	31 05       	cpc	r19, r1
    4f1e:	f9 f0       	breq	.+62     	; 0x4f5e <malloc+0xb0>
    4f20:	28 1b       	sub	r18, r24
    4f22:	39 0b       	sbc	r19, r25
    4f24:	24 30       	cpi	r18, 0x04	; 4
    4f26:	31 05       	cpc	r19, r1
    4f28:	80 f4       	brcc	.+32     	; 0x4f4a <malloc+0x9c>
    4f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    4f2e:	61 15       	cp	r22, r1
    4f30:	71 05       	cpc	r23, r1
    4f32:	21 f0       	breq	.+8      	; 0x4f3c <malloc+0x8e>
    4f34:	fb 01       	movw	r30, r22
    4f36:	93 83       	std	Z+3, r25	; 0x03
    4f38:	82 83       	std	Z+2, r24	; 0x02
    4f3a:	04 c0       	rjmp	.+8      	; 0x4f44 <malloc+0x96>
    4f3c:	90 93 4f 06 	sts	0x064F, r25	; 0x80064f <__flp+0x1>
    4f40:	80 93 4e 06 	sts	0x064E, r24	; 0x80064e <__flp>
    4f44:	fe 01       	movw	r30, r28
    4f46:	32 96       	adiw	r30, 0x02	; 2
    4f48:	44 c0       	rjmp	.+136    	; 0x4fd2 <malloc+0x124>
    4f4a:	fe 01       	movw	r30, r28
    4f4c:	e2 0f       	add	r30, r18
    4f4e:	f3 1f       	adc	r31, r19
    4f50:	81 93       	st	Z+, r24
    4f52:	91 93       	st	Z+, r25
    4f54:	22 50       	subi	r18, 0x02	; 2
    4f56:	31 09       	sbc	r19, r1
    4f58:	39 83       	std	Y+1, r19	; 0x01
    4f5a:	28 83       	st	Y, r18
    4f5c:	3a c0       	rjmp	.+116    	; 0x4fd2 <malloc+0x124>
    4f5e:	20 91 4c 06 	lds	r18, 0x064C	; 0x80064c <__brkval>
    4f62:	30 91 4d 06 	lds	r19, 0x064D	; 0x80064d <__brkval+0x1>
    4f66:	23 2b       	or	r18, r19
    4f68:	41 f4       	brne	.+16     	; 0x4f7a <malloc+0xcc>
    4f6a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4f6e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4f72:	30 93 4d 06 	sts	0x064D, r19	; 0x80064d <__brkval+0x1>
    4f76:	20 93 4c 06 	sts	0x064C, r18	; 0x80064c <__brkval>
    4f7a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4f7e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4f82:	21 15       	cp	r18, r1
    4f84:	31 05       	cpc	r19, r1
    4f86:	41 f4       	brne	.+16     	; 0x4f98 <malloc+0xea>
    4f88:	2d b7       	in	r18, 0x3d	; 61
    4f8a:	3e b7       	in	r19, 0x3e	; 62
    4f8c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4f90:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4f94:	24 1b       	sub	r18, r20
    4f96:	35 0b       	sbc	r19, r21
    4f98:	e0 91 4c 06 	lds	r30, 0x064C	; 0x80064c <__brkval>
    4f9c:	f0 91 4d 06 	lds	r31, 0x064D	; 0x80064d <__brkval+0x1>
    4fa0:	e2 17       	cp	r30, r18
    4fa2:	f3 07       	cpc	r31, r19
    4fa4:	a0 f4       	brcc	.+40     	; 0x4fce <malloc+0x120>
    4fa6:	2e 1b       	sub	r18, r30
    4fa8:	3f 0b       	sbc	r19, r31
    4faa:	28 17       	cp	r18, r24
    4fac:	39 07       	cpc	r19, r25
    4fae:	78 f0       	brcs	.+30     	; 0x4fce <malloc+0x120>
    4fb0:	ac 01       	movw	r20, r24
    4fb2:	4e 5f       	subi	r20, 0xFE	; 254
    4fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    4fb6:	24 17       	cp	r18, r20
    4fb8:	35 07       	cpc	r19, r21
    4fba:	48 f0       	brcs	.+18     	; 0x4fce <malloc+0x120>
    4fbc:	4e 0f       	add	r20, r30
    4fbe:	5f 1f       	adc	r21, r31
    4fc0:	50 93 4d 06 	sts	0x064D, r21	; 0x80064d <__brkval+0x1>
    4fc4:	40 93 4c 06 	sts	0x064C, r20	; 0x80064c <__brkval>
    4fc8:	81 93       	st	Z+, r24
    4fca:	91 93       	st	Z+, r25
    4fcc:	02 c0       	rjmp	.+4      	; 0x4fd2 <malloc+0x124>
    4fce:	e0 e0       	ldi	r30, 0x00	; 0
    4fd0:	f0 e0       	ldi	r31, 0x00	; 0
    4fd2:	cf 01       	movw	r24, r30
    4fd4:	df 91       	pop	r29
    4fd6:	cf 91       	pop	r28
    4fd8:	1f 91       	pop	r17
    4fda:	0f 91       	pop	r16
    4fdc:	08 95       	ret

00004fde <free>:
    4fde:	cf 93       	push	r28
    4fe0:	df 93       	push	r29
    4fe2:	00 97       	sbiw	r24, 0x00	; 0
    4fe4:	09 f4       	brne	.+2      	; 0x4fe8 <free+0xa>
    4fe6:	81 c0       	rjmp	.+258    	; 0x50ea <free+0x10c>
    4fe8:	fc 01       	movw	r30, r24
    4fea:	32 97       	sbiw	r30, 0x02	; 2
    4fec:	13 82       	std	Z+3, r1	; 0x03
    4fee:	12 82       	std	Z+2, r1	; 0x02
    4ff0:	a0 91 4e 06 	lds	r26, 0x064E	; 0x80064e <__flp>
    4ff4:	b0 91 4f 06 	lds	r27, 0x064F	; 0x80064f <__flp+0x1>
    4ff8:	10 97       	sbiw	r26, 0x00	; 0
    4ffa:	81 f4       	brne	.+32     	; 0x501c <free+0x3e>
    4ffc:	20 81       	ld	r18, Z
    4ffe:	31 81       	ldd	r19, Z+1	; 0x01
    5000:	82 0f       	add	r24, r18
    5002:	93 1f       	adc	r25, r19
    5004:	20 91 4c 06 	lds	r18, 0x064C	; 0x80064c <__brkval>
    5008:	30 91 4d 06 	lds	r19, 0x064D	; 0x80064d <__brkval+0x1>
    500c:	28 17       	cp	r18, r24
    500e:	39 07       	cpc	r19, r25
    5010:	51 f5       	brne	.+84     	; 0x5066 <free+0x88>
    5012:	f0 93 4d 06 	sts	0x064D, r31	; 0x80064d <__brkval+0x1>
    5016:	e0 93 4c 06 	sts	0x064C, r30	; 0x80064c <__brkval>
    501a:	67 c0       	rjmp	.+206    	; 0x50ea <free+0x10c>
    501c:	ed 01       	movw	r28, r26
    501e:	20 e0       	ldi	r18, 0x00	; 0
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	ce 17       	cp	r28, r30
    5024:	df 07       	cpc	r29, r31
    5026:	40 f4       	brcc	.+16     	; 0x5038 <free+0x5a>
    5028:	4a 81       	ldd	r20, Y+2	; 0x02
    502a:	5b 81       	ldd	r21, Y+3	; 0x03
    502c:	9e 01       	movw	r18, r28
    502e:	41 15       	cp	r20, r1
    5030:	51 05       	cpc	r21, r1
    5032:	f1 f0       	breq	.+60     	; 0x5070 <free+0x92>
    5034:	ea 01       	movw	r28, r20
    5036:	f5 cf       	rjmp	.-22     	; 0x5022 <free+0x44>
    5038:	d3 83       	std	Z+3, r29	; 0x03
    503a:	c2 83       	std	Z+2, r28	; 0x02
    503c:	40 81       	ld	r20, Z
    503e:	51 81       	ldd	r21, Z+1	; 0x01
    5040:	84 0f       	add	r24, r20
    5042:	95 1f       	adc	r25, r21
    5044:	c8 17       	cp	r28, r24
    5046:	d9 07       	cpc	r29, r25
    5048:	59 f4       	brne	.+22     	; 0x5060 <free+0x82>
    504a:	88 81       	ld	r24, Y
    504c:	99 81       	ldd	r25, Y+1	; 0x01
    504e:	84 0f       	add	r24, r20
    5050:	95 1f       	adc	r25, r21
    5052:	02 96       	adiw	r24, 0x02	; 2
    5054:	91 83       	std	Z+1, r25	; 0x01
    5056:	80 83       	st	Z, r24
    5058:	8a 81       	ldd	r24, Y+2	; 0x02
    505a:	9b 81       	ldd	r25, Y+3	; 0x03
    505c:	93 83       	std	Z+3, r25	; 0x03
    505e:	82 83       	std	Z+2, r24	; 0x02
    5060:	21 15       	cp	r18, r1
    5062:	31 05       	cpc	r19, r1
    5064:	29 f4       	brne	.+10     	; 0x5070 <free+0x92>
    5066:	f0 93 4f 06 	sts	0x064F, r31	; 0x80064f <__flp+0x1>
    506a:	e0 93 4e 06 	sts	0x064E, r30	; 0x80064e <__flp>
    506e:	3d c0       	rjmp	.+122    	; 0x50ea <free+0x10c>
    5070:	e9 01       	movw	r28, r18
    5072:	fb 83       	std	Y+3, r31	; 0x03
    5074:	ea 83       	std	Y+2, r30	; 0x02
    5076:	49 91       	ld	r20, Y+
    5078:	59 91       	ld	r21, Y+
    507a:	c4 0f       	add	r28, r20
    507c:	d5 1f       	adc	r29, r21
    507e:	ec 17       	cp	r30, r28
    5080:	fd 07       	cpc	r31, r29
    5082:	61 f4       	brne	.+24     	; 0x509c <free+0xbe>
    5084:	80 81       	ld	r24, Z
    5086:	91 81       	ldd	r25, Z+1	; 0x01
    5088:	84 0f       	add	r24, r20
    508a:	95 1f       	adc	r25, r21
    508c:	02 96       	adiw	r24, 0x02	; 2
    508e:	e9 01       	movw	r28, r18
    5090:	99 83       	std	Y+1, r25	; 0x01
    5092:	88 83       	st	Y, r24
    5094:	82 81       	ldd	r24, Z+2	; 0x02
    5096:	93 81       	ldd	r25, Z+3	; 0x03
    5098:	9b 83       	std	Y+3, r25	; 0x03
    509a:	8a 83       	std	Y+2, r24	; 0x02
    509c:	e0 e0       	ldi	r30, 0x00	; 0
    509e:	f0 e0       	ldi	r31, 0x00	; 0
    50a0:	12 96       	adiw	r26, 0x02	; 2
    50a2:	8d 91       	ld	r24, X+
    50a4:	9c 91       	ld	r25, X
    50a6:	13 97       	sbiw	r26, 0x03	; 3
    50a8:	00 97       	sbiw	r24, 0x00	; 0
    50aa:	19 f0       	breq	.+6      	; 0x50b2 <free+0xd4>
    50ac:	fd 01       	movw	r30, r26
    50ae:	dc 01       	movw	r26, r24
    50b0:	f7 cf       	rjmp	.-18     	; 0x50a0 <free+0xc2>
    50b2:	8d 91       	ld	r24, X+
    50b4:	9c 91       	ld	r25, X
    50b6:	11 97       	sbiw	r26, 0x01	; 1
    50b8:	9d 01       	movw	r18, r26
    50ba:	2e 5f       	subi	r18, 0xFE	; 254
    50bc:	3f 4f       	sbci	r19, 0xFF	; 255
    50be:	82 0f       	add	r24, r18
    50c0:	93 1f       	adc	r25, r19
    50c2:	20 91 4c 06 	lds	r18, 0x064C	; 0x80064c <__brkval>
    50c6:	30 91 4d 06 	lds	r19, 0x064D	; 0x80064d <__brkval+0x1>
    50ca:	28 17       	cp	r18, r24
    50cc:	39 07       	cpc	r19, r25
    50ce:	69 f4       	brne	.+26     	; 0x50ea <free+0x10c>
    50d0:	30 97       	sbiw	r30, 0x00	; 0
    50d2:	29 f4       	brne	.+10     	; 0x50de <free+0x100>
    50d4:	10 92 4f 06 	sts	0x064F, r1	; 0x80064f <__flp+0x1>
    50d8:	10 92 4e 06 	sts	0x064E, r1	; 0x80064e <__flp>
    50dc:	02 c0       	rjmp	.+4      	; 0x50e2 <free+0x104>
    50de:	13 82       	std	Z+3, r1	; 0x03
    50e0:	12 82       	std	Z+2, r1	; 0x02
    50e2:	b0 93 4d 06 	sts	0x064D, r27	; 0x80064d <__brkval+0x1>
    50e6:	a0 93 4c 06 	sts	0x064C, r26	; 0x80064c <__brkval>
    50ea:	df 91       	pop	r29
    50ec:	cf 91       	pop	r28
    50ee:	08 95       	ret

000050f0 <__do_global_dtors>:
    50f0:	10 e0       	ldi	r17, 0x00	; 0
    50f2:	cb ea       	ldi	r28, 0xAB	; 171
    50f4:	d0 e0       	ldi	r29, 0x00	; 0
    50f6:	04 c0       	rjmp	.+8      	; 0x5100 <__do_global_dtors+0x10>
    50f8:	fe 01       	movw	r30, r28
    50fa:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__tablejump2__>
    50fe:	21 96       	adiw	r28, 0x01	; 1
    5100:	cc 3a       	cpi	r28, 0xAC	; 172
    5102:	d1 07       	cpc	r29, r17
    5104:	c9 f7       	brne	.-14     	; 0x50f8 <__do_global_dtors+0x8>
    5106:	f8 94       	cli

00005108 <__stop_program>:
    5108:	ff cf       	rjmp	.-2      	; 0x5108 <__stop_program>
